<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Learn and Share</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nth-blogs.herokuapp.com/"/>
  <updated>2018-05-18T00:43:05.756Z</updated>
  <id>http://nth-blogs.herokuapp.com/</id>
  
  <author>
    <name>Hung Tan Nguyen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Giới thiệu Progressive Web App</title>
    <link href="http://nth-blogs.herokuapp.com/2018/05/Gioi-thieu-Progressive-Web-App.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/05/Gioi-thieu-Progressive-Web-App.html</id>
    <published>2018-05-18T00:30:00.000Z</published>
    <updated>2018-05-18T00:43:05.756Z</updated>
    
    <content type="html"><![CDATA[<p><strong>P</strong>rogressive Web App (PWA) là một dạng ứng dụng web (web app) mới đang thu hút rất nhiều sự quan tâm từ các nhà phát triển web khắp thế giới đặc biệt là các doanh nghiệp hoạt động trực tuyến, tuy nhiên nó vẫn còn khá mới mẻ tại Việt Nam.<br><a id="more"></a><br>Đã có nhiều bài viết liên quan đến PWA dành cho <a href="https://addyosmani.com/blog/getting-started-with-progressive-web-apps/" target="_blank" rel="noopener">lập</a> <a href="https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/" target="_blank" rel="noopener">trình</a> <a href="https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/" target="_blank" rel="noopener">viên</a>, cho nên trong bài viết này tôi sẽ cố gắng giải thích PWA để người dùng Web phổ thông vẫn có thể hiểu.</p><h2 id="Progressive-Web-App-la-gi"><a href="#Progressive-Web-App-la-gi" class="headerlink" title="Progressive Web App là gì?"></a>Progressive Web App là gì?</h2><p><strong>PWA là ứng dụng web được viết để tận dụng những tính năng mới nhất của trình duyệt Web trên máy tính để bàn (desktop) lẫn điện thoại thông minh, nhưng đồng thời vẫn chạy được trên những trình duyệt và thiết bị cũ hơn. PWA lấy phương pháp <a href="https://www.youtube.com/watch?v=5oUSzo1oRv0" target="_blank" rel="noopener">Cải Tiến Tăng Dần (Progressive Enhancement)</a> làm cốt lõi (nên mới có chữ Progressive).</strong></p><p>Đối với những trình duyệt và thiết bị cũ, PWA hoạt động như một mobile website thông thường. Nhưng với những trình duyệt trên thiết bị di động mới nhất, PWA hoạt động như một <em>mobile app</em>[^1] thực thụ.</p><p>Những tác giả của khái niệm PWA (đến từ nhóm phát triển trình duyệt Chrome) đã đưa ra những đặc tính cần có của một PWA như sau:</p><ul><li><strong>Progressive</strong> - Chạy được trên <em>mọi</em> (nên hiểu: tuyệt đại đa số) thiết bị, do được phát triển với phương pháp Cải Tiến Tăng Dần.</li><li><strong>Responsive</strong> - Có thiết kế <em>giao diện tùy ứng</em> (responsive design), hiển thị và sử dụng được trên mobile, tablet, laptop hay bất kỳ cỡ màn hình nào trong tương lai.</li><li><strong>Connectivity independent</strong> - PWA vẫn có thể hoạt động tốt với điều kiện kết nối mạng chập chờn hoặc mất hẳn (offline).</li><li><strong>App-like</strong> - Có giao diện và trải nghiệm như mobile app thực thụ.</li><li><strong>Fresh</strong> - Dù nó hoạt động như mobile app, nhưng tính năng và giao diện luôn được cập nhật tức thời nhờ nền tảng Web (không cần người dùng update từ Apple App Store hay Google Play - gọi chung là app store).</li><li><strong>Safe</strong> - PWA phải được tải thông qua giao thức TLS (hay nôm na là HTTPS), để đảm bảo việc trao đổi dữ liệu không bị bên thứ ba can thiệp.</li><li><strong>Discoverable</strong> - Thông qua file khai báo chuẩn (được thống nhất bởi tổ chức W3C), mà các PWA dễ dàng được các cỗ máy tìm kiếm đánh dấu và thông báo cho người dùng.</li><li><strong>Re-engageable</strong> - PWA cho phép việc tái tiếp cận người dùng dễ dàng hơn nhờ những tính năng đặc biệt như là push notification (thông báo chủ động).</li><li><strong>Installable</strong> - PWA cho phép người dùng dễ dàng lưu lại web app trên điện thoại (thường là trên màn hình home screen) mà không cần phải vào app store</li><li><strong>Linkable</strong> - Dễ dàng share app chỉ với đường link và không cần người nhận phải cài đặt phức tạp chỉ để xem được nội dung bạn muốn share.</li></ul><h2 id="Nhung-diem-khac-biet-cua-Progressive-Web-App"><a href="#Nhung-diem-khac-biet-cua-Progressive-Web-App" class="headerlink" title="Những điểm khác biệt của Progressive Web App?"></a>Những điểm khác biệt của Progressive Web App?</h2><p>Trước tiên cần hiểu rằng, sự tiến hóa của mobile web app cần sự hợp tác của rất nhiều bên liên quan trong đó có các nhà phát triển trình duyệt, hệ điều hành di động, và cả những chuyên gia về ngôn ngữ lập trình cho Web. Sự tiến hóa của mobile web thường đi cùng với sự phát triển và chuẩn hóa của nền tảng Web do tổ chức <strong>W3C</strong>[^2] chịu trách nhiệm.</p><p>Khi tôi tư vấn và phát triển app cho khách hàng, rất nhiều lần doanh nghiệp từ chối lựa chọn giải pháp web app hoặc hybrid app với lý do chính là <em>“HTML5 không nhanh bằng native”</em>. Tuy nhiên điều này không còn đúng tại thời điểm hiện tại.</p><p>Nhờ những cải tiến của phần cứng thiết bị, hệ điều hành di động, trình duyệt, và nhất là đặc tả Web trong vài năm gần đây mà web app đã thêm những khả năng không thua kém native app như:</p><ul><li>Giao diện tương tác mượt mà hơn, đặt biệt là hỗ trợ đồ họa 3D, animation từ phần cứng (hardware accelerated)</li><li>Khả năng chơi video, audio thông qua trình duyệt mobile đã hoàn thiện và định dạng gần như đã thống nhất.</li><li>Bàn phím ảo thích ứng với trường nhập web form khác nhau: email, URL, telephone…</li><li>Có khả năng truy xuất các sensor và bộ phận đa phương tiện của thiết bị: định vị GPS, con quay hồi chuyển, trạng thái pin, network, camera, microphone…</li><li>Cơ sở dữ liệu (CSDL) tại trình duyệt cho phép tìm kiếm và truy cập nhanh lượng dữ liệu lớn và cho phép người dùng trở lại trang web app nhanh hơn.</li><li>Đặc tả mới về CSS cho phép designer và front end developer tạo giao diện tùy ứng (responsive design) và giao diện giống app dễ dàng hơn.</li></ul><p>Dù vậy, web app vẫn còn một số hạn chế so với native app. Chúng ta hãy xem PWA đã được bổ sung những khả năng gì để có thể xóa dần khoảng cách giữa web và native:</p><h2 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h2><p>Được giới thiệu chính thức <a href="https://en.wikipedia.org/wiki/Progressive_Web_Apps" target="_blank" rel="noopener">từ 2015</a>, PWA đã trải qua thời gian thử nghiệm và trưởng thành đủ lâu để giờ đây chúng ta có thể khẳng định PWA chính là tương lai của Web và Web App.</p><p>PWA đóng góp thêm một giải pháp ứng dụng di động nhiều hứa hẹn, giải phóng doanh nghiệp khỏi sự lệ thuộc vào app store, những hạn chế của native app. Và nếu được thiết kế hợp lý, PWA sẽ là giải pháp hợp nhất cho “mọi nền tảng” từ desktop đến mobile.</p><hr><h4 id="Ghi-chu"><a href="#Ghi-chu" class="headerlink" title="Ghi chú:"></a>Ghi chú:</h4><p>[^1]: Xin tóm tắt lại một số thuật ngữ về <strong>“app”</strong> trên thiết bị di động:</p><ul><li>Mobile app hoặc native app: (ở Việt Nam thường gọi tắt là “app”) là ứng dụng được cài đặt từ app store, được viết bằng ngôn ngữ lập trình dành riêng cho từng hệ điều hành di động khác nhau.</li><li>(Mobile) web app: là website chạy trên trình duyệt của smart phone nhưng có trải nghiệm giống app và thường trao đổi nhiều dữ liệu giữa người dùng và website.</li><li>Hybrid app: là ứng dụng được cài đặt từ app store, tuy nhiên được viết bằng cùng ngôn ngữ lập trình với web app. Dù hybrid app có thể cài được trên nhiều HĐH khác nhau nhưng nó chỉ cần được viết cùng một bộ mã nguồn với một ít điều chỉnh riêng cho mỗi loại HĐH mà nó hỗ trợ.</li></ul><p>[^2]: Tổ chức World Wide Web Consortium có trách nhiệm chuẩn hóa các đặc tả về Web và khuyến khích các trình duyệt khác nhau phải tuân theo để các website hoạt động một cách đồng nhất bất kể trình duyệt dùng để hiển thị.</p><p>[^3]: URL là đường link đến một trang web bất kỳ</p><p>[^4]: Các trình duyệt phổ biến nhất bao gồm: Chrome, Firefox, Safari, MS Edge, Opera, Samsung Internet, UC Browser. Tại Việt Nam, trình duyệt phổ biến thứ 2 sau Chrome là CocCoc. Tuy nhiên CocCoc cũng là một trình duyệt biến thể từ mã nguồn mở của Chrome nên những tính năng của PWA cũng sẽ được hỗ trợ.</p><p>[^5]: Người dùng sẽ vẫn nhận được push notification cho dù họ không lưu app về home screen chỉ cần họ đã bấm đồng ý nhận push notification. Việc yêu cầu gửi push notification cần thận trọng và chỉ thực hiện khi người dùng đã thể hiện sự quan tâm đến dịch vụ của bạn. (Nếu không khả năng người dùng từ chối nhận push notification là rất cao)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;rogressive Web App (PWA) là một dạng ứng dụng web (web app) mới đang thu hút rất nhiều sự quan tâm từ các nhà phát triển web khắp thế giới đặc biệt là các doanh nghiệp hoạt động trực tuyến, tuy nhiên nó vẫn còn khá mới mẻ tại Việt Nam.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
      <category term="pwa" scheme="http://nth-blogs.herokuapp.com/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>Giới thiệu về redux saga</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Gioi-thieu-ve-redux-saga.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Gioi-thieu-ve-redux-saga.html</id>
    <published>2018-04-30T11:37:00.000Z</published>
    <updated>2018-04-30T11:52:22.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Saga-la-gi"><a href="#Redux-Saga-la-gi" class="headerlink" title="Redux-Saga là gì?"></a>Redux-Saga là gì?</h1><p>Redux-Saga là một thư viện redux middleware, giúp quản lý những side effect trong ứng dụng redux trở nên đơn giản hơn. Bằng việc sử dụng tối đa tính năng <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noopener">Generators</a> <code>(function*)</code> của ES6, nó cho phép ta viết async code nhìn giống như là synchronos.</p><a id="more"></a><p>Saga không chỉ tồn tại trong thế giới javascript, nó còn được coi là 1 pattern. Bạn có thể xem qua về saga pattern bằng clip này: <a href="https://youtu.be/xDuwrtwYHu8" target="_blank" rel="noopener">https://youtu.be/xDuwrtwYHu8</a></p><p>Một cách nhìn nhanh chóng thì Saga pattern là cách để quản lý những long transaction với những side effect hoặc các nguy cơ tiềm ẩn. Với mỗi transaction thành công, chúng ta đều cần có counter-transaction để revert transaction đó về trạng thái ban đầu nếu gặp trục trặc. Tham khảo thêm về saga pattern với bài viết của Roman Liutikov : <a href="https://medium.com/@roman01la/confusion-about-saga-pattern-bbaac56e622" target="_blank" rel="noopener">Confusion about Saga pattern</a></p><h1 id="Side-effect-la-gi"><a href="#Side-effect-la-gi" class="headerlink" title="Side effect là gì??"></a>Side effect là gì??</h1><p>Ta đã biết tất cả những xử lý ở REDUCER đều phải là synchronous và pure tức chỉ là xử lý đồng bộ. Nhưng trong ứng dụng thực tế thì cần nhiều hơn vậy ví dụ như asynchronous (thực hiện một số việc như gọi một hàm AJAX để fetch dữ liệu về nhưng cần đợi kết quả chứ kết quả không trả về ngay được) hoặc là impure (thực hiện lưu, đọc dữ liệu ra bên ngoài như lưu dữ liệu ra ổ cứng hay đọc cookie từ trình duyệt… đều cần đợi kết quả). Những việc như thế trong lập trình hàm gọi nó là side effects.</p><h1 id="Generator-function-la-gi"><a href="#Generator-function-la-gi" class="headerlink" title="Generator function là gì??"></a>Generator function là gì??</h1><p>Khác với function bình thường là thực thi và trả về kết quả, thì Generator function có thể thực thi, tạm dừng trả về kết quả và thực thi bằng tiếp. Từ khóa để làm được việc đấy là “YIELD”. Generator được đưa ra cách đây mấy chục năm nhưng đến ES2015 mới được bổ sung, các ngôn ngữ khác đã được bổ sung tính năng này như C#, PHP, Ruby, C++, R…</p><h1 id="Redux-Saga-hoat-dong-nhu-the-nao"><a href="#Redux-Saga-hoat-dong-nhu-the-nao" class="headerlink" title="Redux-Saga hoạt động như thế nào??"></a>Redux-Saga hoạt động như thế nào??</h1><p>Đối với logic của saga, ta cung cấp một hàm cho saga, chính hàm này là hàm đứng ra xem xét các action trước khi vào store, nếu là action quan tâm thì nó sẽ thực thi hàm sẽ được thực thi, nếu bạn biết khái niệm hook thì hàm cung cấp cho saga chính là hàm hook. Điều đặc biệt của hàm hook này nó là một generator function, trong generator function này có yield và mỗi khi yield ta sẽ trả về một plain object. Object trả về đó được gọi Effect object. effect object này đơn giản chỉ là một object bình thường nhưng chứa thông tin đặc biệt dùng để chỉ dẫn middleware của Redux thực thi các hoạt động khác ví dụ như gọi một hàm async khác hay put một action tới store. Để tạo ra effect object đề cập ở trên thì ta gọi hàm từ thư viện của saga là redux-saga/effects.</p><p><img src="https://i.stack.imgur.com/iCi6Y.png" alt=""></p><h1 id="Tai-sao-toi-phai-su-dung-Saga"><a href="#Tai-sao-toi-phai-su-dung-Saga" class="headerlink" title="Tại sao tôi phải sử dụng Saga??"></a>Tại sao tôi phải sử dụng Saga??</h1><p>Khi bắt đầu tìm tòi về redux, bạn hay tìm thấy các bài hướng dẫn sử dụng <a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="noopener">redux-thunk</a> hoặc <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a> để quản lý các async action. Vậy tại sao bạn lại được khuyên sử dụng redux-saga ?</p><p>Trích dẫn trong document của redux-saga:</p><blockquote><p>Contrary to redux thunk, you don’t end up in callback hell, you can test your asynchronous flows easily and your actions stay pure. _Tạm dịch: trái với redux thunk, bạn không cần phải phát dồ lên với các callback trong mỗi action, đến với saga đi, bạn có thể test các async action với một quy trình dễ dàng mà không làm hư các action đó !</p></blockquote><h4 id="So-sanh-saga-va-thunk"><a href="#So-sanh-saga-va-thunk" class="headerlink" title="So sánh saga và thunk:"></a>So sánh saga và thunk:</h4><ol><li><p>redux-thunk</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  API_BUTTON_CLICK,</span><br><span class="line">  API_BUTTON_CLICK_SUCCESS,</span><br><span class="line">  API_BUTTON_CLICK_ERROR,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./actions/consts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getDataFromAPI &#125; <span class="keyword">from</span> <span class="string">'./api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataStarted = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: API_BUTTON_CLICK &#125;);</span><br><span class="line"><span class="keyword">const</span> getDataSuccess = <span class="function"><span class="params">data</span> =&gt;</span> (&#123; <span class="attr">type</span>: API_BUTTON_CLICK_SUCCESS, <span class="attr">payload</span>: data &#125;)</span><br><span class="line"><span class="keyword">const</span> getDataError = <span class="function"><span class="params">message</span> =&gt;</span> (&#123; <span class="attr">type</span>: API_BUTTON_CLICK_ERROR. payload: message &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataFromAPI = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(getDataStarted());</span><br><span class="line"></span><br><span class="line">    getDataFromAPI()</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(getUserSuccess(data));</span><br><span class="line">      &#125;).fail(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(getDataError(err.message));</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Ở đây ta có một action creator getDataFromAPI() bắt đầu async progress như sau:</p><ul><li>Đầu tiên bắn ra action cho phép store biết rằng chuẩn bị 1 API request ( dispatch(getDataStarted())</li><li>Tiếp theo thực hiện API request trả về một Promise</li><li>Cuối cùng bắn ra success action nếu request thành công hoặc error action nếu có lỗi</li></ul></li><li><p>redux-saga</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  API_BUTTON_CLICK,</span><br><span class="line">  API_BUTTON_CLICK_SUCCESS,</span><br><span class="line">  API_BUTTON_CLICK_ERROR,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./actions/consts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getDataFromAPI &#125; <span class="keyword">from</span> <span class="string">'./api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">apiSideEffect</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">yield</span> call(getDataFromAPI);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: API_BUTTON_CLICK_SUCCESS, <span class="attr">payload</span>: data &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: API_BUTTON_CLICK_ERROR, <span class="attr">payload</span>: e.message &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the 'watcher' - on every 'API_BUTTON_CLICK' action, run our side effect</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">apiSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeEvery(API_BUTTON_CLICK, apiSideEffect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cùng một process, nhưng cách implement khác nhau hoàn toàn.</p><ul><li>put thay cho dispatch</li><li>function cuối (apiSaga()) giúp theo dõi tổng thể toàn bộ các action (ở đây có API_BUTTON_CLICK)</li><li>Với cách gọi của redux-saga, chúng ta có thể get data từ bất kì async function nào (promise, …)</li></ul></li><li><h6 id="Nhan-xet"><a href="#Nhan-xet" class="headerlink" title="Nhận xét"></a>Nhận xét</h6><p>Cả 2 cách implement đều dễ đọc, tuy nhiên đối với redux-thunk , bạn phải đối đầu với một tá các promise, các callback nếu có, rất mất thời gian cho người maintain đọc và tìm code. Với redux-saga , đơn giản bạn chỉ cần track theo try/catch block để theo dõi dòng code, bên cạnh đó còn có hàm giúp bạn track các action một cách dễ dàng.</p></li></ol><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Ở bài viết này mình đề cập đến 2 điểm nhấn chính của redux-saga là giữ cho action pure synchronos theo chuẩn redux và loại bỏ hoàn toàn callback theo javascript truyền thống. Bài viết tiếp theo mình sẽ đề cập nốt key point cuối cùng của saga là <strong>easy to test</strong>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-Saga-la-gi&quot;&gt;&lt;a href=&quot;#Redux-Saga-la-gi&quot; class=&quot;headerlink&quot; title=&quot;Redux-Saga là gì?&quot;&gt;&lt;/a&gt;Redux-Saga là gì?&lt;/h1&gt;&lt;p&gt;Redux-Saga là một thư viện redux middleware, giúp quản lý những side effect trong ứng dụng redux trở nên đơn giản hơn. Bằng việc sử dụng tối đa tính năng &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Generators&lt;/a&gt; &lt;code&gt;(function*)&lt;/code&gt; của ES6, nó cho phép ta viết async code nhìn giống như là synchronos.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nth-blogs.herokuapp.com/tags/react/"/>
    
      <category term="redux" scheme="http://nth-blogs.herokuapp.com/tags/redux/"/>
    
      <category term="saga" scheme="http://nth-blogs.herokuapp.com/tags/saga/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in React</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Thinking-in-React.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Thinking-in-React.html</id>
    <published>2018-04-30T09:47:00.000Z</published>
    <updated>2018-04-30T10:03:55.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.</p></blockquote><p>Một trong những phần quan trọng nhất của React là cách nó tạo ra cách nghĩ của bạn về các ứng dụng mà bạn xây dựng. Trong tài liệu này, chúng tôi sẽ hướng dẫn bạn cách để xây dựng một ứng dụng tìm kiếm sản phẩm trong table với React.</p><a id="more"></a><h1 id="Bat-dau"><a href="#Bat-dau" class="headerlink" title="Bắt đầu"></a>Bắt đầu</h1><p>Giả dụ bạn đã có sẵn một JSON API và giao diện đã sẵn sàng gọi đến nó. Cụ thể như ảnh sau: </p><p><img src="https://reactjs.org/static/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-4dd91.png" alt=""></p><p>Dữ liệu trả về có dạng như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Sporting Goods"</span>, <span class="attr">price</span>: <span class="string">"$49.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"Football"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Sporting Goods"</span>, <span class="attr">price</span>: <span class="string">"$9.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"Baseball"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Sporting Goods"</span>, <span class="attr">price</span>: <span class="string">"$29.99"</span>, <span class="attr">stocked</span>: <span class="literal">false</span>, <span class="attr">name</span>: <span class="string">"Basketball"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Electronics"</span>, <span class="attr">price</span>: <span class="string">"$99.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"iPod Touch"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Electronics"</span>, <span class="attr">price</span>: <span class="string">"$399.99"</span>, <span class="attr">stocked</span>: <span class="literal">false</span>, <span class="attr">name</span>: <span class="string">"iPhone 5"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Electronics"</span>, <span class="attr">price</span>: <span class="string">"$199.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"Nexus 7"</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="Buoc-1-Chia-UI-thanh-component-theo-bac"><a href="#Buoc-1-Chia-UI-thanh-component-theo-bac" class="headerlink" title="Bước 1: Chia UI thành component theo bậc"></a>Bước 1: Chia UI thành component theo bậc</h2><p>Việc đầu tiên bạn sẽ phải vẽ các hộp xung quanh mỗi component ( và subcomponent ) và đặt tên cho chúng. Nhưng bạn phân vân không biết khi nào nên tạo ra component? Đối với component, một kĩ thuật được sử dụng rộng rãi để design component là sử dụng <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">nguyên tắc đơn nhiệm</a>. Khi các component được sinh ra quá nhiều, bạn hãy tách chúng ra thành nhiều subcomponent. Đối với việc thuường xuyên hiển thị dữ liệu JSON, bạn nên đảm bảo về tính đúng đắn của model, liệu rằng nó sẽ được map chính xác với UI ( các component ) của bạn? Bởi vì UI và các model luôn phải dính liền với cấu trúc của thông tin, có nghĩa là công việc phân chia UI sang component là không đáng kể. Cứ chia ra thành các component và hiển thị chính xác từng mẩu dữ liệu của bạn là ổn.</p><p><img src="https://reactjs.org/static/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-82965.png" alt=""></p><p>Đối với dữ liệu trong ảnh, bạn sẽ nghĩ đến 5 component tương ứng với mỗi màu phải không? Sau đây là chi tiết cho từng component đó:</p><ol><li><strong>FilterableProductTable (cam)</strong>: chứa toàn bộ ví dụ</li><li><strong>SearchBar (xanh)</strong>: nhận dữ liệu từ người dùng</li><li><strong>ProductTable (xanh lá cây)</strong>: hiển thị và lọc dữ liệu dựa trên user input</li><li><strong>ProductCategoryRow (lam)</strong>: hiển thị tiêu đề cho mỗi category</li><li><strong>ProductRow (đỏ)</strong>: mỗi hàng là 1 sản phẩm</li></ol><p>Nếu bạn nhìn vào ProductTable , bạn sẽ thấy có header (bao gồm nhãn “Name” và “Price”) không phải là chính component của nó. Đây là vấn đề của việc tinh chỉnh. Ví dụ, chúng ta để phần header thuộc component ProductTable vì nó là một phần của việc render ra dữ liệu, đó là trách nhiệm của ProductTable. Tuy nhiên, nếu header này khi được sử dụng một cách phức tạp (như là tương tác với sắp xếp), nó sẽ phải tạo thêm một component riêng cho header gọi là ProductTableHeader chẳng hạn. Tóm lại, bạn nên phân chia cấu trúc của component và các subcomponent như sau:</p><ul><li>FilterableProductTable<ul><li>SearchBar</li><li>ProductTable<ul><li>ProductCategoryRow</li><li>ProductRow</li></ul></li></ul></li></ul><h2 id="Buoc-2-Xac-dinh-muc-toi-thieu-nhung-hoan-chinh"><a href="#Buoc-2-Xac-dinh-muc-toi-thieu-nhung-hoan-chinh" class="headerlink" title="Bước 2: Xác định mức tối thiểu (nhưng hoàn chỉnh)"></a>Bước 2: Xác định mức tối thiểu (nhưng hoàn chỉnh)</h2><p>Để UI của bạn tương tác tốt, bạn cần xác định các thay đổi đến dữ liệu thuộc tầng dưới (underlying data model) . Hãy sử dụng <strong>state</strong> của React.</p><p>Đầu tiên bạn nên nghĩ đến việc tối giản các mutable state. Chìa khóa thành công ở đây là <strong>DRY:</strong> <em><strong>Don’t Repeat Yourself</strong></em> . Ví dụ với ứng dụng TODO, bạn chỉ cần giữ mảng các TODO item, không cần đến các state khác như để đếm số lượng. Thay vào đó, khi bạn muốn đếm số lượng của TODO item, đơn giản là lấy ra length của TODO item array.</p><p>Cụ thể với dữ liệu mẫu trong bài viết này, chúng ta có:</p><ul><li>Nguyên mẫu danh sách sản phẩm</li><li>Text tìm kiếm mà user nhập vào</li><li>Value của checkbox</li><li>Danh sách đã lọc sản phẩm</li></ul><p>Hãy suy nghĩ về việc bạn nên để cái nào là state, trong thời gian suy nghĩ, hãy đọc các câu hỏi dưới về luồng data:</p><ol><li>Có thể pass từ parent component thông qua props không? Nếu có, state là không cần thiết.</li><li>Nó có giữ nguyên trạng thái dữ liệu suốt không? Nếu có, state không thể sử dụng được.</li><li>Bạn có đoán được data dựa vào bất kì state hay props nào trong component không? Nếu có, chỗ này càng không phải chỗ cho state.</li></ol><p>Danh sách sản phẩm nguyên bản được pass thông qua props. Text tìm kiếm và checkbox dường như sẽ thích hợp với state vì nó có thể được thay đổi bất kì lúc nào bởi người dùng. Vậy cuối cùng, danh sách lọc sản phẩm cũng không thể nào là state bởi vì chúng có thể được tính toán thông qua list sản phẩm ban đầu dựa vào search text và checkbox.</p><p>Tóm lại, bạn nên sử dụng state cho:</p><ul><li>Search text mà user nhập vào</li><li>Giá trị của checkbox khi user sử dụng</li></ul><h2 id="Buoc-4-Xac-dinh-noi-sinh-song-cua-state"><a href="#Buoc-4-Xac-dinh-noi-sinh-song-cua-state" class="headerlink" title="Bước 4: Xác định nơi sinh sống của state"></a>Bước 4: Xác định nơi sinh sống của state</h2><p>Hãy nhớ rằng, React là luồng dữ liệu một chiều, phụ thuộc theo luồng của các cấp component. Bạn không thể đoán ngay được component này sẽ có những state gì. <strong>Đây là việc chiếm nhiều thời gian và công sức nhất dành cho người mới tìm hiểu về react</strong>, hãy nhớ: đừng vội khẳng định state A thuộc component A. Để hình dung ra một cách rõ ràng, hãy theo các bước sau:</p><ul><li>Phân loại mỗi component sẽ render ra những gì dựa vào state đó.</li><li>Tìm thử trong component cha</li><li>Nếu component cha không có, tìm tiếp ở component cao hơn component cha đó</li><li>Nếu bạn không tìm ra được component đang giữ state, thử tạo một conponent mới để giữ state đó và thêm nó ở đâu đó trong cấp thư mục cao hơn thư mục chứa component cha.</li></ul><p>Ví dụ cụ thể:</p><ul><li>ProductTable cần filter sản phẩm dựa vào state và SearchBar cần phải hiển thị text được nhập và state của checkbox.</li><li>Component cha sẽ là FilterableProductTable</li><li>Tất nhiên theo lẽ tự nhiên, search text và giá trị của checkbox sẽ được lưu ở trong FilterableProductTable.</li></ul><h2 id="Buoc-5-Them-luong-du-lieu"><a href="#Buoc-5-Them-luong-du-lieu" class="headerlink" title="Bước 5: Thêm luồng dữ liệu"></a>Bước 5: Thêm luồng dữ liệu</h2><p>…</p><p>Và đây là kết quả </p><iframe src="//codepen.io/gaearon/embed/LzWZvb/?height=600" width="100%" height="600" frameborder="0" allowfullscreen></iframe><h2 id="Ket"><a href="#Ket" class="headerlink" title="Kết"></a>Kết</h2><p>Hy vọng rằng, bài viết này cho bạn ý tưởng làm thế nào để suy nghĩ về việc xây dựng các component với React. Mặc dù có thể khiến bạn gõ nhiều code hơn, hãy nhớ rằng code được đọc nhiều hơn nó được viết. Khi bạn bắt đầu xây dựng các thư viện component lớn, bạn sẽ đánh giá cao sự rõ ràng và tính mô đun, và với việc tái sử dụng code, các dòng code của bạn sẽ bắt đầu co lại.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;React is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Một trong những phần quan trọng nhất của React là cách nó tạo ra cách nghĩ của bạn về các ứng dụng mà bạn xây dựng. Trong tài liệu này, chúng tôi sẽ hướng dẫn bạn cách để xây dựng một ứng dụng tìm kiếm sản phẩm trong table với React.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nth-blogs.herokuapp.com/tags/react/"/>
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Tổng hợp các cheat sheets tốt nhất của front-end</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Tong-hop-cac-cheat-sheets-tot-nhat-cua-front-end.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Tong-hop-cac-cheat-sheets-tot-nhat-cua-front-end.html</id>
    <published>2018-04-30T08:36:00.000Z</published>
    <updated>2018-04-30T11:52:12.794Z</updated>
    
    <content type="html"><![CDATA[<p>Chúng ta không thể nhớ thuộc lòng tất cả các API. Đây là lúc chúng ta cần các trang cheat sheets này! Dưới đây là các bản cheat sheets tốt nhất mà tôi đã thu thập được.</p><a id="more"></a><h3 id="Javascript-ES2015-features"><a href="#Javascript-ES2015-features" class="headerlink" title="Javascript ES2015 features"></a><a href="https://devhints.io/es6" target="_blank" rel="noopener">Javascript ES2015 features</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*l90SMm_aR9UD8m9QDu3kKA.png" alt="https://devhints.io/es6"></p><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a><a href="http://overapi.com/javascript" target="_blank" rel="noopener">Javascript</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*sqkshvsmr7hN4Ab2A7GJzg.png" alt="http://overapi.com/javascript"></p><h3 id="Javascript-Regular-expression"><a href="#Javascript-Regular-expression" class="headerlink" title="Javascript Regular expression"></a><a href="https://www.debuggex.com/cheatsheet/regex/javascript" target="_blank" rel="noopener">Javascript Regular expression</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*jHRyyzwj9z11ouDkY9dK9Q.png" alt="https://www.debuggex.com/cheatsheet/regex/javascript"></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a><a href="https://devhints.io/react" target="_blank" rel="noopener">React</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*VhtpckI6V0tckQa3uM9MbA.png" alt="https://devhints.io/react"></p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a><a href="https://github.com/linkmesrl/react-journey-2016/blob/master/resources/egghead-redux-cheat-sheet-3-2-1.pdf" target="_blank" rel="noopener">Redux</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*KJQ-XK2yK-903OXHCRQpLw.png" alt="https://github.com/linkmesrl/react-journey-2016/blob/master/resources/egghead-redux-cheat-sheet-3-2-1.pdf"></p><h3 id="Vuejs"><a href="#Vuejs" class="headerlink" title="Vuejs"></a><a href="https://vuejs-tips.github.io/cheatsheet/" target="_blank" rel="noopener">Vuejs</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*xKmyDitGEXGg1J9FBpbqHw.png" alt="https://vuejs-tips.github.io/cheatsheet/"></p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a><a href="https://vuejs-tips.github.io/vuex-cheatsheet/" target="_blank" rel="noopener">Vuex</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*M-UIS7PPmvh_HuZVTqarzA.png" alt="https://vuejs-tips.github.io/vuex-cheatsheet/"></p><h3 id="Angular-4"><a href="#Angular-4" class="headerlink" title="Angular 4"></a><a href="https://angular.io/guide/cheatsheet" target="_blank" rel="noopener">Angular 4</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*tx7-kHpoRsiEyp9ch3yMhw.png" alt="https://angular.io/guide/cheatsheet"></p><h3 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a><a href="https://yoksel.github.io/flex-cheatsheet/" target="_blank" rel="noopener">Flexbox</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*q8xJa81twW6J-U_URHOJvQ.png" alt="https://yoksel.github.io/flex-cheatsheet/"></p><h3 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a><a href="https://devhints.io/sass" target="_blank" rel="noopener">SCSS</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*OlBKGGkX-lYD4Hv_3jzq0A.png" alt="https://devhints.io/sass"></p><h3 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a><a href="https://devhints.io/stylus" target="_blank" rel="noopener">Stylus</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*KzGNbC0CdMdUQjF_8LWy6g.png" alt="https://devhints.io/stylus"></p><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a><a href="https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png" target="_blank" rel="noopener">GraphQL</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*PBnThNh1zzpCJq_70ExyRA.png" alt="https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png"></p><p>Missing your favorite cheatsheet? Please let me know in the comments!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Chúng ta không thể nhớ thuộc lòng tất cả các API. Đây là lúc chúng ta cần các trang cheat sheets này! Dưới đây là các bản cheat sheets tốt nhất mà tôi đã thu thập được.&lt;/p&gt;
    
    </summary>
    
    
      <category term="cheat sheets" scheme="http://nth-blogs.herokuapp.com/tags/cheat-sheets/"/>
    
  </entry>
  
  <entry>
    <title>Tất cả những gì bạn cần biết về CSS-in-JS</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Tat-ca-nhung-gi-ban-can-biet-ve-CSS-in-JS.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Tat-ca-nhung-gi-ban-can-biet-ve-CSS-in-JS.html</id>
    <published>2018-04-30T08:19:00.000Z</published>
    <updated>2018-04-30T08:31:39.212Z</updated>
    
    <content type="html"><![CDATA[<p>TL;DR:<strong>Thinking in components — </strong>No longer do you have to maintain bunch of style-sheets. CSS-in-JS abstracts the CSS model to the component level, rather than the document level (modularity).</p><a id="more"></a><h4 id="Styled-React-Component-Example"><a href="#Styled-React-Component-Example" class="headerlink" title="Styled React Component Example"></a>Styled React Component Example</h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*DFwkvCRyz9K0Mbl59r2hMg.png" alt=""></p><hr><p>You probably heard terms like <a href="http://cssinjs.org/?v=v9.1.0" target="_blank" rel="noopener"><strong>CSS-in-JS</strong></a>, <a href="https://www.styled-components.com" target="_blank" rel="noopener"><strong>Styled Components</strong></a>, <a href="https://github.com/FormidableLabs/radium" target="_blank" rel="noopener"><strong><em>Radium</em></strong></a>, <a href="https://github.com/Khan/aphrodite" target="_blank" rel="noopener"><strong>Aphrodite</strong></a> and you’re left there hanging <strong>“why is this a thing? — </strong>I’m perfectly happy with <strong>CSS-in-CSS</strong> (<strong><em>CSS</em> in <em>.css</em></strong>).<strong>”</strong></p><p>I’m here to shine some light on why this is a thing and hopefully we will least understand the concept and understand why it’s a thing. With that said — please feel free to use CSS-in-CSS — on no terms are you obligated to use CSS-in-JS. <strong>Whatever works best for you and makes you happy is hands down the best solution, always-always!</strong></p><p>CSS-in-JS is a delicate and controversial topic — I’m advocating having an open mind and weighing if this makes sense to you — ask yourself <strong>“will it improve my workflow?” —**</strong>in the end — that’s the only thing that matters — use tools that make you happier and more productive!**</p><p>I’ve always felt awkward having to maintain a huge folder of stylesheets. I would like to try different approaches. I’ve seen many people asking if there are new styling ideas. CSS-in-JS is so far the best concept.</p><p>Let’s give CSS-in-JS a shot.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*bsbmmLcGl2kSJSuKW-JFqw.png" alt="Small-To-Medium size project CSS"></p><hr><h3 id="What-is-CSS-in-JS"><a href="#What-is-CSS-in-JS" class="headerlink" title="What is CSS-in-JS?"></a>What is CSS-in-JS?</h3><blockquote><p><a href="https://medium.com/@oleg008/jss-is-css-d7d41400b635" target="_blank" rel="noopener">JSS is a more powerful abstraction</a> over CSS. It uses JavaScript as a language to describe styles in a declarative and maintainable way. It is a <a href="http://cssinjs.org/performance" target="_blank" rel="noopener">high performance</a> JS to CSS compiler which works at runtime and server-side. This core library is low level and framework agnostic. It is about 6KB (minified and gzipped) and is extensible via <a href="http://cssinjs.org/plugins" target="_blank" rel="noopener">plugins</a> API. —<a href="http://cssinjs.org/" target="_blank" rel="noopener"> source</a></p></blockquote><p>Keep in mind <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style" target="_blank" rel="noopener"><strong>Inline styles</strong></a> <strong>and CSS-in-JS are not the same!</strong> They’re different — Quick demonstration time!</p><h3 id="How-Inline-Styles-Works"><a href="#How-Inline-Styles-Works" class="headerlink" title="How Inline Styles Works"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style" target="_blank" rel="noopener">How Inline Styles Works</a></h3><script src="//gist.github.com/5812bd9006c91b9eb0fe08e3678d88c8.js"></script><p>In the browser this will get attached to the DOM node like so:</p><script src="//gist.github.com/02b07c1daa4816eb2a51eb8d1b494f3e.js"></script><h3 id="How-CSS-in-JS-works"><a href="#How-CSS-in-JS-works" class="headerlink" title="How CSS-in-JS works"></a>How CSS-in-JS works</h3><script src="//gist.github.com/769908d4e065b363258d9ae733febac2.js"></script><p>In the browser this will gets attached to the DOM like so:</p><script src="//gist.github.com/e76c2883a81a11ee16f4b12906572e2a.js"></script><h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h3><p>See the slight difference? CSS-in-JS attached a <code>&lt;style&gt;</code> tag on top of the DOM while inline styles just attached the properties to the DOM node.</p><p><strong><em>Why does this matter?</em></strong></p><p><strong>Not all CSS features can be aliased with JavaScript event handlers </strong>, many pseudo selectors (like :disabled, :before, :nth-child) aren’t possible, styling the html and body tags isn’t supported etc.</p><p><strong>With CSS-in-JS</strong>, you have all the power of CSS at your fingertips. Since actual CSS is generated, you can use every media query and pseudo selector you can think of. Some libraries (like jss, styled-components) even add support for neat, non-CSS-native features like nesting!</p><p><a href="https://mxstbr.blog/2016/11/inline-styles-vs-css-in-js/" target="_blank" rel="noopener"><strong>Brilliant article going in depth on how they’re different.</strong></a></p><p>“Just write the darn CSS in CSS and be done with it.”</p><p>Yes — while that’s the case for how it’s been done for a long-long time — <strong>the challenge is modern web is written in components not pages.</strong></p><p><strong>CSS was never actually made for component based approaches</strong>. CSS-in-JS solves exactly this problem. Shout-out to <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a> for solving this problem beautifully even tho Vues styles have no access to components state.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*jk3SeXoIgOfymKO-8JO23A.gif" alt="Here’s Bob Ross painting rocks to cool down the tension 😄"></p><h3 id="What-are-the-benefits-of-using-CSS-in-JS"><a href="#What-are-the-benefits-of-using-CSS-in-JS" class="headerlink" title="What are the benefits of using CSS-in-JS?"></a>What are the benefits of using CSS-in-JS?</h3><ul><li><strong>Thinking in components — </strong>No longer do you have to maintain bunch of style-sheets. CSS-in-JS abstracts the CSS model to the component level, rather than the document level (modularity).</li><li>CSS-in-JS <strong>leverages the full power of the JavaScript ecosystem</strong> to <em>enhance</em> CSS.</li><li>“<strong>True rules isolation</strong>” — Scoped selectors are not enough. CSS has properties which are inherited automatically from the parent element, if not explicitly defined. Thanks to <a href="http://cssinjs.org/jss-isolate" target="_blank" rel="noopener">jss-isolate</a> plugin, JSS rules will not inherit properties.</li><li><strong>Scoped selectors </strong>— CSS has just one global namespace. It is impossible to avoid selector collisions in non-trivial applications. Naming conventions like BEM might help within one project, but will not when integrating third-party code. JSS generates unique class names by default when it compiles JSON representation to CSS.</li><li><strong>Vendor Prefixing</strong> —The CSS rules are automatically vendor prefixed, so you don’t have to think about it.</li><li><strong>Code sharing </strong>— Easily share constants and functions between JS and CSS.</li><li><strong>Only the styles which are currently</strong> in use on your screen are also in the DOM (<a href="https://github.com/cssinjs/react-jss" target="_blank" rel="noopener">react-jss</a>).</li><li><a href="https://en.wikipedia.org/wiki/Dead_code_elimination" target="_blank" rel="noopener"><strong>Dead code elimination</strong></a></li><li><strong>Unit tests</strong> for CSS!</li></ul><h3 id="What-are-the-drawbacks-of-using-CSS-in-JS"><a href="#What-are-the-drawbacks-of-using-CSS-in-JS" class="headerlink" title="What are the drawbacks of using CSS-in-JS?"></a>What are the drawbacks of using CSS-in-JS?</h3><ul><li><strong>Learning curve</strong>.</li><li><strong>New dependencies.</strong></li><li><strong>Harder for newer teammates to adapt to the code-base</strong>. People who are new to front-end have to learn “more” things.</li><li><strong>Challenging</strong> the status quo. (not necessarily a con)</li></ul><p>The pros out-weight the cons heavily — let’s give CSS-in-JS a shot! <strong>Nothing to lose!</strong></p><hr><h3 id="Most-popular-CSS-in-JS-libaries"><a href="#Most-popular-CSS-in-JS-libaries" class="headerlink" title="Most popular CSS-in-JS libaries"></a>Most popular CSS-in-JS libaries</h3><p><em>Will provide a quick hello world example for all the popular CSS-in-JS libraries— help yourself to choose which one you like the most based on the syntax.</em></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*xXIXJeI3l6_k-rXg6cqNjw.png" alt="NPM trends"></p><h4 id="Styled-Components"><a href="#Styled-Components" class="headerlink" title="Styled Components"></a><a href="https://www.styled-components.com/" target="_blank" rel="noopener">Styled Components</a></h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*QvSrt0RgwuOKYlLHLjkDQw.png" alt=""></p><script src="//gist.github.com/5888c4756651dfef1e1015b822d09b27.js"></script><h3 id="JSS-React"><a href="#JSS-React" class="headerlink" title="JSS-React"></a><a href="https://github.com/cssinjs/react-jss" target="_blank" rel="noopener">JSS-React</a></h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*z7kPKLW6meQuC5sznIYnkQ.png" alt=""></p><script src="//gist.github.com/c90a6455e9dd7dce7b579b06d2e61413.js"></script><h3 id="glamorous"><a href="#glamorous" class="headerlink" title="glamorous"></a><a href="https://glamorous.rocks/" target="_blank" rel="noopener">glamorous</a></h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*tWuxJKAhaod4WNsm3MkMgQ.png" alt=""></p><script src="//gist.github.com/47c1dc52980ed0197db2ceb5ebbb9ac0.js"></script><h4 id="Radium-caveat-uses-inline-styles"><a href="#Radium-caveat-uses-inline-styles" class="headerlink" title="Radium (caveat: uses inline styles)"></a><a href="http://formidable.com/open-source/radium/" target="_blank" rel="noopener">Radium</a> (caveat: uses inline styles)</h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*UsS6OxCfH6r7JLWx-wNeIQ.png" alt=""></p><script src="//gist.github.com/14b38638841f6c0539127ad52358d099.js"></script><p>Note: Radium uses <a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841" target="_blank" rel="noopener">decorators</a>!</p><h4 id="Aphrodite"><a href="#Aphrodite" class="headerlink" title="Aphrodite"></a><a href="https://github.com/Khan/aphrodite" target="_blank" rel="noopener">Aphrodite</a></h4><script src="//gist.github.com/f7d862549b680f766e68751e0f3f77d1.js"></script><h4 id="Stylotron"><a href="#Stylotron" class="headerlink" title="Stylotron"></a><a href="https://github.com/rtsao/styletron" target="_blank" rel="noopener">Stylotron</a></h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*a0c0iulx7pZFScn0fsAn0w.png" alt=""></p><script src="//gist.github.com/9919c99b28ca4a063a3245efc1e4dddd.js"></script><p>These are really simple examples which demonstrate the core functionality. All of the libraries have much more functionality included — for example, <strong>theming</strong>, <strong>dynamic props</strong>, <strong>server side rendering</strong> and much more!</p><p><a href="https://medium.com/object-partners/css-in-js-benefits-drawback-and-tooling-80286b03f9aa" target="_blank" rel="noopener">Excellent post</a> going in depth about all of the features CSS-in-JS enables.</p><p><a href="https://github.com/tuchk4/awesome-css-in-js" target="_blank" rel="noopener"><strong>Here’s the full list — go and give all the libraries a quick try!</strong></a></p><p>Hate it or love it — <strong>CSS-in-JS deserves a chance!</strong></p><h4 id="Convinced-CSS-in-JS-is-not-for-me-There’s-another-option-—-CSS-Modules"><a href="#Convinced-CSS-in-JS-is-not-for-me-There’s-another-option-—-CSS-Modules" class="headerlink" title="Convinced CSS-in-JS is not for me? There’s another option — CSS Modules!"></a><a href="https://glenmaddern.com/articles/css-modules" target="_blank" rel="noopener">Convinced CSS-in-JS is not for me? There’s another option — CSS Modules!</a></h4><p>Thanks for reading!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TL;DR:&lt;strong&gt;Thinking in components — &lt;/strong&gt;No longer do you have to maintain bunch of style-sheets. CSS-in-JS abstracts the CSS model to the component level, rather than the document level (modularity).&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
      <category term="css" scheme="http://nth-blogs.herokuapp.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hiểu sâu về React Higher Order Components</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Hieu-sau-ve-React-Higher-Order-Components.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Hieu-sau-ve-React-Higher-Order-Components.html</id>
    <published>2018-04-30T08:08:00.000Z</published>
    <updated>2018-04-30T08:31:59.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h1><p>Chắc hẳn rất nhiều người trong chúng ta đã và đang sử dụng React, và tất nhiên là kèm theo hằng tá thư viện đi kèm hỗ trợ nó (lol) Và chắc hẳn bạn đã từng gặp thư viện yêu cầu bạn viết một đoạn code kiểu này để thư viện có thể hoạt động:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Component); </span><br><span class="line"><span class="comment">// Kết nối Component với Store của Redux bằng thư viện react-redux</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>Hoặc là thế này</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Radium = <span class="built_in">require</span>(<span class="string">'radium'</span>);</span><br><span class="line">@Radium</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Radium thư viện hỗ trợ inline style cho React element</span></span><br></pre></td></tr></table></figure><p>Và boom Component của chúng ta nhận được props, styles và thậm chí là render ra một view khác </p><p><img src="https://viblo.asia/uploads/8dd3d81c-5fc7-431b-867c-e96a511abb83.gif" alt=""> </p><p>Các bạn đã bao giờ tự hỏi <code>connect()</code> <code>@Radium</code> kia là gì, tại sao lại viết như vậy. Vâng trong bài viết này chúng ta sẽ cùng tìm hiểu về một khái niệm nâng cao trong React - <strong>Higher-Order Components.</strong> </p><p><img src="https://viblo.asia/uploads/d0174b65-4df5-4a89-8b4d-01a14fc0c757.gif" alt=""></p><h1 id="Higher-Order-Components-In-a-Nutshell"><a href="#Higher-Order-Components-In-a-Nutshell" class="headerlink" title="Higher-Order Components In a Nutshell"></a>Higher-Order Components In a Nutshell</h1><h2 id="What-are-Higher-Order-Components-HoCs"><a href="#What-are-Higher-Order-Components-HoCs" class="headerlink" title="What are Higher-Order Components (HoCs)?"></a>What are Higher-Order Components (HoCs)?</h2><p>Về bản chất, HoC không phải là một phần của React API, nó là một pattern xuất hiện từ những thành phần đặc tính của React. Thường được implement như một function, mà về cơ bản, là một class factory (vâng, là một class factory!)</p><blockquote><p>Higher Order Component (HoC) là một function nhận vào một component và trả về một component mới. EnhancedComponent = higherOrderComponent(WrappedComponent);</p></blockquote><h2 id="What-can-I-do-with-HOCs"><a href="#What-can-I-do-with-HOCs" class="headerlink" title="What can I do with HOCs?"></a>What can I do with HOCs?</h2><p>Ở cấp độ cao, HoC cho phép chúng ta:</p><ul><li>Code reuse, logic và tự động trừu tượng hóa (bootstrap abstraction)</li><li>Chiếm quyền render (Render Highjacking)</li><li>Trừu tượng hóa (abstraction) và điều khiển (manipulation) State</li><li>Điều khiển Props</li></ul><p>Chúng ta sẽ xem chi tiết về những mục này, nhưng trước tiên, chúng ta sẽ học cách implement HoCs bởi vì việc implement cho chúng ta thấy những điều có thể và hạn chế mà chúng ta thực sự có thể làm với HoC.</p><h1 id="HOC-factory-implementations"><a href="#HOC-factory-implementations" class="headerlink" title="HOC factory implementations"></a>HOC factory implementations</h1><p>Có 2 cách implement HoCs thường thấy trong React: <strong>Props Proxy (PP)</strong> và <strong>Inheritance Inversion (II)</strong>. Cả 2 cách cho phép các cách khác nhau để thao tác với WrappedComponent.</p><p>Trước khi bắt đầu chúng ta cần một project</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create-react-app learnHOC</span><br><span class="line">cd learnHOC/src/</span><br><span class="line">touch HOC.js</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="Props-Proxy"><a href="#Props-Proxy" class="headerlink" title="Props Proxy"></a>Props Proxy</h2><p>Props Proxy (PP) được implement thông thường theo cách sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">PP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Phần quan trọng nhất ở đây là method render của HoC trả về một React Element của kiểu WrappedComponent. Chúng ta cũng truyền props mà HoC nhận được, vì thế phương pháp này mới có tên Props Proxy.</p><h3 id="What-can-be-done-with-Props-Proxy"><a href="#What-can-be-done-with-Props-Proxy" class="headerlink" title="What can be done with Props Proxy?"></a>What can be done with Props Proxy?</h3><ul><li>Điều khiển props</li><li>Truy cập instance thông qua Refs</li><li>Trừu tượng hóa (Abstracting) State</li><li>Bao WrappedComponent với elements khác</li></ul><h4 id="Dieu-khien-props"><a href="#Dieu-khien-props" class="headerlink" title="Điều khiển props"></a>Điều khiển props</h4><p>Chúng ta có thể đọc, thêm, sửa đổi và xóa props được truyền cho WrappedComponent.</p><p>Nhưng cẩn thận với việc xóa hay sửa đổi các prop quan trọng, chúng ta nên đặt namespace cho HoC props để nó không phá vỡ WrappedComponent.</p><p>Ví dụ: Thêm mới props.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">PP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        newProps: <span class="string">'something news'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">module.exports = &#123;</span></span><br><span class="line"><span class="xml">    pP</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Sửa lại file App một chút</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;pP&#125; <span class="keyword">from</span> <span class="string">'./HoC'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">'App'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pP(App);</span><br></pre></td></tr></table></figure><p>Và ở console chúng ta có kết quả <img src="https://viblo.asia/uploads/48e1c152-e99c-48a3-9074-b6be4df55b6a.png" alt=""></p><h4 id="Truy-cap-instance-thong-qua-Refs"><a href="#Truy-cap-instance-thong-qua-Refs" class="headerlink" title="Truy cập instance thông qua Refs"></a>Truy cập instance thông qua Refs</h4><p>Chúng ta có thể truy cập this (instance của WrappedComponent) với ref, nhưng chúng ta sẽ cần một quá trình render đầy đủ của WrappedComponent để ref có thể được tính toán. Điều này có nghĩa là chúng ta cần trả về WrappedComponent element từ method render của HoC, để React có thể làm quá trình đối chiếu (reconciliation process) và chúng ta sẽ có ref đến WrappedComponent instance.</p><p>Ví dụ: Chúng ta sẽ tìm hiểu làm thế nào để truy cập instance methods và instance của chính WrappedComponent thông qua refs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refsPP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">RefsPP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    proc(wrappedComponentInstance) &#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'refs Proc'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(wrappedComponentInstance);</span><br><span class="line">      wrappedComponentInstance.test();</span><br><span class="line">      <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.props, &#123;<span class="attr">ref</span>: <span class="keyword">this</span>.proc.bind(<span class="keyword">this</span>)&#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">module.exports = &#123;</span></span><br><span class="line"><span class="xml">    pP,</span></span><br><span class="line"><span class="xml">    refsPP</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Sửa file App một chút</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;pP, refsPP&#125; <span class="keyword">from</span> <span class="string">'./HoC'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  test() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call Test'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  .....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> refsPP(App);</span><br></pre></td></tr></table></figure><p>Và ở console chúng ta có kết quả <img src="https://viblo.asia/uploads/ff5e3971-58bf-406c-ae1b-ff012e790bee.png" alt=""> Khi WrappedComponent được render xong thì ref callback sẽ được thực thi, và chúng ta sẽ có ref đến WrappedComponent instance. Điều này có thể được sử dụng để đọc/thêm các props và gọi các instance method.</p><h4 id="Truu-tuong-hoa-Abstracting-State"><a href="#Truu-tuong-hoa-Abstracting-State" class="headerlink" title="Trừu tượng hóa (Abstracting) State"></a>Trừu tượng hóa (Abstracting) State</h4><p>Chúng ta có thể trừu tượng hóa state bằng cách cung cấp props và callbacks cho WrappedComponent, tương tự như <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="noopener">Container Components làm với Presentational components</a>. Ví dụ: Chúng ta sẽ thực hiện trừu tượng hóa state để kiểm soát input</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">statePP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">StatePP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props)</span><br><span class="line">      <span class="keyword">this</span>.state = &#123; <span class="attr">fields</span>: &#123;&#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getField(fieldName) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.state.fields[fieldName]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.fields[fieldName] = &#123;</span><br><span class="line">          value: <span class="string">''</span>,</span><br><span class="line">          onChange: <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.state.fields[fieldName].value = event.target.value</span><br><span class="line">            <span class="keyword">this</span>.forceUpdate()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.state.fields[fieldName].value,</span><br><span class="line">        onChange: <span class="keyword">this</span>.state.fields[fieldName].onChange</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.props, &#123;</span><br><span class="line">        fields: <span class="keyword">this</span>.getField.bind(<span class="keyword">this</span>),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Sửa file App một chút</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;pP, refsPP, statePP&#125; <span class="keyword">from</span> <span class="string">'./HoC'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  test() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call Test'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">'App'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name'</span>, <span class="keyword">this</span>.props.fields(<span class="string">'name'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'email'</span>, <span class="keyword">this</span>.props.fields(<span class="string">'email'</span>));</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        ....</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;label&gt;Automatically controlled input!<span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">          &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Name"</span> &#123;...this.props.fields(<span class="string">'name'</span>)&#125;/&gt;</span><br><span class="line">          &lt;input type=<span class="string">"email"</span> placeholder=<span class="string">"Email"</span> &#123;...this.props.fields(<span class="string">'email'</span>)&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Và chúng ta có kết quả <img src="https://viblo.asia/uploads/ea2e3283-f7ba-4b7e-a282-cc3a504b3324.png" alt=""></p><p>Việc trừu tượng hóa state có nhiều ứng dụng, và được sử dụng khá nhiều trong việc giải quyết các vấn đề mà Stateless component gặp phải như không có ref chẳng hạn.</p><h4 id="Bao-WrappedComponent-voi-elements-khac"><a href="#Bao-WrappedComponent-voi-elements-khac" class="headerlink" title="Bao WrappedComponent với elements khác"></a>Bao WrappedComponent với elements khác</h4><p>Chúng ta có thể bao WrappedComponent với component hoặc element khác để styling, layout hoặc mục đích khác. Cách sử dụng cơ bản có thể hoàn thành bởi Parent Components nhưng chúng ta có nhiều sự linh hoạt hơn với HoCs như đã mô tả ở trên.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elmWrapPP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ElmWrapPP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div style=&#123;&#123;<span class="attr">display</span>: <span class="string">'block'</span>&#125;&#125;&gt;</span><br><span class="line">          &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Inheritance-Inversion"><a href="#Inheritance-Inversion" class="headerlink" title="Inheritance Inversion"></a>Inheritance Inversion</h2><p>Inheritance Inversion (II) thường được implement như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Như các bạn thấy, HOC trả về class (Enhancer) kế thừa (extends) WrappedComponent. Phương pháp này gọi là Inheritance Inversion là do thay vì WrappedComponent mở rộng (kế thừa) Enhancer class nào đó, nó lại được mở rộng (kế thừa) bởi Enhancer. Theo cách này, mối quan hệ giữa chúng dường như bị đảo ngược.</p><p>II cho phép HoC truy cập vào WrappedComponent instance thông qua this, điều này có nghĩa là <strong>HoC có quyền truy cập state, props, component lifecycle hooks và cả phương thức render.</strong></p><p>Chúng ta sẽ không đi sau vào chi tiết chúng ta có thể làm gì với component lifecycle hooks, đó không phải là những gì cụ thể HoC làm, nó là React. Nhưng lưu ý rằng chúng ta hoàn toàn có thể tạo ra lifecycle hooks mới cho WrappedComponent. Và nhớ răng luôn gọi <em>super.[lifecycleHook]</em> để không phá vỡ WrappedComponent.</p><h4 id="Qua-trinh-doi-chieu-Reconciliation-process"><a href="#Qua-trinh-doi-chieu-Reconciliation-process" class="headerlink" title="Quá trình đối chiếu (Reconciliation process)"></a>Quá trình đối chiếu (Reconciliation process)</h4><p>Trước khi bắt đầu chúng ta cần tóm tát vài lý thuyết.</p><p>React Elements mô tả những gì sẽ hiển thị khi React chạy quá trình đối chiếu của nó.</p><p>React Elements có thể có 2 loại: String và Function. String Type React Element (STRE) đại diện các DOM node và Function Type React Element (FTRE) đại diện các Component được tạo ra bằng cách mở rộng React.Component. Đọc thêm tại <a href="https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">post</a>.</p><p>FTRE sẽ được phân giải ra thành cây STRE trong quá trình đối chiếu của React (kết quả cuối cùng luôn là các DOM Element).</p><p>Điều này rất quan trọng và nó có nghĩa là:</p><blockquote><p>Inheritance Inversion High Order Components không đảm bảo là đã giải quyết được toàn bộ cây con. Điều này sẽ được chứng thực khi học Render Highjacking.</p></blockquote><h3 id="What-can-you-do-with-Inheritance-Inversion"><a href="#What-can-you-do-with-Inheritance-Inversion" class="headerlink" title="What can you do with Inheritance Inversion?"></a>What can you do with Inheritance Inversion?</h3><ul><li>Chiếm quyền render (Render Highjacking)</li><li>Điều khiển state (Manipulating state)</li></ul><h4 id="Render-Highjacking"><a href="#Render-Highjacking" class="headerlink" title="Render Highjacking"></a>Render Highjacking</h4><p>Phương pháp này gọi là Render Highjacking bởi vì HoC kiểm soát render output của WrappedComponent và chúng ta có thể làm bất kì điều gì với nó.</p><p>Trong Render Highjacking chúng ta có thể</p><ul><li>Đọc, thêm, sửa, xóa props trong bất kì React Elements nào xuất ra bởi render.</li><li>Đọc và sửa đổi React elements tree xuất ra bởi render.</li><li>Hiển thị elements tree theo điều kiện.</li><li>Bao element tree cho mục đích styling (giống như đã nói ở PP)\</li></ul><p><em>Note: render đề cấp đến WrappedComponent.render</em></p><blockquote><p>Chúng ta không thể chỉnh sửa hoặc tạo props của WrappedComponent instace, bởi vì một React Component không thể chỉnh sửa props mà nó nhận được, nhưng chúng ta có thể thay đổi các props của các element xuất ra từ phương thức render.</p></blockquote><p>Như chúng ta đã nói ở trên, II HoCs không đảm bảo toàn bộ cây con được giải quyết, điều này hàm ý một số giới hạn với kỹ thuật Render Highjacking. Quy tắc chung là với Render Highjacking chúng ta có thể thao tác với element tree mà WrappedComponent.render xuất ra không nhiều hơn cũng không ít hơn. Nếu Element tree đó có chưa một <em><a href="https://facebook.github.io/react/docs/components-and-props.html#functional-and-class-components" target="_blank" rel="noopener">Function Type React Component</a></em> thì chúng ta sẽ không thể thao tác được với các con của Component đó. (Do chúng được hoãn lại bởi quá trình đối chiếu của React cho đến khi nó thực sự được render)</p><ul><li>Ví dụ 1: <strong>Render có điều kiện</strong> HOC sẽ render chính xác những gì mà WrappedComponent sẽ render trừ khi this.props.loggedIn = false. (Giả định là HoC sẽ nhận được loggedIn prop).</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rHII</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.loggedIn) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Not loggedIn<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Và tất nhiên App của chúng ta không có props loggedIn (Lười quá (lol) ) nên kết quả sẽ là <img src="https://viblo.asia/uploads/2ab60c9f-0e2b-4a5f-8f02-6bd187c6a718.png" alt=""></p><ul><li>Ví dụ 2: <strong>Sửa đổi React Element tree</strong> xuất ra bởi render.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">treeII</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render()</span><br><span class="line">      <span class="keyword">let</span> newProps = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> newChilds = elementsTree.props.children.map(<span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child.type === <span class="string">'input'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> childNewProps = &#123;<span class="attr">value</span>: <span class="string">'may the force be with you'</span>&#125;;</span><br><span class="line">            <span class="keyword">var</span> childProps = <span class="built_in">Object</span>.assign(&#123;&#125;, child.props, childNewProps)</span><br><span class="line">            <span class="keyword">return</span> React.cloneElement(child, childProps, child.props.children);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, elementsTree.props, newProps)</span><br><span class="line">      <span class="keyword">const</span> newElementsTree = React.cloneElement(elementsTree, props, newChilds)</span><br><span class="line">      <span class="keyword">return</span> newElementsTree</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-comment"</span>&gt;<span class="comment">// App.js&lt;/span&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-class"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hljs-keyword"</span>&gt;</span>class<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-title"</span>&gt;App&lt;<span class="regexp">/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/</span>span&gt; <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hljs-title"</span>&gt;</span>Component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-keyword"</span>&gt;<span class="keyword">return</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">          &lt;h2&gt;Welcome to React&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;p className=<span class="string">"App-intro"</span> ref=<span class="string">"appIntro"</span>&gt;</span><br><span class="line">          To get started, edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">        &lt;/</span>p&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Name"</span>/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> export default treeII(App);</span></span><br></pre></td></tr></table></figure><p>Trong ví dụ trên, nếu output render bởi WrappedComponent có chứa element con có type là `input’ thì HoC sẽ thay đổi value của nó thành ‘may the force be with you’.</p><p>Chúng ta có thể làm mọi thứ ở đây, chúng ta có thể duyệt qua toàn bộ các phần tử của element tree và thay đổi bất kì props của bất kì element nào trong tree. Và đây chính xác là những gì <a href="https://github.com/FormidableLabs/radium" target="_blank" rel="noopener">Radium</a> thực hiện.</p><blockquote><p>Note: Chúng ta không thể Render Highjack với Props Proxy. Mặc dù vẫn có thể truy cập vào phương thức render thông qua WrappedComponent.prototype.render, chúng ta sẽ cần phải mô phỏng WrappedComponent instance và các props của nó, và có khả năng là phải tự xử lý component lifecycle thay vì để React làm nó. Trong thực nghiệm của tôi, nó không có giá trị nhiều lắm và nếu chúng ta muốn Render Highjacking chúng ta nên sử dụng II thay vì PP. Hãy nhớ rằng React xử lý các component instances nội bộ và cách duy nhất để chúng ta thao tác với instances là thông qua refs.</p></blockquote><h4 id="Manipulating-state"><a href="#Manipulating-state" class="headerlink" title="Manipulating state"></a>Manipulating state</h4><p>HOC có thể đọc, chỉnh sửa và xóa state của WrappedComponent instance, và chúng ta cũng có thể thêm state nếu cần. Hãy nhớ rằng chúng ta đang làm rối state của WrappedComponent, điều có thể dẫn chúng ta đến việc hủy hoại mọi thứ. Hầu hết các HOC nên được giới hạn để đọc hoặc thêm state, và sau đó được đặt tên (namespace) để không làm rối state của WrappedComponent.</p><p>Ví dụ: Debugging bằng cách truy cập props và state của WrappedComponent</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IIHOCDEBUGGER</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">II</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h2&gt;HOC Debugger Component&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;Props&lt;/</span>p&gt; <span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(this.props, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line">          &lt;p&gt;State&lt;<span class="regexp">/p&gt;&lt;pre&gt;&#123;JSON.stringify(this.state, null, 2)&#125;&lt;/</span>pre&gt;</span><br><span class="line">          &#123;<span class="keyword">super</span>.render()&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>HOC này sẽ bao WrappedComponent với element khác đồng thời hiện các props và state của WrappedComponent.</p><h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><p>Khi bao một component với HOC chúng ta đánh mất tên của WrappedComponent, điều này sẽ ảnh hưởng đến chúng ta trong quá trình dev và debugging.</p><p>Mọi người thường làm là tùy chỉnh tên của HOC bằng cách lấy tên của WrappedComponent và đặt trước một cái gì đó. Dưới đây trích từ React-Redux:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HOC.displayName = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> ... </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> displayName = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Function getDisplayName được định nghĩa như sau</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDisplayName</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> WrappedComponent.displayName || </span><br><span class="line">         WrappedComponent.name || </span><br><span class="line">         ‘Component’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chúng ta thực sự không phải viết lại nó vì thư viện <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">recompose</a> đã cung cấp function này rồi.</p><h2 id="Phu-luc"><a href="#Phu-luc" class="headerlink" title="Phụ lục"></a>Phụ lục</h2><h3 id="HOC-and-parameters"><a href="#HOC-and-parameters" class="headerlink" title="HOC and parameters"></a>HOC and parameters</h3><p>Đôi khi rất hữu ích khi sử dụng các parameters cho HOCs. Điều này ẩn trong những ví dụ bên trên và nên được phát triển tự nhiên đến Javascript developers trung gian, nhưng vì lợi ích làm cho bài viết đầy đủ, chúng ta sẽ lướt qua nó một cách nhanh chóng.</p><p>Ví dụ: HOC parameters với Props Proxy thông thường. Điều quan trọng là HOCFactoryFactory function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HOCFactoryFactory</span>(<span class="params">...params</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// do something with params</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">HOCFactory</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Và chúng ta có thể sử dụng như thế này</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HOCFactoryFactory(params)(WrappedComponent)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">@HOCFatoryFactory(params)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappedComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Difference-with-Parent-Components"><a href="#Difference-with-Parent-Components" class="headerlink" title="Difference with Parent Components"></a>Difference with Parent Components</h3><p>Như đã nói ở phần ‘Bao WrappedComponent với elements khác’, ở một số cách cơ bản cảu HOC ta có thể hoàn thành với Parent Component. Vậy điểm khác biệt giữ HOC và Parent Component là gì?</p><blockquote><p>Parent Components là React Components có vài components con. React có APIs để truy cập và thao tác với component con.</p></blockquote><p>Ví dụ:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render((&lt;Parent&gt;&#123;children&#125;&lt;/</span>Parent&gt; ),  mountNode);</span><br></pre></td></tr></table></figure><p>Giờ chúng ta sẽ duyệt qua xem Parent Components có và không thể làm gì khi so sánh với HOCs và thêm vài thông tin quan trọng:</p><ul><li>Có thể Render Highjacking tương tự như với II HOC</li><li>Có thể điều khiển inner props tương tự như với II HOC</li><li>Có thể trừu tượng hóa state, nhưng có nhược điểm. Chúng ta sẽ không thể truy cập state của Parent Component từ bên ngoài trừ khi chúng ta tạo hooks cho nó. Điều này hạn chế tính hữu ích của nó.</li><li>Bao các elements với elements khác. Đây có thể là trường hợp duy nhất Parent component làm tốt hơn HOC. Nhưng tất nhiên là HOC cũng làm đc.</li><li>Thao tác với child component gặp một số vấn đề. Ví dụ nếu childrent không chỉ có 1 root element (nhiều hơn 1 first level childrent), thì chúng ta phải thêm 1 element để bao tất cả children lại, mà điều này có thể gây rườm ra cho markup của chúng ta. Trong HOCs 1 top level children root được đảm bảo bởi React/JSX.</li><li>Parent Components có thể được sử dụng tự do trong Elements tree, chúng không bị hạn chế 1 Component 1 lần như HOC.</li></ul><p>Nói chung, nếu chúng ta có thể làm được nó với Parent Components thì chúng ta nên làm nó, bởi vì Parent Components ít “hack não” hơn HOCs, nhưng như những điều đã nói, với State nó kém linh hoạt hơn so với HoCs.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Hi vọng là sau khi đọc bài này, mọi người sẽ hiểu hơn một chút về React HOCs. Chúng thực sự có ý nghĩa và đã được chứng minh khá tốt trong nhiều thư viện khác nhau. React mang lại rất nhiều sự đổi mới và những thư viện như Radium, React-Redux, React-Router trong số rất nhiều thư viện khác là những bằng chứng về điều đó.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gioi-thieu&quot;&gt;&lt;a href=&quot;#Gioi-thieu&quot; class=&quot;headerlink&quot; title=&quot;Giới thiệu&quot;&gt;&lt;/a&gt;Giới thiệu&lt;/h1&gt;&lt;p&gt;Chắc hẳn rất nhiều người trong chúng ta đã và đang sử dụng React, và tất nhiên là kèm theo hằng tá thư viện đi kèm hỗ trợ nó (lol) Và chắc hẳn bạn đã từng gặp thư viện yêu cầu bạn viết một đoạn code kiểu này để thư viện có thể hoạt động:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; connect &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; connect(mapStateToProps, mapDispatchToProps)(Component); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Kết nối Component với Store của Redux bằng thư viện react-redux&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nth-blogs.herokuapp.com/tags/react/"/>
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
      <category term="hoc" scheme="http://nth-blogs.herokuapp.com/tags/hoc/"/>
    
  </entry>
  
  <entry>
    <title>Cách phân nhánh và chia việc trong nhóm với Git</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Cach-phan-nhanh-va-chia-viec-trong-nhom-voi-Git.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Cach-phan-nhanh-va-chia-viec-trong-nhom-voi-Git.html</id>
    <published>2018-04-26T14:50:00.000Z</published>
    <updated>2018-04-30T08:06:42.792Z</updated>
    
    <content type="html"><![CDATA[<p>Bạn vốn làm việc một mình một cõi, “thầu nguyên con” dự án. Dù phải code sấp mặt nhưng cuộc đời vẫn thật êm xuôi: tốc độ thần thánh 500 dòng/giờ, commit code mới pặc pặc vào master, cuối ngày chỉ việc git push, tắt máy, rồi dắt gấu đi nhậu (hoặc lội suối băng đèo về nhà thay tã cho con).</p><p>Ngờ đâu sếp (hoặc co-founder) xót thương bạn vất vả, bèn tuyển ngay 2 em đào nhí vào trợ giúp. Và mọi chuyện bắt đầu phức tạp từ đây: code trong team bị chồng chéo và xung đột liên tục, branch master đang thẳng thớm đẹp xinh bỗng phân nhánh như điên, tốc độ code của bạn giảm trong khi tốc độ chửi thề ngày một tăng nhanh. Bạn không còn thời giờ dắt gấu đi nhậu, cũng không thể lội kịp về nhà thay tã cho con nữa. Cuộc đời bế tắc.</p><a id="more"></a><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524414315/git-merge-hell-smaller_lxhizg.png" alt="Nhìn hình này bạn có thấy quen không (nguồn: Xebia.com)?"></p><p>Thôi đừng vội lật bàn quýnh cả sếp lẫn đào. Hãy thử làm theo một số quy ước sau đây, đảm bảo team dev nho nhỏ xinh xinh của bạn sẽ không còn “giẫm chân” nhau nữa. Công việc xuôi buồm mát mái, tình đồng nghiệp sẽ lại thương mến thương nè.</p><h3 id="Vay-van-de-chinh-o-day-la-gi"><a href="#Vay-van-de-chinh-o-day-la-gi" class="headerlink" title="Vậy, vấn đề chính ở đây là gì?"></a>Vậy, vấn đề chính ở đây là gì?</h3><p>Không có gì nghiêm trọng cả, chỉ là chúng ta chưa có một quy ước phân chia nhánh (branch) hợp lý thôi. So với các chương trình quản lý phiên bản khác như SVN, khả năng phân nhánh của Git phải nói là siêu nhẹ và cực kì dễ dàng. Do đó, bạn có thể chia dự án thành 2 nhánh chính:</p><ul><li>master</li><li>dev</li></ul><p>Nhánh master sẽ là nơi chứa phần code <strong>ổn định nhất</strong>, sẵn sàng để triển khai bất cứ lúc nào. Trong khi đó, nhánh dev ban đầu được tách ra từ master, và sẽ chứa phần code <strong>mới nhất</strong> được phát triển.</p><blockquote><p><strong>Nói nhỏ:</strong> Một số tài liệu sẽ đặt tên nhánh tách ra là develop. Tùy bạn chọn tên gì cũng được, nhưng theo Ehkoo thì gõ dev nhanh hơn gõ develop :p</p></blockquote><p><strong>Nhắc bài chút xíu</strong><br>Để tạo nhánh mới trong Git, bạn dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;tên nhánh mới&gt; [nhánh gốc]</span><br></pre></td></tr></table></figure><p>Chẳng hạn, để tạo nhánh dev từ master, bạn gõ git checkout -b dev master. Nếu không cung cấp tham số [nhánh gốc], nhánh mới tạo sẽ dựa trên nhánh hiện tại bạn đang ở. Để xem nhánh hiện tại là nhánh nào, bạn có thể dùng lệnh git branch.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  auth</span><br><span class="line">* auth-session</span><br><span class="line">  dev</span><br><span class="line">  graphql</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>Trong ví dụ trên thì nhánh hiện tại chính là auth-session.</p><h3 id="Phan-chia-cong-viec"><a href="#Phan-chia-cong-viec" class="headerlink" title="Phân chia công việc"></a>Phân chia công việc</h3><p>Mỗi khi phát triển tính năng mới, bạn sẽ tạo một nhánh từ dev.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b login dev</span><br></pre></td></tr></table></figure><blockquote><p><strong>Đặt tên nhánh là gì đây?</strong><br>Tùy bạn thôi. Một số tài liệu sẽ khuyến khích bạn dùng tiền tố feature/&lt;tên tính năng&gt; để dễ phân biệt. Nhưng theo kinh nghiệm của Ehkoo, ngoài nhánh master, dev, và các nhánh fix-xxx, thì tất cả các nhánh còn lại đều có thể ngầm hiểu là nhánh chức năng.</p></blockquote><p>Nhánh này dưới quyền cai quản của bạn, nên mặc sức muốn làm gì thì làm nhé. Hãy commit thường xuyên, dù chỉ là những thay đổi nhỏ nhất. Cũng đừng ngần ngại rằng commit nhỏ sẽ khiến git log khó theo dõi. Chúng ta sẽ có cách xử lý chúng sau.</p><blockquote><p><strong>Câu hỏi: Ê, lỡ như có hai hay nhiều người cùng làm chung một tính năng thì sao?</strong><br>Nếu vậy, bạn có thể tiếp tục chia nhỏ hơn nữa, để đảm bảo mỗi người làm việc trên một nhánh độc lập. Cũng theo kinh nghiệm riêng của Ehkoo, thì một tính năng _to_ sẽ có nhiều nhất là 2-3 người cùng phát triển. Nếu vượt quá con số này, thì nên xem lại định nghĩa và cách phân chia việc cho tính năng đó.</p></blockquote><h3 id="Chuan-bi-merge-vao-dev"><a href="#Chuan-bi-merge-vao-dev" class="headerlink" title="Chuẩn bị merge vào dev"></a>Chuẩn bị merge vào dev</h3><p>Sau khi code hoàn tất và tất cả unit tests đã chạy thành công, giờ là lúc bạn merge/gửi code để review tính năng mới vào dev. Thông thường, sẽ có 2 trường hợp xảy ra:</p><p><strong>Trường hợp 1: Không có gì mới trong dev</strong></p><p>Giả sử lúc đó Git history của dự án giống như thế này:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/31/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Như bạn thấy, nhánh login màu vàng được rẽ ra từ nhánh dev màu xanh, và trong nhánh dev không có code gì mới. Đây là trường hợp lý tưởng, đảm bảo khi merge vào dev chúng ta sẽ không bị xung đột code.</p><p><strong>Trường hợp 2: Có commits mới trong nhánh dev</strong></p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/30/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Trong trường hợp này, branch dev (màu xanh) đang có 2 commits phía trước branch login (màu vàng). Nếu trong 2 commits đó có chứa thay đổi liên quan đến dev, chẳng hạn như package.json, thì khả năng cao là sẽ xảy ra xung đột khi merge trực tiếp login vào. Mà dù có may mắn không xảy ra xung đột code, thì merge vào cũng sẽ làm history xấu đi.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/33/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Do đó, chúng ta sẽ cần sửa lại history của nhánh login bằng cách dùng git rebase.</p><h4 id="git-rebase-la-gi"><a href="#git-rebase-la-gi" class="headerlink" title="git rebase là gì?"></a>git rebase là gì?</h4><p>git rebase sẽ đem những commits bên trong nhánh login và áp dụng lại vào sau commit mới nhất trong nhánh dev. Cú pháp của lệnh này là:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;tên nhánh muốn áp dụng lại&gt;</span><br></pre></td></tr></table></figure><p>Trong trường hợp hiện tại, chúng ta sẽ chạy những lệnh sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Cập nhật repo hiện tại, đồng thời lấy về commits mới nhất của `dev`</span><br><span class="line">git pull</span><br><span class="line"># Chuyển qua nhánh `login`, có thể bỏ qua bước này nếu bạn chắc chắn</span><br><span class="line"># mình đang ở `login`</span><br><span class="line">git checkout login</span><br><span class="line"># Tiến hành rebase</span><br><span class="line">git rebase dev</span><br></pre></td></tr></table></figure><p>Nếu xảy ra xung đột code, bạn có thể phát hiện và giải quyết chúng sớm. Nguyên tắc chung là không sửa code của người khác, và chỉ kết hợp thêm những gì bạn làm. Việc thực hiện rebase tại nhánh chức năng do bạn phụ trách giúp giảm thiểu khả năng mất code, vì bạn là người hiểu rõ nhất phần code bạn viết.</p><p>Sau khi giải quyết hết các xung đột trong code, bạn chạy git rebase –continue để tiếp tục tiến trình rebase. Bạn cũng có thể chạy git rebase –abort để hủy bỏ rebase và đưa nhánh login về lại trạng thái ban đầu.</p><blockquote><p><strong>Mách nhỏ:</strong><br>Một cách giúp cho việc giải quyết xung đột trong code dễ dàng hơn là dùng git mergetool. Có rất nhiều công cụ hỗ trợ, và <a href="http://meldmerge.org/" target="_blank" rel="noopener">Meld</a> là một trong số đó.</p></blockquote><p>Nếu chưa quen rebase, bạn có thể tạo một branch mới từ login, ví dụ: git checkout -b test login, và tiến hành rebase trên branch này. Sau khi chắc chắn là mọi thứ ổn thỏa, bạn có thể quay lại và tiến hành rebase cho login.</p><p>Khi rebase xong, mong là history của bạn trông sẽ giống như thế này:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/32/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Bạn thấy quen không? Chính là trường hợp 1 đã nói ở trên đó.</p><h4 id="rebase-interactively"><a href="#rebase-interactively" class="headerlink" title="rebase interactively"></a>rebase interactively</h4><p>Ở phần trên, chúng ta có băn khoăn là commit thường xuyên dễ tạo ra nhiều commit nhỏ đôi khi không cần thiết. Bạn có thể dùng git rebase để dọn dẹp chúng bằng cách thêm tham số -i (interactively) như sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Chắc chắn rằng bạn đang ở nhánh `login`</span><br><span class="line">git checkout login</span><br><span class="line"># Rebase lên dev interactively</span><br><span class="line">git rebase dev -i</span><br></pre></td></tr></table></figure><p>Bạn sẽ được chuyển đến một giao diện tương tự như bên dưới.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pick ff80e85 A way to organize routes per module</span><br><span class="line">pick 67cf18d Try Netlify Functions</span><br><span class="line">pick 5546901 Add Dashboard view</span><br><span class="line">pick 2a66ae3 Change layout</span><br><span class="line">pick 58755b4 Add Books module, 404 page.</span><br><span class="line">pick fd79cb9 Refactor. Reduce inline styling.</span><br><span class="line">pick c671f60 Restyling 404 page.</span><br><span class="line">pick 33ef874 Basic layout for book management page.</span><br><span class="line">pick 49c423a Clean up UI a bit</span><br><span class="line">pick 3aa2840 Init</span><br></pre></td></tr></table></figure><p>Theo lý thuyết, rebase sẽ đem từng commit và áp dụng lại theo thứ tự từ trên xuống dưới. Bởi vậy, bạn có thể thoải mái sắp xếp lại thứ tự của các commits trên. Bạn để ý lệnh pick ở phía trước mỗi commit. Lệnh này sẽ báo cho git biết hành động bạn muốn làm với commit, trong trường hợp này là áp dụng lại commit. Ngoài pick (p), chúng ta còn có:</p><ul><li>reword (r): áp dụng lại commit, và sửa commit message</li><li>edit (e): áp dụng commit, nhưng dừng quá trình rebase lại để sửa code</li><li>squash (s): kết hợp commit hiện tại vào commit trước nó</li><li>fixup (f): giống như squash nhưng bỏ đi commit message</li><li>exec (x): chạy một lệnh shell nào đó</li><li>drop (d): bỏ, không sử dụng commit này</li></ul><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524470951/Peek_2018-04-23_11-06_zkqjpt.gif" alt="Bạn có thể dùng các chữ viết tắt cho các commands"></p><p>Bằng cách dùng rebase interactively, chúng ta có thêm nhiều quyền để quản lý và sửa đổi commits theo ý mình, làm cho history sạch đẹp hơn.</p><h3 id="Merge-vao-dev"><a href="#Merge-vao-dev" class="headerlink" title="Merge vào dev"></a>Merge vào dev</h3><p>Sau khi dọn dẹp nhánh login sạch đẹp, chúng ta có thể merge nhánh này vào dev. Thông thường, bạn – dev cứng nhất team – sẽ là người tiến hành kiểm tra và merge. Bạn có thể chọn hai cách tiếp cận:</p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>Bạn có thể merge trực tiếp vào dev như thế này:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Chuyển qua nhánh `dev`</span><br><span class="line">git checkout dev</span><br><span class="line"># Merge `login` vào `dev`</span><br><span class="line">git merge login</span><br></pre></td></tr></table></figure><p>Kết quả sẽ là:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/34/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Như bạn thấy, một commit mới được tạo ra, giúp bạn dễ dàng nhận biết thời điểm nhánh login được merge vào. Cách thức này gọi là merge fast-forward. Khi dự án phát triển dần theo thời gian, history của dev sẽ như thế này.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0agufwbv/2/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Bên cạnh đó, chúng ta cũng có cách merge non-fast-forward:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge login --no-ff</span><br></pre></td></tr></table></figure><p>Và đây là kết quả:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/35/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Tất cả commits của login đã được kết hợp vào dev. Boom! login biến mất khỏi thế gian như chưa hề tồn tại. SAD!</p><p>Lợi ích dễ thấy nhất của merge non-fast-forward là giúp cho history của bạn thẳng thớm gọn gàng, còn bất lợi là bạn không phân biệt được commits nào là của nhánh tính năng, cũng như thời điểm merge diễn ra. Trong trường hợp nhánh tính năng có quá nhiều commits nhỏ và dư thừa, chẳng hạn như những commits sửa lỗi chính tả, cập nhật thư viện…, history của bạn sẽ bị nhiễu.</p><h4 id="rebase-squash-va-merge"><a href="#rebase-squash-va-merge" class="headerlink" title="rebase, squash và merge"></a>rebase, squash và merge</h4><p>Ngoài cách merge các commits của nhánh tính năng vào dev, bạn có thể rebase và squash tất cả commits lại làm một, sau đó tiến hành merge. Cách làm này giúp cho dev luôn ở trạng thái gọn gàng nhất, không chứa commit dư thừa. Trong trường hợp lý tưởng, history của dev sẽ giống như sau:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0agufwbv/5/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Để cách làm này phát huy tối đa hiệu quả, yêu cầu commit message phải được viết thật rõ ràng và chi tiết.</p><h3 id="Merge-vao-master"><a href="#Merge-vao-master" class="headerlink" title="Merge vào master"></a>Merge vào master</h3><p>Yay! Sau một thời gian quằn quại, cuối cùng team của bạn đã ra được sản phẩm tương đối ổn. Giờ là lúc merge vào master và triển khai lên server.</p><p>Lúc này, cũng như khi merge vào dev, bạn có thể chọn merge (fast-forward hoặc non-fast-forward) hay rebase, squash và merge, nhưng theo kinh nghiệm của Ehkoo, merge –no-ff sẽ là lựa chọn tốt nhất, giúp cho master và dev luôn song song với nhau.</p><h3 id="Hotfix"><a href="#Hotfix" class="headerlink" title="Hotfix"></a>Hotfix</h3><p>Hôm nay, thứ 6, ngày 1X. Bạn chạy npm run build rồi rsync code ở master lên server. Mọi thứ hoàn toàn bình thường. Bạn vào website, click vài cái. “Ngon, chạy rồi”, bạn thầm nghĩ, “đi nhậu thoy!” Nhưng vừa vươn vai định gọi điện cho gấu, thì “ó e ò e”, chuông điện thoại reng, số máy của sếp. “Hí hí, chắc được thưởng nóng chăng?” Bạn bắt máy, và nghe giọng sếp âu yếm GẦM ở đầu dây: “LỖI RỒI MÁÁÁ!!!”</p><p>Xin đừng trụy tim. Hãy hít một hơi thật sâu, rồi bình tĩnh tạo một branch mới từ master, fix-xxx chẳng hạn. Nhờ lắng nghe tiếng sếp gầm, bạn đã mau chóng mò ra lỗi trong đống code (vì bạn là dev cứng mà hihi). Bạn khẽ rủa thầm ku đào nhí viết code không kĩ, tự rủa nhẹ bản thân vì review sót. Nhưng thôi kệ, fix nhanh rồi còn về, kẻo gấu xé xác T^T.</p><p>Bạn bèn merge –no-ff nhánh fix-xxx vào cả hai nhánh master và dev. Bằng cách này, phần sửa lỗi sẽ xuất hiện ở cả hai branches, giúp history không bị rẽ nhánh bất ngờ.</p><p>Bạn push, và chuông điện thoại lại vang lên…</p><h3 id="Vai-van-de-linh-tinh-khac"><a href="#Vai-van-de-linh-tinh-khac" class="headerlink" title="Vài vấn đề linh tinh khác"></a>Vài vấn đề linh tinh khác</h3><h4 id="Co-can-nhanh-staging-khong"><a href="#Co-can-nhanh-staging-khong" class="headerlink" title="Có cần nhánh staging không?"></a>Có cần nhánh staging không?</h4><p>Trong một số dự án, ngoài dev, còn có một đội ngũ “thần bí” được gọi là QA/QC. Họ được sinh ra trong team là để bới lỗi của anh em nhà dev, nên quan hệ đôi bên không được tình thương mến thương cho lắm. Dầu vậy, họ vẫn cần một nhánh riêng có tên gọi staging. Nhánh này sẽ chứa phần code ở giữa master và dev. staging được tách ra từ dev, có nhiều tính năng hơn master, và tương đối ổn định để có thể merge vào master.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0agufwbv/6/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Tùy vào tình hình cụ thể của team mà bạn quyết định có cần staging hay không.</p><h4 id="Viet-commit-message-nhu-the-nao-cho-chuan"><a href="#Viet-commit-message-nhu-the-nao-cho-chuan" class="headerlink" title="Viết commit message như thế nào cho chuẩn?"></a>Viết commit message như thế nào cho chuẩn?</h4><p>Nếu bạn theo chuẩn rebase, squash và merge thì chuyện viết commit message tốt rất quan trọng, vì nó sẽ là tài liệu để mô tả toàn bộ một tính năng. Nhưng nên viết thế nào? Có một vài gợi ý cho bạn đây:</p><ul><li>Dòng đầu tiên không dài quá 80 chữ, luôn bắt đầu bằng động từ ở thì hiện tại, ngắn gọn súc tích, ví dụ: <em>Add module Authentication</em>. Bạn có thể chọn thêm tiền tố nếu cần thiết, chẳng hạn: <em>Feature: Add module Authentication</em> hay <em>Fix: unable to get location params from URL</em></li><li>Bỏ trống hai dòng</li><li>Sau đó mô tả chi tiết về tính năng đang làm, những điểm cần lưu ý, phần nào của tính năng cần được cải thiện…</li><li>Khuyến khích bạn kèm theo chữ ký <em>signature</em> khi commit bằng git commit -s</li></ul><p>Một ví dụ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Feature: Add module Authentication</span><br><span class="line"></span><br><span class="line">Signed-off-by: Long Dep Trai &lt;long@ehkoo.com&gt;</span><br><span class="line"></span><br><span class="line">This module allows users to register/login into our website using</span><br><span class="line">AWS Cognito account. Added routes:</span><br><span class="line"></span><br><span class="line">* /auth/register</span><br><span class="line">* /auth/login</span><br><span class="line"></span><br><span class="line">Users after registration will receive a SMS to confirm their account.</span><br><span class="line"></span><br><span class="line">TODO:</span><br><span class="line"></span><br><span class="line">* Implement social identities</span><br><span class="line">* Add Logout feature</span><br><span class="line">* Add Forgot password feature</span><br></pre></td></tr></table></figure><blockquote><p><strong>Tiếng Anh hay tiếng Việt?</strong><br>Tùy thuộc vào team của bạn, nhưng phải thống nhất trong toàn dự án, và viết tiếng Việt thì nhớ đừng sai chính tả kẻo bị công an bắt nhé.</p></blockquote><h4 id="Co-nen-tag-version-hay-khong"><a href="#Co-nen-tag-version-hay-khong" class="headerlink" title="Có nên tag version hay không?"></a>Có nên tag version hay không?</h4><p>Câu trả lời là <em>HÊN XUI</em>, tùy tính chất từng team. Nếu tần suất triển khai code từ master của team không cao, khoảng vài tháng/lần thì tag version là cách tốt để theo dõi những thay đổi. Hoặc nếu bạn đang xây dựng lib hoặc làm việc open source.</p><p>Còn nếu team bạn theo chuẩn “move fast, break things”, thì có lẽ không cần tag version đâu. Thêm nữa, để tag version phát huy hiệu quả tối đa, thì <em>CHANGELOG</em> cần phải được viết kỹ càng. Đồng thời, đừng quên tag version theo <a href="https://semver.org/" target="_blank" rel="noopener">semver</a> nhé.</p><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524474052/tumblr_lc63ingGof1qz6pqio1_500_mybavi.png" alt="Already broken"></p><h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h3><p>Chúng ta có thể tóm tắt bài này lại như sau:</p><ul><li>Dự án được chia thành nhiều nhánh, bao gồm master, dev và có thể có staging</li><li>Các nhánh tính năng được chia ra từ dev, phát triển độc lập, được rebase trước khi merge lại vào dev</li><li>Rebase có thể thay đổi một chút history, hoặc squash lại thành một commit duy nhất</li><li>Merge có thể là fast-forward hoặc non-fast-forward</li><li>dev sẽ được merge vào master mỗi khi triển khai. Trường hợp có staging, dev sẽ được merge vào staging, và staging sẽ được merge vào master.</li><li>Các nhánh hotfix sẽ được chia ra từ master, sau đó merge –no-ff vào master và dev</li></ul><p>Dĩ nhiên bài viết này chỉ mang tính tham khảo, vì mỗi team mỗi công ty sẽ có những cách làm riêng. Tuy nhiên, nếu bạn không may lâm vào cảnh trái ngang như ở đầu bài, thì đây là một workflow rất nên nghiên cứu và áp dụng. Mong rằng trong tương lai, dự án của bạn sẽ không trở thành “kim tự tháp” như hình dưới đây.</p><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524414465/11406260_10204684523099229_6956873399787391385_o_mscrhf.jpg" alt="The pyramid of doom"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bạn vốn làm việc một mình một cõi, “thầu nguyên con” dự án. Dù phải code sấp mặt nhưng cuộc đời vẫn thật êm xuôi: tốc độ thần thánh 500 dòng/giờ, commit code mới pặc pặc vào master, cuối ngày chỉ việc git push, tắt máy, rồi dắt gấu đi nhậu (hoặc lội suối băng đèo về nhà thay tã cho con).&lt;/p&gt;
&lt;p&gt;Ngờ đâu sếp (hoặc co-founder) xót thương bạn vất vả, bèn tuyển ngay 2 em đào nhí vào trợ giúp. Và mọi chuyện bắt đầu phức tạp từ đây: code trong team bị chồng chéo và xung đột liên tục, branch master đang thẳng thớm đẹp xinh bỗng phân nhánh như điên, tốc độ code của bạn giảm trong khi tốc độ chửi thề ngày một tăng nhanh. Bạn không còn thời giờ dắt gấu đi nhậu, cũng không thể lội kịp về nhà thay tã cho con nữa. Cuộc đời bế tắc.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://nth-blogs.herokuapp.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Tìm hiểu về một số khái niệm trong Git</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Tim-hieu-ve-mot-so-khai-niem-trong-Git.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Tim-hieu-ve-mot-so-khai-niem-trong-Git.html</id>
    <published>2018-04-26T07:39:00.000Z</published>
    <updated>2018-04-30T08:06:42.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h3><p>Đối với các lập trình viên, việc sử dụng công cụ quản lý phiên bản <strong>git</strong> là điều không thể thiểu trong công việc hằng ngày và là một trong những kĩ năng cơ bản nhất mà ai cũng cần có được. <strong>Git</strong> có rất nhiều các khái niệm khác nhau nên nếu bạn chỉ là người mới làm quen với <strong>git</strong> thì đây chính là bài viết dành cho bạn. Bài viết sẽ giải thích tại sao chúng ta nên sử dụng <strong>git</strong> cũng như một số khái niệm thường gặp khi sử dụng <strong>git</strong>.</p><a id="more"></a><h3 id="Tai-sao-can-su-dung-git"><a href="#Tai-sao-can-su-dung-git" class="headerlink" title="Tại sao cần sử dụng git?"></a>Tại sao cần sử dụng git?</h3><ul><li>Thử tưởng tượng khi làm một project và bạn muốn bổ sung hoặc làm thêm tính năng mới cho project của mình. Tuy nhiên để đảm bảo rằng bạn có thể quay lại sử dụng phần code trước đó bạn đã code trong trường hợp tính năng mới gây lỗi và bạn không nhớ phải xóa những gì để khôi phục lại trạng thái code trước đó thì bạn cần phải thực hiện copy toàn bộ project đó và paste ra đâu đó để lưu trữ rồi mới bắt đầu thực hiện code tính năng mới. Như vậy mỗi lần muốn làm tính năng mới, bạn phải lặp đi lặp lại thao tác trên và rất mất thời gian. Sử dụng <strong>Git</strong> có thể giải quyết vấn đề này chỉ trong 1 vài dòng lệnh</li><li>Nếu project bạn đang làm có 2 thành viên cùng làm, mỗi lần một người hoàn thành một tính năng lại phải gửi toàn bộ source code đó thông qua usb, google driver hoặc công cụ lưu trữ online nào đó cho thành viên còn lại có thể download về và paste đè lại lên phần code của người đó. Công việc này cũng mất rất nhiều thời gian và tồn tại nhiều rủi rõ khi paste code chồng lên nhau. Để giải quyết vấn đề này, ta cũng có thể sử dụng <strong>git</strong> và một <strong>remote repository</strong></li></ul><h3 id="Cac-khai-niem-co-ban-trong-git"><a href="#Cac-khai-niem-co-ban-trong-git" class="headerlink" title="Các khái niệm cơ bản trong git"></a>Các khái niệm cơ bản trong git</h3><h4 id="1-Repository-la-gi"><a href="#1-Repository-la-gi" class="headerlink" title="1. Repository là gì?"></a>1. Repository là gì?</h4><ul><li>Khi sử dụng git, lệnh đầu tiên mà chúng ta thường gõ:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><ul><li>Lệnh này sẽ tạo ra một thư mục ẩn có tên .git và đây chính là repository (hay kho chứa). Còn phần code hay hay thư mục của project nằm cùng với thư mục .git được gọi là Working Directory. Git sử dụng repository này để lưu trữ, giám sát toàn bộ thông tin về các trạng thái của và bất cứ thay đổi nào với project lúc này sẽ được git lưu trữ lại.</li><li>Có hai loại repository gồm local repository - là repository nằm trên chính máy tính của chúng ta và remote repository - là repository nằm trên một máy chủ từ xa được cung cấp bởi các nhà phân phối như <a href="https://github.com/" target="_blank" rel="noopener">Github</a>, <a href="https://gitlab.com/" target="_blank" rel="noopener">Gitlab</a> hay <a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a>, …</li></ul><h4 id="2-Branch-la-gi"><a href="#2-Branch-la-gi" class="headerlink" title="2. Branch là gì?"></a>2. Branch là gì?</h4><ul><li>Như đã nói ở trên về vấn đề khi ta muốn thêm một tính năng mới mà đảm bảo vẫn có thể dễ dàng khôi phục lại trạng thái trước đó thì ta có thể sử tạo 1 branch mới nhau sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><ul><li>Branch mặc định là master</li><li>Branch mới được tạo ra sẽ chứa toàn bộ trạng thái và những thay đổi đã thực hiện trên project trước khi được tạo</li><li>Với mỗi repository ta có thể tạo nhiều branch khác nhau và các nhánh này là độc lập với nhau nên khi ta có thay đổi đối với project trên branch này sẽ không ảnh hưởng đến các branch khác</li><li>Khi tính năng được ta thử nghiệm trên nhánh mới hoàn thiện và đã được kiểm tra đầy đủ, ta có thể tiến hành hợp nhất 2 nhánh với nhau (đưa những thay đổi của nhánh này gộp vào với nhánh khác)</li><li>Có hai loại branch là local branch - là branch nằm trên máy tính của chúng ta và remote branch - là branch nằm trên máy chủ từ xa</li></ul><h4 id="3-Lam-the-nao-de-xoa-mot-branch"><a href="#3-Lam-the-nao-de-xoa-mot-branch" class="headerlink" title="3. Làm thế nào để xóa một branch?"></a>3. Làm thế nào để xóa một branch?</h4><ul><li><p>Trong trường hợp branch chúng ta tạo ra trước đó không còn cần thiết nữa, ta có thể tiến hành xóa chúng đi bằng cách sử dụng các lệnh như sau:</p><ul><li>Đối với local branch:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure></li></ul><p>Với cách xóa trên, nếu branch cần xóa chưa được gộp thay đổi với branch khác sẽ lập tức báo lỗi vào yêu cầu gộp với branch khác trước khi thực hiện xóa bằng lệnh này</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>Với cách xóa này thì branch được chỉ định sẽ lập tức bị xóa kể cả trong trường hợp nó chưa được gộp với branch khác</p><ul><li>Đối với remote branch:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete &lt;tên-remote&gt; &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure></li></ul><p>hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;tên-remote&gt; --delete &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure></li></ul><p><em>Lưu ý: đối với cả local branch và remote branch ta có thể tiến hành xóa đồng thời nhiều branch bằng cách liệt kê tên các branch cần xóa liền nối tiếp nhau và cách nhau một khoảng trắng</em></p><h4 id="4-Push-local-branch-len-remote-server-voi-mot-ten-khac"><a href="#4-Push-local-branch-len-remote-server-voi-mot-ten-khac" class="headerlink" title="4. Push local branch lên remote server với một tên khác"></a>4. Push local branch lên remote server với một tên khác</h4><ul><li>Thông thường khi chúng ta tiến hành push một local branch lên remote server thì tên branch mặc định của remote branch lúc này sẽ là tên của local branch, lệnh push như sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;tên-remote&gt; &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><ul><li>Nhưng nếu ta muốn đổi tên của remote branch đó trên server thì ta cần sử dụng lệnh như sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;tên-remote&gt; &lt;tên-branch&gt;:&lt;tên-remote-branch&gt;</span><br></pre></td></tr></table></figure><h4 id="5-Phan-biet-rebase-va-merge"><a href="#5-Phan-biet-rebase-va-merge" class="headerlink" title="5. Phân biệt rebase và merge"></a>5. Phân biệt rebase và merge</h4><ul><li>Khi muốn tiến hành gộp 2 branch lại với nhau, ta có thể sử dụng một trong hai lệnh sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>Sẽ tiến hành gộp branch hiện tại với branch mà ta lựa chọn. Tuy có cùng chức năng là gộp nhánh nhưng cách hoạt động của merge và rebase lại khác với nhau, ta có thể so sánh sự khác biệt thông đó như sau:</p><ul><li>Giả sử ta có 2 branch cần gộp với nhau như hình sau:<br><img src="https://viblo.asia/uploads/2916cb93-a062-4546-9414-16781503b1c1.png" alt=""></li></ul><hr><ul><li>Đối với sử dụng merge kết quả thu được sẽ như sau:<br><img src="https://viblo.asia/uploads/8da09449-44e1-49e6-902e-0648cdcb2977.png" alt=""><br> Việc sử dụng merge sẽ tạo ra một commit mới là kết hợp từ 2 commit cuối cùng của 2 nhánh cần gộp vào với nhau Log commit sẽ không bị thay đổi và thứ tự các commit sẽ được sắp xếp theo thời gian tạo commit</li></ul><hr><ul><li>Đối với sử dụng rebase kết quả thu được sẽ như sau:<br><img src="https://viblo.asia/uploads/e26ee7ad-e024-4dda-b500-261cfe7b9dd9.png" alt=""><br> Rebase sẽ đưa toàn bộ branch Feature lên trên ‘đầu’ branch master Làm thay đổi lịch sử commit</li></ul><h4 id="6-Khac-nhau-giua-fetch-va-pull"><a href="#6-Khac-nhau-giua-fetch-va-pull" class="headerlink" title="6. Khác nhau giữa fetch và pull"></a>6. Khác nhau giữa fetch và pull</h4><ul><li>Khi muốn cập nhật các thay đổi từ trên remote server về local repository ta cũng có hai cách để thực hiện điều này như sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;tên-remote&gt; &lt;tên-remote-branch&gt;</span><br></pre></td></tr></table></figure><p>Lệnh này sẽ tiến hành kéo các thay đổi từ trên remote server về local của chúng ta đồng thời tiến hành merge các thay đổi đó ngay</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;tên-remote&gt; &lt;tên-remote-branch&gt;</span><br></pre></td></tr></table></figure><p>Đối với lệnh fetch, các thay đổi từ remote server sẽ được kéo về máy nhưng không tự động merge vào source code của chúng ta mà chúng ta có thể thực hiện việc này sau khi đã review lại các thay đổi đó trước khi tiến hành merge. Các thay đổi này được đẩy sang một branch khác và ta có thể sử dụng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><p>Để xem được các branch sau khi fetch đồng thời cũng có thể checkout sang branch đó để xem các thay đổi.</p><ul><li>Có thể hiểu đơn giản lại sự khác nhau giữa fetch và pull như sau:<ul><li>git pull = git fetch + git merge</li></ul></li></ul><h4 id="7-The-nao-la-git-stash"><a href="#7-The-nao-la-git-stash" class="headerlink" title="7. Thế nào là git stash?"></a>7. Thế nào là git stash?</h4><ul><li>Trong quá trình chúng làm việc, có những lúc chúng ta đang code dở một chức năng nào đó nhưng bất ngờ ở một chức năng trên branch khác đang có lỗi cần phải sửa gấp và chúng ta muốn lưu lại thay đổi đã làm trên nhánh hiện tại nhưng không muốn thực hiện commit dư thừa thì git stash là lệnh mà chúng ta có thể dùng để giải quyết vấn đề này.</li><li>git stash cho bạn khả năng lưu lại trạng những thay đổi mà bạn đã tạo ra mà không cần thiết phải commit nó giúp bạn có thể dễ dàng chuyển sang nhánh khác làm việc và sau đó quay lại và tiếp tục những gì bạn đang làm ở nhánh đó.</li><li><p>Các lệnh liên quan đến git stash</p><ul><li><strong>Để lưu được những thay đổi mà không cần commit nó, ta cần thực hiện những lệnh sau</strong>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></li></ul><p>Để đưa toàn bộ các thay đổi đó vào trạng tháy staged, sau đó sử dụng lệnh sau để lưu thay đổi đó mà không cần commit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash # hoặc &quot;git stash save&quot;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Để xem lại các thay đổi đã lưu, ta có thể dùng các lệnh sau</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on &lt;branch-name&gt;: &lt;lastest commit&gt;</span><br><span class="line">stash@&#123;1&#125;: WIP on &lt;branch-name&gt;: &lt;lastest commit&gt;</span><br><span class="line">stash@&#123;2&#125;: WIP on &lt;branch-name&gt;: &lt;lastest commit&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>Để xem lại danh sách các lần đã lưu, trong trường hợp muốn xem nội dung thay đổi thì ta gõ lệnh sau</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list -p</span><br></pre></td></tr></table></figure></li><li><p><strong>Hoặc nếu muốn xem cụ thể nội dung thay đổi của một lần lưu cụ thể, ta dùng lệnh</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash show &quot;stash@&#123;n&#125;&quot;</span><br><span class="line">// với n là lần lưu tương ứng trong danh sách</span><br><span class="line">// Lưu ý phần stash@&#123;n&#125; phải nằm trong cặp ngoặc đôi</span><br></pre></td></tr></table></figure></li><li><p><strong>Để lấy lại thay đổi được lưu trong danh sách trên ta dùng lệnh</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply &quot;stash@&#123;n&#125;&quot;</span><br></pre></td></tr></table></figure><p>Hoặc lấy thay đổi gần nhất và xóa lần lưu đó</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure></li><li><p><strong>Để xóa danh sách các thay đổi đã lưu, ta dùng lệnh</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash drop &quot;stash@&#123;n&#125;&quot;</span><br></pre></td></tr></table></figure><p>Để drop một lần lưu chỉ định hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash clear</span><br></pre></td></tr></table></figure><p>Để xóa toàn bộ những lần đã lưu</p></li></ul></li></ul><h4 id="8-Lam-the-nao-de-xoa-bo-trang-thai-vai-commit-gan-day"><a href="#8-Lam-the-nao-de-xoa-bo-trang-thai-vai-commit-gan-day" class="headerlink" title="8. Làm thể nào để xóa bỏ trạng thài vài commit gần đây?"></a>8. Làm thể nào để xóa bỏ trạng thài vài commit gần đây?</h4><p>Để thưc hiện công việc này chúng ta có thể sử dụng 1 trong 2 lệnh sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Lệnh này sẽ tạo ra một commit mới đảo ngược lại những thay đổi trong commit được chỉ định.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Keehnh này sẽ xóa toàn bộ các commit trước đó và đưa branch hiện tại trở về trạng thái của commit-hash-code đã chọn</p><h4 id="9-Gop-mot-vai-commit-thanh-mot-commit-duy-nhat"><a href="#9-Gop-mot-vai-commit-thanh-mot-commit-duy-nhat" class="headerlink" title="9. Gộp một vài commit thành một commit duy nhất?"></a>9. Gộp một vài commit thành một commit duy nhất?</h4><ul><li>Đôi khi trong lúc làm việc, ta thường tạo ra một số commit dư thừa và sau đó muốn gộp chung số commit đó lại với một message rõ ràng hơn về mục đích chung của toàn bộ các commit đó. Để làm được điểu này, ta có thể sử dụng những lệnh sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Với commit-hash-code là hash code của commit cuối cùng của nhóm cần gộp hoặc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~&lt;index&gt;</span><br></pre></td></tr></table></figure><p>Với index là số lượng commit cần gồm so với commit cuối cùng. Ngoài ra khi thực hiện việc rebase để gộp commit, ta có các lựa chọn khác như pick|squash|fixup để quyết định kiểu gộp. Cuối cùng ta cũng có thể dùng lệnh sau để gộp commit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft &lt;commit-hash-code&gt;</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m&quot;New commit&quot;</span><br></pre></td></tr></table></figure><p>Với commit-hash-code là mã hash của commit trước đó mà ta muốn gộp lại từ commit cuối cùng đến commit chỉ định.</p><h4 id="10-Phan-biet-giua-git-reset-reset-–soft-reset-–hard"><a href="#10-Phan-biet-giua-git-reset-reset-–soft-reset-–hard" class="headerlink" title="10. Phân biệt giữa git reset, reset –soft, reset –hard"></a>10. Phân biệt giữa git reset, reset –soft, reset –hard</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Sẽ di chuyển HEAD về phía commit được chỉ định nhưng vẫn giữ nguyên trạng thái thay đổi của các file và đồng thời loại bỏ các file đó khỏi trạng thái staged</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Tương tư như git reset nhưng toàn bộ các fle vẫn giữ được trạng thái staged.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit-hard-code&gt;</span><br></pre></td></tr></table></figure><p>Tương tự như 2 lệnh trên nhưng toàn bộ sự thay đổi của các file sẽ bị loại bỏ hoàn toàn nên hãy chú ý khi dùng lệnh này để tránh rơi vào trường hợp bao nhiêu công sức đổ xuống sông xuống biển<br><img src="https://twemoji.maxcdn.com/2/72x72/1f604.png" alt=""></p><h4 id="The-nao-la-cherry-pick"><a href="#The-nao-la-cherry-pick" class="headerlink" title="Thế nào là cherry-pick?"></a>Thế nào là cherry-pick?</h4><ul><li>Bạn có thể hiểu cherry-pick cũng có một số điểm tương đồng với merge và rebase là lấy thay đổi từ một branch này và gộp vào branch khác. Nhưng điểm khác nhau lớn nhất giữa cherry-pick và merge, rebase là cherry-pick chỉ gộp một commit được chỉ định từ một nhánh khác vào nhánh hiện tại trong khi merge và rebase sẽ gộp toàn bộ các commit lại. Để sử dụng cherry-pick, ta cần xem lại log các commit sau đó lấy mã hash của commit cần được cherry-pick và checkout sang nhánh cần được gộp commit của mã hash kia và thực hiện lệnh:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><ul><li><p>Một hình ảnh minh họa cho cherry-pick:<br><img src="https://viblo.asia/uploads/58fb9676-c97d-4ad8-8431-172c129cdad1.png" alt=""></p><ul><li>Giả sử ta muốn lấy commit C từ branch master và gộp vào branch cherry-pick</li><li><p>Sau khi thực hiện lệnh cherry-pick như đề cập ở trên, đây sẽ là kết quả ta thu được<br><img src="https://viblo.asia/uploads/4db578c2-aa4c-44fa-a6ae-4af4ec1d548c.png" alt=""></p></li><li><p>Như ta có thể thấy commit C từ branch master được gộp vào với branch cherry–pick dưới tên commit là C’</p></li></ul></li></ul><h4 id="Git-flow-la-gi"><a href="#Git-flow-la-gi" class="headerlink" title="Git flow là gì?"></a>Git flow là gì?</h4><ul><li>Git flow là một quy trình làm việc với git được thiết kế bởi Vincent Driessen. Git flow đưa ra một mô hình phân nhánh giúp hỗ trợ việc quản lý các dự án lớn dễ dàng hơn. Sơ đồ tổng quan:<br><img src="https://viblo.asia/uploads/c3f681b2-36bb-4dda-9831-64770c5bdbfb.png" alt=""></li></ul><h5 id="Cac-branch-trong-gitflow"><a href="#Cac-branch-trong-gitflow" class="headerlink" title="Các branch trong gitflow:"></a>Các branch trong gitflow:</h5><ul><li>Master branch: là branch dùng cho sản phẩm chính thức. Đây luôn là branch ổn định nhất và nó chưa lịch sử các lần release của dự án</li><li>Develop branch: là nhánh dùng cho sản phẩm trong quá trình phát triển</li><li>Feature: mỗi tính năng mới cho sẩn phẩm sẽ được tạo và phát triển trên một branch mới với tên quy ước feature/tên_branch. Các <strong>feature</strong> này sẽ tạo ra từ <strong>develop branch</strong> và khi được hoàn thiện sẽ được gộp trở lại với <strong>develop branch</strong> (<em>Lưu ý: các Feature không được phép gộp trực tiếp với master branch</em>)</li><li>Release: khi <strong>develop branch</strong> đã có đủ số tính năng cần thiết để có thể release, ta có thể tạo branch mới với tên quy ước release/tên_version. Branch này sau khi được tạo xong sẽ tiến hành merge nó với đồng thời cả <strong>master branch</strong> và <strong>develop branch</strong></li><li>Hotfix branch: khi sản phẩm trên <strong>master branch</strong> của chúng ta gặp phải trục trặc và cần có bản vá ngay lập tức thì ta sẽ tạo ra <strong>hotfix branch</strong>. Branch này tương tự như <strong>release branch</strong> nhưng nó được tạo ra từ <strong>master branch</strong> thay vì từ <strong>develop branch</strong> như release (*Chú ý <strong>hotfix branch</strong> cũng cần được gộp lại với <strong>master branch</strong> với <strong>develop branch</strong>)</li></ul><h5 id="Cac-lenh-trong-gitflow"><a href="#Cac-lenh-trong-gitflow" class="headerlink" title="Các lệnh trong gitflow"></a>Các lệnh trong gitflow</h5><ul><li><p>Để khởi tạo một git-flow cho một project, ta dùng lệnh sau</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow init</span><br></pre></td></tr></table></figure><ul><li>Lệnh này sẽ tạo ra hai branch ban đầu là master và develop</li></ul></li><li><p>Để bắt đầu một feature ta dùng lệnh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature start &lt;tên-feature&gt;</span><br></pre></td></tr></table></figure><ul><li>Sẽ tạo ra một branch mới có tên dạng feature/&lt;tên-feature&gt;</li></ul></li><li><p>Sau khi feature đó được thực hiện xong, ta có thể công bố feature đó lên remote server để mọi người cùng có thể cập nhật bằng cách gõ lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature publish &lt;tên-feature&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tiến hành gộp branch đó vào <strong>develop branch</strong> ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature finish &lt;tên-feature&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tạo một bản release ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow release start &lt;verion-no&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tiến hành merge bản release đó vào <strong>master branch</strong> và <strong>develop branch</strong> ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow release finish &lt;version-no&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tạo một bản hotfix ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix start &lt;tên-hotfix&gt;</span><br></pre></td></tr></table></figure></li><li><p>Sau khi bản hotfix hoàn thiện ta có thể tiến hành merge lại với <strong>master branch</strong> và <strong>develop branch</strong> như sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix finish &lt;tên-hotfix&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h3><p>Bài viết ở trên chủ yếu giới thiệu cho mọi người về các khái niệm trong git cũng như cách sử dụng nó trong công việc thường ngày của mình một cách hiệu quả hơn. Cám ơn bạn đã theo dõi.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Gioi-thieu&quot;&gt;&lt;a href=&quot;#Gioi-thieu&quot; class=&quot;headerlink&quot; title=&quot;Giới thiệu&quot;&gt;&lt;/a&gt;Giới thiệu&lt;/h3&gt;&lt;p&gt;Đối với các lập trình viên, việc sử dụng công cụ quản lý phiên bản &lt;strong&gt;git&lt;/strong&gt; là điều không thể thiểu trong công việc hằng ngày và là một trong những kĩ năng cơ bản nhất mà ai cũng cần có được. &lt;strong&gt;Git&lt;/strong&gt; có rất nhiều các khái niệm khác nhau nên nếu bạn chỉ là người mới làm quen với &lt;strong&gt;git&lt;/strong&gt; thì đây chính là bài viết dành cho bạn. Bài viết sẽ giải thích tại sao chúng ta nên sử dụng &lt;strong&gt;git&lt;/strong&gt; cũng như một số khái niệm thường gặp khi sử dụng &lt;strong&gt;git&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://nth-blogs.herokuapp.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Progressive Web App tương lai của nền tảng web</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Progressive-Web-App-tuong-lai-cua-nen-tang-web.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Progressive-Web-App-tuong-lai-cua-nen-tang-web.html</id>
    <published>2018-04-25T11:15:00.000Z</published>
    <updated>2018-04-30T08:06:42.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tom-tat"><a href="#Tom-tat" class="headerlink" title="Tóm tắt"></a>Tóm tắt</h2><p>“Mobile first” hay “Think mobile” là một trong những hot trend mà chúng ta thường được nghe gần đây, khi mà số lượng thiết bị di động và số lượng người sử dụng các thiết bị di động ngày càng lớn. Nhưng think như thế nào cho đúng là điều cần làm rõ. Bài viết này sẽ cung cấp thông tin cho bạn về cách tư duy theo <a href="https://en.wikipedia.org/wiki/Progressive_web_app" target="_blank" rel="noopener">PWA</a>.</p><blockquote><p>PWA không hoàn toàn là một giải pháp về công nghệ, mà là một tập các tiêu chuẩn được định nghĩa cho các ứng dụng web hướng theo, nhằm mang lại trải nghiệm tốt nhất cho người dùng, với sự hỗ trợ của browser về các API có liên quan như Service Worker, Push Notification v.v…</p></blockquote><a id="more"></a><p>Trước khi bàn đến các tiêu chuẩn của PWA và cùng tìm hiểu các nghiên cứu mới về trải nghiệm của người dùng, các công nghệ hứa hẹn… Chúng ta sẽ cùng điểm qua một vài cảm nhận và suy nghĩ trong lược sử thời gian của ngành công nghệ web. Bên cạnh đó, chúng ta cũng sẽ nói đôi chút về Native App đến Hybird App và từ đó hiểu thêm về lý do ra đời của PWA.</p><p>Bài viết sẽ cung cấp cho chúng ta cái nhìn tổng quát về các vấn đề ưu nhược khi phát triển ứng dụng web theo các tiêu chuẩn của PWA, những khó khăn mà lập trình viên có thể gặp phải, hơn nữa, bài viết sẽ cung cấp view nhìn để có thể scale được một dự án PWA về yếu tố con người cũng như về chi phí, hạ tầng.</p><p>Bài viết khá dài, nên bạn có thể phải kiên nhẫn đọc hết những phần bên dưới, hoặc lướt qua các các heading để có thể chọn các đề mục mà mình tâm.</p><h2 id="Mot-vai-cam-nhan-ve-nen-tang-Web-amp-App"><a href="#Mot-vai-cam-nhan-ve-nen-tang-Web-amp-App" class="headerlink" title="Một vài cảm nhận về nền tảng Web &amp; App."></a>Một vài cảm nhận về nền tảng Web &amp; App.</h2><p>Từ Web App đến Single Page (Web) Application</p><p>Bạn có thể tìm thấy các nét sơ lược về lịch sử của trong ngành web theo <a href="https://vi.wikipedia.org/wiki/World_Wide_Web" target="_blank" rel="noopener">Wikipedia</a> với các cột mốc quan trọng ở đây <a href="http://www.evolutionoftheweb.com/?hl=en" target="_blank" rel="noopener">evolutionoftheweb</a>, và theo quan điểm cá nhân của tác giả thì trong hơn 10 năm qua có thể kể đến hai nhóm sự kiện tiêu biểu:</p><ol><li>Sự ra đời của các browsers chịu thay đổi và mau lẹ trong sự thay đổi như Firefox, Chrome. Vì chính sự ra đời này, các tiến bộ mới được nhanh chóng cài đặt, phổ biến đến cộng đồng lập trình viên và người sử dụng.</li><li>Sự ra đời của AJAX có thể nói là cột mốc đáng chú ý nhất của nền tảng web, đã có thời chúng ta đi đâu cũng nghe người ta nói về điều này như là một phương tiện mang đến sức mạnh to lớn cho bất kì một website nào. Một trong các ứng dụng mang đậm dấu ấn của sự thay đổi này là Gmail, nó thay đổi cách chúng ta suy nghĩ về một phần mềm quản lý email trên nền web.</li></ol><p>Trình duyệt mới đi kèm công nghệ tiên tiến, chúng biến công việc phát triển website, ứng dụng web trở nên thú vị dành cho lập trình viên và không gian sáng tạo không giới hạn dành cho designer.</p><p>Cùng với sự bùng nổ của internet, cho đến sự ra đời của AJAX, đã khiến các website từng vốn chậm chạp giờ trở nên nhanh hơn, có hiệu năng và trải nghiệm giống như một phần mềm trên desktop và được gọi là một Single Page Application (SPA).</p><h3 id="Tu-Native-App-den-Hybird-App"><a href="#Tu-Native-App-den-Hybird-App" class="headerlink" title="Từ Native App đến Hybird App"></a>Từ Native App đến Hybird App</h3><p>Ngay từ những ngày bắt đầu, các ứng dụng di động đã tạo ra những điều “thật không thể tin nổi” về sự trải nghiệm đa dạng. Các thiết bị di động với cấu hình ngày càng mạnh mẽ với chu kỳ nâng cấp 1 đến 2 lần mỗi năm và người sử dụng ngày càng chịu móc hầu bao, bỏ thời gian cho các ứng dụng trên di động của mình.</p><p>Bên cạnh đó, các nền tảng di động còn có sự phong phú về chủng loại, phù hợp túi tiền, sở thích của người tiêu dùng đã nhanh chóng trở thành mảnh đất màu mỡ để các nhà khởi nghiệp nghĩ về các ứng dụng nhằm tạo kết nối giữa mọi người, giải quyết công ăn việc làm, nhu cầu học tập giải trí, cải thiện cuộc sống, chăm sóc sức khoẻ… như Grab là một ví dụ về ứng dụng di động đã tạo ra không chỉ việc làm cho cho sinh viên, mà căn bản là đã thay đổi cái nhìn và thói quen truyền thống về ngành dịch vụ xe ôm.</p><p>Có thể kể đến các nền tảng huy hoàng một thời như: Symbian của đế chế Nokia, Windows Phone với điện thoại O2 một thời làm mưa gió, dâu đen Blackberry những ngày hoàng kim đình đám… cho đến khi chỉ còn hai cái tên thống trị thị trường rộng lớn và màu mỡ này là iOS, Android như chúng ta đã biết. Dù vậy, trong trò chơi vương quyền vốn nguy hiểm này, tuy chưa biết kẻ nào sẽ chiến thắng cuối cùng, song có rất nhiều ông lớn vẫn không cam chịu, không dễ dàng bỏ cuộc chơi và tham vọng của mình.</p><p>Và ngày nay, các ứng dụng phát triển trên hai nền tảng Android của Google, và iOS của Apple đã lên đến những con số khổng lồ tạo ra một cộng đồng người sử dụng trung thành. Điều đó cũng có nghĩa là nếu bạn muốn xây dựng ứng dụng Native App bạn cũng phải sẵn sàng phát triển hai phiên bản khác nhau. Thật không may là chi phí phát triển cho hai nền tảng này không hề nhỏ, khi mà bạn biết rằng chi phí đó kèm theo việc maintain theo thời gian là một ác mộng, và phần lớn code của chúng gần như là không thể tái sử dụng cho nhau.</p><p>Đó là lúc người ta nghĩ đến điều làm thế nào để có thể viết một lần và chạy trên nhiều nền tảng, và có nhiều giải pháp cho điều này, ví dụ:</p><ol><li>Các nền tảng build/compile ra Native App như: (a) Xamarin, bạn có thể code với C# và build ra các nền tảng khác nhau như Android, iOS, Windows Phone. (b) React Native, bạn có thể Javascript để build ra Android, iOS.</li><li>Các nền tảng cho phép porting các trang web hiện có, hoặc xây dựng app trên nền tảng html/css/js để build ra các ứng dụng chạy trên cả Andriod, iOS như PhoneGap, gọi là Hybird App bằng cách cung cấp bên dưới một Native App như là một Brigde Software để giúp ứng dụng có thể tương tác với phần cứng bên dưới.</li></ol><p>Hybird app ra đời tận dụng được những ưu điểm của nền tảng web, tận dụng nguồn nhân lực to lớn từ nền tảng này, giờ đây dân lập trình web cũng có thể viết app, porting ứng dụng của mình lên nền tảng mobile một cách dễ dàng.</p><p>Thật vi diệu phải không?</p><h2 id="Cac-so-sanh-giua-Web-va-App"><a href="#Cac-so-sanh-giua-Web-va-App" class="headerlink" title="Các so sánh giữa Web và App"></a>Các so sánh giữa Web và App</h2><h3 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h3><h4 id="Uu-diem"><a href="#Uu-diem" class="headerlink" title="Ưu điểm"></a>Ưu điểm</h4><ol><li>Chạy được trên nhiều nền tảng, từ mobile đến desktop, từ Andriod đến iOS, từ Windows đến Linux v.v…</li><li>Người dùng không phải cài đặt ứng dụng nặng nề có khi hàng trăm Mb, không phải nâng cấp version, chúng luôn được cập nhật mới nhất.</li><li>Có thể searchable từ Google</li><li>Scale ứng dụng dễ dàng với một cộng đồng lập trình viên năng động và đông đảo dễ thuê mướn.</li></ol><h4 id="Nhuoc-diem"><a href="#Nhuoc-diem" class="headerlink" title="Nhược điểm"></a>Nhược điểm</h4><ol><li>Không thể can thiệp được sâu vào hệ thống mà phụ thuộc vào trình duyệt của người dùng.</li><li>Các chức năng về offline có giới hạn như phụ thuộc vào trình duyệt có support hay không.</li><li>Nhiều trình duyệt và các phiên bản khác nhau bạn sẽ tốn thời gian để đảm bảo chúng chạy giống nhau.</li></ol><blockquote><p>Bonus: Bạn có thể xem qua hình bên dưới để nhìn thấy những gì mà Chrome có thể support</p></blockquote><p><img src="https://cdn-images-1.medium.com/max/800/0*SRxt2a6QvqkoUK5A.png" alt=""></p><h3 id="Native-App"><a href="#Native-App" class="headerlink" title="Native App"></a>Native App</h3><h4 id="Uu-diem-1"><a href="#Uu-diem-1" class="headerlink" title="Ưu điểm"></a>Ưu điểm</h4><ol><li>Có thể sử dụng hầu hết các tính năng của thiết bị như camera, la bàn…</li><li>Cảm giác và cái nhìn (feel and look) thân thiện với người dùng vì sử dụng các control native của thiết bị, do hệ điều hành của thiết bị cung cấp.</li><li>Do sử dụng Native App, nên khi hệ điều hành của thiết bị được nâng cấp (ví dụ khi nâng cấp lên IOS 10, thì sẽ thừa kế được)</li><li>Có thể work offline, truy cập vào danh bạ v.v…</li><li>Có thể tận dụng các chức năng như tăng tốc nên tốc độ của Native App sẽ có peformance tốt.</li></ol><h4 id="Nhuoc-diem-1"><a href="#Nhuoc-diem-1" class="headerlink" title="Nhược điểm"></a>Nhược điểm</h4><ol><li>Chi phí phát triển cao, phải gần như làm cho 2 bản dành cho iOS, Android</li><li>Phải optimize cho các dòng điện thoại không phải flagship</li><li>Phải cài đặt, không thể được searchable</li><li>Dung lượng cài đặt rất lớn chiếm một khoảng đáng kể đặc biệt với các thiết bị có bộ nhớ thấp, việc cài đặt còn làm tăng chí phí về mặt dung lượng sử dụng 3G và người sử dụng có thể sẽ phải cân nhắc thời điểm tải.</li><li>Người dùng sau khi đã cài đặt thường cũng sẽ không nhớ tới ứng dụng và họ cũng dễ dàng remove vì chiếm tài nguyên và cảm thấy chật chội.</li><li>Thời gian submit và release rất lâu phải chờ đội ngũ Reviewers của App Stores duyệt qua. Điều đó có nghĩa là, khi có một bug xảy ra việc fix bug để giảm đi tác động đến khách hàng là không thể thực hiện ngay được. Điều đó cũng có nghĩa là chi phí dành cho việc testing cũng trở nên lớn hơn.</li></ol><h3 id="Hybird-App"><a href="#Hybird-App" class="headerlink" title="Hybird App"></a>Hybird App</h3><h4 id="Uu-diem-2"><a href="#Uu-diem-2" class="headerlink" title="Ưu điểm"></a>Ưu điểm</h4><ol><li>Viết một lần và chạy trên nhiều nền tảng, chúng ta chỉ code một lần cái app của mình, phần còn lại cái cầu nối (Bridge Software) lo.</li><li>Với các ứng dụng có porting từ web, hoặc có tính năng giống như mobile web, liên quan nặng về xử lý dữ liệu thì loại ứng dụng này là phù hợp.</li><li>Có thể chạy background, offline.</li></ol><h4 id="Nhuoc-diem-2"><a href="#Nhuoc-diem-2" class="headerlink" title="Nhược điểm"></a>Nhược điểm</h4><ol><li>Peformance kém: Có thể nói các ứng dụng Hybird gặp phải các vấn đề lớn về performance, bởi phải chạy trên một bridge app được viết tất cả trong 1 cồng kềnh, chúng thật sự gần như là một một trình duyệt di động mở rộng (Extended Mobile Browser) có bổ sung thêm các API.</li><li>Khó customize và optimize phù hợp với chức năng của mình, đặc biệt cho các ứng dụng như Game.</li><li>Các API vẫn chưa hỗ trợ đầy đủ để theo kịp sự phát triển của phần cứng và sự đa dạng của các nền tảng khác nhau.</li></ol><h3 id="PhoneGap-Nen-tang-noi-bat-cua-Hybird-App"><a href="#PhoneGap-Nen-tang-noi-bat-cua-Hybird-App" class="headerlink" title="PhoneGap - Nền tảng nổi bật của Hybird App"></a>PhoneGap - Nền tảng nổi bật của Hybird App</h3><p><a href="https://phonegap.com/" target="_blank" rel="noopener">PhoneGap</a> là một đại diện tiêu biểu cho nhóm nền tảng Hybird App, được phát triển bởi <a href="http://www.adobe.com/" target="_blank" rel="noopener">Adobe System</a> dùng để phát triển mobile app, nhưng không đòi hỏi user có kiến thức về Andriod, hay iOS, mà chỉ cần kiến thức về web như hình minh họa bên dưới.</p><p><img src="http://docplayer.org/docs-images/24/4232987/images/25-0.png" alt=""></p><h2 id="Bang-thong-ke-so-sanh-cac-cong-nghe"><a href="#Bang-thong-ke-so-sanh-cac-cong-nghe" class="headerlink" title="Bảng thống kê so sánh các công nghệ"></a>Bảng thống kê so sánh các công nghệ</h2><p>Nếu bạn cảm thấy quá mệt và loạn vì đống chữ ở phía trên, thì có thể nhìn vào bảng tổng hợp bên dưới để có cái nhìn nhanh về so sánh tương đối giữa các nền tảng này.</p><p><img src="http://nuvemconsulting.com/wp-content/uploads/2013/05/file-295453993.jpg" alt=""></p><h2 id="Su-ra-doi-cua-PWA"><a href="#Su-ra-doi-cua-PWA" class="headerlink" title="Sự ra đời của PWA"></a>Sự ra đời của PWA</h2><h4 id="Cac-thong-ke-thu-vi"><a href="#Cac-thong-ke-thu-vi" class="headerlink" title="Các thống kê thú vị"></a>Các thống kê thú vị</h4><ol><li>5 tỉ thiết bị đã và sẵn sàng cho nền tảng web.</li><li>Có hơn 1 tỉ trang web trên thế giới.</li><li>Tới quý 2, 2015, cho thấy 90% thời gian người sử dụng điện thoại ở Mỹ là tương tác với Native App, chỉ có 10% sử dụng browser. Nhưng điều này không có nghĩa là bạn cần phải xây dựng một Native App cho ứng dụng của mình, vì phần lớn thời gian người sử dụng bỏ ra lại cho những App phổ biến như Facebook, Twitter, YouTube, Instagram v.v..</li><li>Người dùng download app dễ dàng nhưng cũng dễ dàng gỡ bỏ app, bởi phần lớn các app được chạy các chương trình marketing hấp dẫn để thu hút người cài đặt, nhưng vì điện thoại rất dễ bị hết dung lượng nên user sẽ gỡ những app mà họ ít khi dùng đến. 65% người sử dụng điện thoại không hề download ứng dụng mới hàng tháng. Điều này có nghĩa là chi phí cài đặt ứng dụng ngày càng cao.</li><li>Tất cả những điều này cho thấy mobile web vẫn còn rất quan trọng. Nhưng lại có thêm một nghịch lý là, trong khi tỉ lệ người dùng mobile web so với tỉ lệ người dùng desktop web tăng trưởng rất nhanh và cao, nhưng tỉ lệ convert thành giá trị như đơn hàng lại rất thấp. Một phần trong đó là vì các ứng dụng web hiện tại không được optimize cho mobile cho các vấn đề về UX/UI và trong điều kiện mạng chậm.</li><li>Một website có thể tải về dưới 3s người sử dụng sẽ happy với website của bạn, và có nghĩa là tỉ lệ rời bỏ thấp, đơn hàng sẽ tăng lên. Còn từ 3s-10s thì người sử dụng chỉ có thể nói là sẽ cố kiên nhẫn. Quá 10s người sử dụng sẽ rời bỏ trang web của bạn vì họ nghĩ nó không hoạt động.</li></ol><p><img src="https://infographic.statista.com/normal/chartoftheday_3821_mobile_device_usage_n.jpg" alt=""></p><blockquote><p>(Phần viết này dựa trên sự suy đoán của tác giả) Sự phát triển mạnh mẽ của Native App, thách thức sự thống trị của Google Search Engine, nếu người sử dụng dùng app, họ sẽ không còn cần vào Google để tìm kiếm thông tin nữa và sản phẩm cốt lõi của Google sẽ gặp rất nhiều vấn đề, mà có thể kể đến là sự sụt giảm người sử dụng do các thông tin không còn đưa lên web để có thể crawl được, và kèm theo đó là sự sụt giảm về khả năng kiếm tiền của Google. Tác giả nghĩ đó cũng có thể là lý do khiến Google phải đẩy mạnh phát triển PWA để hỗ trợ cho nền tảng web, níu giữ người sử dụng ở lại nền tảng này.</p></blockquote><p>Có thể nói, sự ra đời của Hybird App là một cộc mốc khá quan trọng thể hiện rõ cách nhìn và sự mong mỏi của các nhà phát triển trong việc optimize chi phí. Và câu hỏi đặt ra là, tại sao các trình duyệt bản thân nó không nên là một Bridge Software cung cấp các API để các ứng dụng web có thể truy cập vào phần cứng của thiết bị. Do vậy, chúng ta có thể tin rằng, điều đó sắp tới sẽ là một phần trong những thay đổi, bổ sung của các browsers.</p><p>Các tiêu chí về <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a>:</p><ul><li>Progressive - Hoạt động cho tất cả mọi người, không liên quan tới việc lựa chọn browser, bởi chúng được xây dựng với những sự cải tiến như là một nguyên lý cốt lõi.</li><li>Responsive - Có thể hoạt động tốt trên mọi thiết bị như desktop, mobile, tablet, với mọi kích thước màn hình.</li><li>Connectivity independent - Có thể hoạt động ngay cả khi offline (dựa trên Service Worker) và hoạt động tốt trong điều kiện network chậm.</li><li>App-like - Sử dụng app-shell để cung cấp các chức năng định hướng và sự tương tác giống như app.</li><li>Fresh - Luôn update phiên bản mới nhất (dựa trên Service Worker)</li><li>Safe - Tất cả phải được phục vụ thông qua HTTPS để tránh bị nghe lén và đảm bảo nội dung không bị giả mạo.</li><li>Discoverable - Có để được nhận dạng như là ứng dụng (dựa trên Service Worker, và W3C manifests ) và cho phép Search Engines có thể tìm thấy.</li><li>Re-engageable - Tạo ra sự tương tác lại ứng dụng dễ dàng thông qua các chức năng chẳng hạn như Push Notification.</li><li>Installable - Có thể Add to Homescreen để giữ lại ứng dụng trên màn hình.</li><li>Linkable - Dễ dàng share, chia sẽ điều mình muốn đến với người khác thông qua URL mà không cần phải cài đặt.</li></ul><blockquote><p>10 tiêu chí nhận dạng một ứng dụng được xem là PWA với sự giúp đỡ của Google Translator.</p></blockquote><p>PWA không hoàn toàn là một giải pháp về công nghệ, mà là một tập các tiêu chuẩn được định nghĩa cho các ứng dụng web hướng theo nhằm mang lại trải nghiệm tốt nhất cho người dùng, với sự hỗ trợ của browser về các API có liên quan như Service Worker, Push Notification v.v…</p><p>Điều ý nghĩa của một ứng dụng theo tiêu chuẩn của PWA không phải là nó có thể tận dụng được sức mạnh từ phần cứng của người sử dụng hay không, như cách mà nhiều lập trình viên lần đầu nghe qua quan tâm, mà là nó giúp cho các ứng dụng web trở nên tốt hơn từ góc độ performance đến những cải tiến về UX/UI.</p><p>Để hiểu được PWA là gì, cần phải nhìn về Native App và Web App ở góc độ ưu nhược điểm của từng đối tượng. Và khi nhìn thấy nhược điểm của chúng, cũng là lý do đầy đủ để chúng ta hiểu PWA ra đời như là một giải pháp hoàn thiện cả hai nền tảng này bằng cách mang ưu điểm của cả hai.</p><h4 id="Nghien-cuu-moi-ve-trai-nghiem-nguoi-su-dung"><a href="#Nghien-cuu-moi-ve-trai-nghiem-nguoi-su-dung" class="headerlink" title="Nghiên cứu mới về trải nghiệm người sử dụng"></a>Nghiên cứu mới về trải nghiệm người sử dụng</h4><p>Ngày trước, một website tốt là một website có <strong>Page Speed</strong> cao, trong thời gian vài giây nó phải tải toàn bộ nội dung về thiết bị, tiếp theo đó trình duyệt hiển thị giao diện, cuối cùng là cho người dùng tương tác. Điều đó có nghĩa là, trong thời gian tải toàn bộ nội dung của website, người dùng chỉ nhìn thấy một màn hình trắng tinh khôi, hoặc là một dấu hiện đang tải trang với animation nhàm chán và có thể họ sẽ bắt đầu thấy mất kiên nhẫn trong các điều kiện như network bị chậm.</p><p>Theo nghiên cứu của Google, một website tốt phải cho một sự trải nghiệm liên tục không gián đoạn, nhằm thuyết phục người dùng tin rằng là nó đang hoạt động để họ không rời bỏ đi chỗ khác, cũng như không cảm thấy phải khó chịu khi phải chờ đợi.</p><p>Sự tải trang, các nội dung cần thiết để có thể tạo ra một ứng dụng hoàn chỉnh có thể chia thành nhiều giai đoạn phù hợp với nhu cầu và khả năng tương tác của người dùng. Ứng dụng không cần phải load tất cả mọi thứ lên sẵn trong khi có rất nhiều tính năng người dùng có thể chưa cần dùng tới hoặc là ít khi dùng tới.</p><h4 id="Cac-giai-doan-trai-nghiem-co-ban"><a href="#Cac-giai-doan-trai-nghiem-co-ban" class="headerlink" title="Các giai đoạn trải nghiệm cơ bản"></a>Các giai đoạn trải nghiệm cơ bản</h4><ol><li><strong>First Paint</strong> - Định nghĩa việc website cần tải thật nhanh để người sử dụng thấy nó hoạt động chứ không phải là một màn hình trắng tinh vô hồn.</li><li><strong>First Meaningful Paint</strong> - Định nghĩa về việc website cần phải hiển thị những điều có ý nghĩa để người sử dụng có thể nhìn thấy ví dụ như những hình ảnh banner, video v.v… gọi là <strong>Hero Element</strong></li><li><strong>Time to Interactive</strong> - Định nghĩa về cách làm thế nào người sử dụng có thể bắt đầu tương tác với website của bạn cũng trong thời gian nhanh nhất, có thể thao tác với điều họ cần, mà không cần phải đợi tải hoàn toàn trang, ví dụ như họ đã có thể bắt đầu với search box, hoặc xem video, đi vào sản phẩm chi tiết.</li></ol><blockquote><p>Google đã phát triển một công cụ gọi là Lighthouse để phân tích website của bạn theo các tiêu chí này.</p></blockquote><h2 id="Tai-sao-PWA-co-the-tro-thanh-tuong-lai-cua-nganh-web"><a href="#Tai-sao-PWA-co-the-tro-thanh-tuong-lai-cua-nganh-web" class="headerlink" title="Tại sao PWA có thể trở thành tương lai của ngành web"></a>Tại sao PWA có thể trở thành tương lai của ngành web</h2><p>Như đã nói, việc mobile web vẫn có những thế mạnh mà không thể bị đánh bại, bởi những giá trị cốt lõi chưa thể bị thay thế trong tương lai gần như đã đề cập vốn rất chi tiết ở trên.</p><p>Nhưng với sự thay đổi nhanh về phần cứng cũng như về hệ sinh thái các phần mềm từ hệ điều hành cũng như Native App trên các thiết bị di động, đòi hỏi các ứng dụng web phải thay đổi để thích nghi với sự kỳ vọng cao hơn về nhu cầu trải nghiệm của người dùng. Rất khó để chấp nhận với một thiết bị đẹp, cấu hình mạnh mẽ, và đắt đỏ lại tải một trang web lên có vẻ chậm chạp, hiệu năng kém và thiết kế cẩu thả.</p><p>Những lý luận và tư tưởng của PWA là tuyệt vời và có thể áp dụng để làm cho sản phẩm của chúng ta tốt hơn, điều đó hứa hẹn một thị trường hấp dẫn về các website đã có cần phải thay đổi và các website mới cần phải được build trên các nền tảng công nghệ mới và tư tưởng mới.</p><p>Nếu chúng ta không nắm bắt đúng thời điểm, đúng điểm rơi của công nghệ, chúng ta sẽ bị bỏ lại phía sau, lạc hậu và khi phần lớn khách hàng quay lưng đi với mình thì đã muộn. Có rất nhiều bài học về điều này như của Nokia, của Yahoo… có thể sự đổ vỡ của các tập đoàn khổng lồ này đến từ nhiều nguyên nhân, nhưng trong số đó chắc chắn phần lớn từ các sản phẩm thiếu sáng tạo, kém hấp dẫn đối với người tiêu dùng, thậm chí không muốn nói là lạc hậu trong tồn tại của nó so với đối thủ.</p><h2 id="Nhung-kho-khan-khi-ung-dung-PWA"><a href="#Nhung-kho-khan-khi-ung-dung-PWA" class="headerlink" title="Những khó khăn khi ứng dụng PWA"></a>Những khó khăn khi ứng dụng PWA</h2><ol><li>Nguồn nhân lực về PWA hiện tại đang thiếu hụt mà chưa dễ dàng được khoả lấp trong thời gian ngắn sắp tới, do các công nghệ và nền tảng vẫn còn mới. Tác giả sẽ viết một bài sắp tới để nói sâu hơn về vấn đề này cũng như giải pháp khắc phục cho các tổ chức muốn phát triển sản phẩm theo tư tưởng của PWA.</li><li>Sự thiếu hỗ trợ đầy đủ từ các nhà phát triển chẳng hạn như từ Apple, nhưng điều này đang và sẽ sớm được khắc phục, bạn có thể tham khảo ở đây để thấy tính năng này <a href="https://webkit.org/status/#?search=service%20workers" target="_blank" rel="noopener">đang được phát triển</a> bởi Apple</li><li>Những lo ngại của cộng đồng developer do cách hiểu sai là nó không thể sử dụng được phần cứng của thiết bị.</li><li>Các lãnh đạo, cấp trên vẫn chưa thấy được nhiều value để chuyển đổi từ những website truyền thống sang nền tảng mới. Nhưng các con số và thống kê cũng cho thấy việc chuyển đổi theo tương tưởng và mô hình công nghệ mới hơn là điều không thể nào né tránh.</li></ol><h2 id="Nhung-nha-phat-trien-tieu-bieu"><a href="#Nhung-nha-phat-trien-tieu-bieu" class="headerlink" title="Những nhà phát triển tiêu biểu"></a>Những nhà phát triển tiêu biểu</h2><p>Bạn có thể nhìn qua các website này để tìm hiểu các website đó hoạt động như thế nào để tham khảo cho website của mình.</p><p>Ở nước ngoài có thể kể đến:</p><ol><li>Flipkart - Ấn độ, xem chi tiết <a href="https://developers.google.com/web/showcase/2016/flipkart" target="_blank" rel="noopener">tại đây</a>.</li></ol><ul><li>Với phiên bản PWA mobile thời gian user ở lại website là: 3.5 phút so với phiên bản mobile cũ không PWA là 70s.</li><li>3x tăng thời gian user ở lại website.</li><li>40% tỉ lệ tương tác tăng thêm.</li><li>70% nhiều hơn CR đến từ Add to Homescreen.</li><li>3x giảm tỉ lệ sử dụng dữ liệu.</li></ul><ol><li>Aliexpress - Trung Quốc, xem chi tiết <a href="https://developers.google.com/web/showcase/2016/aliexpress" target="_blank" rel="noopener">tại đây</a>.</li></ol><ul><li>104% CR cho người dùng mới tất cả trình duyệt; 82% CR tăng thêm trên iOS</li><li>2X số trang mà người sử dụng xem thêm với mỗi session cho tất cả trình duyệt.</li><li>74% tăng thêm thời gian người sử dụng với mỗi session tất cả trình duyệt.</li></ul><p>Ở thị trường Việt Nam, các site nổi tiếng có thể kể đến:</p><ol><li>Tiki - đã released version PWA vào mùa hè 2017</li><li>Sendo - dự kiến released vào cuối năm 2017</li></ol><h2 id="PWA-duoi-goc-nhin-cho-doanh-nghiep"><a href="#PWA-duoi-goc-nhin-cho-doanh-nghiep" class="headerlink" title="PWA dưới góc nhìn cho doanh nghiệp"></a>PWA dưới góc nhìn cho doanh nghiệp</h2><p>Đối với doanh nghiệp điều quan trọng là giảm chi phí, tăng doanh thu và lợi nhuận thì việc phát triển một ứng dụng PWA với các phương pháp luận và các giải pháp mới khiến cho chi phí phát triển dự án xét về lâu dài càng giảm, và lợi nhuận ngày càng được tối đa hoá.</p><p>Sản phẩm theo nền tảng này được thừa hưởng một hệ thống lý luận và phương pháp lập trình tốt để dễ dàng scale, maintain, improve, và thay đổi trong tương lai. Điều đó có nghĩa là các tính năng được thêm mới dễ dàng với chi phí thấp, rủi ro về lỗi được giảm.</p><h2 id="PWA-duoi-goc-nhin-cho-lap-trinh-vien"><a href="#PWA-duoi-goc-nhin-cho-lap-trinh-vien" class="headerlink" title="PWA dưới góc nhìn cho lập trình viên"></a>PWA dưới góc nhìn cho lập trình viên</h2><h3 id="Ban-can-hoc-gi-lam-gi"><a href="#Ban-can-hoc-gi-lam-gi" class="headerlink" title="Bạn cần học gì, làm gì."></a>Bạn cần học gì, làm gì.</h3><p>Nếu bạn chưa từng biết làm thế nào thì đọc bài viết này <a href="https://www.linkedin.com/pulse/l%C3%A0m-th%E1%BA%BF-n%C3%A0o-%C4%91%E1%BB%83-tr%E1%BB%9F-th%C3%A0nh-m%E1%BB%99t-frontend-developer-phu-tran-phong/" target="_blank" rel="noopener">Làm thế nào để trở thành Frontend developer</a></p><h3 id="Kha-nang-scale-cua-du-an-PWA"><a href="#Kha-nang-scale-cua-du-an-PWA" class="headerlink" title="Khả năng scale của dự án PWA"></a>Khả năng scale của dự án PWA</h3><p>PWA đã được đưa ra từ cách đây từ vài năm trước, nhưng đây là điểm rơi để các ứng dụng có thể chuyển đổi sang nền tảng này, do sự phát triển vô cùng mạnh mẽ của các framework, thư viện được xây dựng và phát triển trên nền Nodejs, đáng để kể đến như React, Angular, Polymer dựa trên trên các công cụ bundle như Grunt, Gulp, Webpack… Chúng khiến cho việc tổ chức, tối ưu code được dễ dàng, tổ chức team hiệu quả và tránh được các rủi ro. Khả năng scale của dự án là dễ dàng cả về yếu tố con người, vật lý, và chi phí.</p><p>Không có sự hỗ trợ về các công cụ phát triển phần mềm từ hệ sinh thái của Nodejs, rất khó để có thể ứng dụng được các triết lý mà PWA đã đề ra, vì có thể dự án sẽ có chi phí phát triển cực lớn và rủi ro phát sinh theo nó là không thể nào dự đoán hay kiểm soát.</p><h3 id="Tu-goc-nhin-outsourcing"><a href="#Tu-goc-nhin-outsourcing" class="headerlink" title="Từ góc nhìn outsourcing"></a>Từ góc nhìn outsourcing</h3><ol><li>Làm thế nào để decoupling các task chức năng của ứng dụng, sao cho khi có nhiều tính năng thì có thể đẩy người vào, vì nếu không thể decoupling được tính năng, các chức năng được code độc lập, mỗi người làm một phần thì khi càng push người vào, thì sự phát triển của dự án chưa chắc tương xứng.</li><li>Giúp debug dễ dàng, khi có vấn đề gì xảy ra không được như mong đợi.</li><li>Dự án dễ testable, có thể viết chức năng test một cách dễ dàng.</li></ol><h3 id="Tu-goc-nhin-production"><a href="#Tu-goc-nhin-production" class="headerlink" title="Từ góc nhìn production"></a>Từ góc nhìn production</h3><ol><li>Bao gồm cả các yếu tố của outsourcing.</li><li>Điều quan tâm là việc tính scale như thế nào khi có sự tăng tưởng của người sử dụng, đặc biệt là khi các phương pháp xây dựng một ứng dụng PWA phụ thuộc nặng nào Nodejs ngay cả khi bạn dùng framework/library nào đi chăng nữa thì các công cụ để xây dựng và tổ chức source code, build source code, debug sẽ cần đến gulp/grunt hoặc là Webpack. Nodejs về hiệu năng có thể được mọi người nghĩ là kém so với các ngôn ngữ khác và khó scale. Nhưng cái nhìn đơn giản đó là chưa đúng. Chúng ta cần nhìn về ứng dụng với các công nghệ được build stack với nhau như: Nginx, Redis, Database v.v… một ứng dụng chạy nhanh cần một thiết kế tốt, có thể hoạt động ổn định và scale theo chiều ngang chứ không nên được thiết kế chỉ dựa vào ngôn ngữ.</li><li>Ở góc nhìn production, các kỳ vọng về sản phẩm, về chi phí, thời gian, con người đều có đủ phương pháp lý luận và tổ chức để có thể đi đến việc dễ dàng kiểm soát và đạt được các tiêu chí đề ra.</li></ol><blockquote><p>Ở một bài viết tiếp theo, chúng ta sẽ xem xét một ứng dụng open source PWA mẫu, để tìm hiểu các công nghệ được stacked như thế nào.</p></blockquote><h2 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h2><p>Qua một bài viết khá dài, tác giả hi vọng sẽ mang lại cho bạn một trong những bài viết đầy đủ và chi tiết nhằm cung cấp các view nhìn mang giá trị tham khảo về một trong những nền tảng rất hứa hẹn thay đổi tương lai của ngành lập trình và phát triển ứng dụng web.</p><p>Bài viết sẽ không tránh khỏi các thiếu sót mang tính chủ quan của tác giả và cả các sai sót về các thông số, cách trình bày, bố cục, lỗi chính tả… nên hi vọng bạn đọc thông cảm bỏ qua.</p><p>Nếu bạn có bất kì câu hỏi hay phản biện bổ sung nào vui lòng để lại comment bên dưới.</p><p>Rất cảm ơn quý đọc giả và các bạn vì đã kiên nhẫn đọc hết bài viết.</p><h2 id="Tham-khao"><a href="#Tham-khao" class="headerlink" title="Tham khảo"></a>Tham khảo</h2><ol><li><a href="https://addyosmani.com/blog/getting-started-with-progressive-web-apps/" target="_blank" rel="noopener">Getting started with Progressive Web Apps</a></li><li><a href="https://www.linkedin.com/pulse/mobile-web-hay-app-bui-quang-tinh-tu/" target="_blank" rel="noopener">Mobile Web Hay Mobile App?</a></li><li><a href="https://medium.com/dev-channel/why-progressive-web-apps-vs-native-is-the-wrong-question-to-ask-fb8555addcbb" target="_blank" rel="noopener">Why “Progressive Web Apps vs. native” is the wrong question to ask</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tom-tat&quot;&gt;&lt;a href=&quot;#Tom-tat&quot; class=&quot;headerlink&quot; title=&quot;Tóm tắt&quot;&gt;&lt;/a&gt;Tóm tắt&lt;/h2&gt;&lt;p&gt;“Mobile first” hay “Think mobile” là một trong những hot trend mà chúng ta thường được nghe gần đây, khi mà số lượng thiết bị di động và số lượng người sử dụng các thiết bị di động ngày càng lớn. Nhưng think như thế nào cho đúng là điều cần làm rõ. Bài viết này sẽ cung cấp thông tin cho bạn về cách tư duy theo &lt;a href=&quot;https://en.wikipedia.org/wiki/Progressive_web_app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PWA&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PWA không hoàn toàn là một giải pháp về công nghệ, mà là một tập các tiêu chuẩn được định nghĩa cho các ứng dụng web hướng theo, nhằm mang lại trải nghiệm tốt nhất cho người dùng, với sự hỗ trợ của browser về các API có liên quan như Service Worker, Push Notification v.v…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="pwa" scheme="http://nth-blogs.herokuapp.com/tags/pwa/"/>
    
      <category term="web" scheme="http://nth-blogs.herokuapp.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Biên niên sử về bố cục trong trang web</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Bien-nien-su-ve-bo-cuc-trong-trang-web.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Bien-nien-su-ve-bo-cuc-trong-trang-web.html</id>
    <published>2018-04-25T10:57:00.000Z</published>
    <updated>2018-04-25T11:06:06.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h2><p>Bài viết bàn về công nghệ các lập trình viên web áp dụng để thiết kế bố cục trong trang web (website layout) - qua các thời kỳ: table, float, block-inline, flexbox, JS, Twitter Bootstrap và grid.</p><a id="more"></a><h2 id="Thoi-truoc-2010"><a href="#Thoi-truoc-2010" class="headerlink" title="Thời trước 2010"></a>Thời trước 2010</h2><p>Đây là thời kỳ tối cổ với công nghệ website, người ta hầu như ít đầu tư giao diện web, việc dựng bố cục, xương sườn cho trang web sử dụng thẻ HTML <code>&lt;table&gt;</code> là chính.</p><p><img src="http://namluu.com/wp-content/uploads/2018/01/yyou-1.jpg" alt=""><br><img src="http://namluu.com/wp-content/uploads/2018/01/yyou-2.jpg" alt=""></p><p>Layout Table rất đơn giản, với 1 table 3 rows, 1 row làm header, 1 row làm content, cái cuối làm footer.<br><strong>Nhược điểm</strong> của layout table là: rất khó khăn khi tái cấu trúc lại bố cục, khó khăn khi thiết kế vì table mục đích chính là biểu diễn dữ liệu. Các cột có chiều rộng cố định không linh hoạt, nan giải khi xử lý trên nhiều kích thước màn hình.<br>Năm 2012, khi mới ra trường, công việc đầu tiên của tôi là đập bỏ và thay thế các layout dạng table. Tới nay thì không còn ai nghĩ tới việc việc thiết kế layout bằng table nữa.<br>Tuy nhiên còn rất nhiều tài liệu trong các trường đại học chưa được cập nhật nên đừng ngạc nhiên khi bạn được dạy thiết kế layout bằng thẻ table nhé.</p><h2 id="Tu-2012-Float-lat-do-Table"><a href="#Tu-2012-Float-lat-do-Table" class="headerlink" title="Từ 2012 - Float lật đổ Table"></a>Từ 2012 - Float lật đổ Table</h2><p>Khi layout table quá bất cập thì giải pháp thay thế tuyệt vời nhất trong giai đoạn này là dùng các thẻ HTML <div> kết hợp với CSS property: Float.<br>Các khối <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block/" target="_blank" rel="noopener">block</a> sẽ được tách ra và “trôi” qua trái, phải, tùy theo ý muốn của lập trình viên.</div></p><p><img src="http://namluu.com/wp-content/uploads/2018/01/stopdesign-float.jpg" alt=""></p><p><strong>Ưu điểm</strong>: code sạch sẽ hơn khi dùng table, dễ thay đổi chỉnh sửa, linh hoạt trên nhiều kích thước màn hình.<br><strong>Khuyết điểm</strong>: dễ bị “vỡ trang”, nếu lập trình viên chưa làm chủ được float, chưa biết cách sử dụng các tuyệt chiêu như: clear, overflow… Lạm dụng float trên các bố cục phức tạp.</p><h2 id="2013-thoi-cua-cac-CSS-Frameworks"><a href="#2013-thoi-cua-cac-CSS-Frameworks" class="headerlink" title="2013 - thời của các CSS Frameworks"></a>2013 - thời của các CSS Frameworks</h2><p>Vào giai đoạn này, các CSS Frameworks như <a href="https://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap</a>, <a href="https://foundation.zurb.com/" target="_blank" rel="noopener">Foundation</a>,…<br>Các thư viện này hỗ trợ rất đắc lực cho các lập trình viên, dễ sử dụng, dễ thiết kế bố cục, chỉ cần gắn các class phù hợp. Bên cạnh đó chúng còn liên tục cập nhật và cải tiến không ngừng.<br>Phải nói trong thời gian đó, các CSS Frameworks nhất là Bootstrap, trở thành 1 xu hướng tới mức khi đi phỏng vấn code web, chắc ăn thế nào họ cũng hỏi bạn vài câu.<br>Để dùng tốt Bootstrap, bạn phải học các khái niệm như Grid View System, học thuộc các class thông dụng , tận dụng tối đa các chức năng có sẵn, người giỏi nhất lúc này là người code CSS, style ít nhất.<br>Hạn chế của các CSS Framework này là quá kềnh càng nếu ta không tận dụng hết chức năng (có thể khắc phục bằng bản tùy chỉnh).<br>Nâng cấp phiên bản cần sửa đổi lại tên các class (v2 xài span1 - span12, v3 xài col-, v4 xài col- ).</p><p><img src="http://namluu.com/wp-content/uploads/2018/01/frontend-development-frameworks.jpg" alt=""></p><blockquote><p>Ngày nay các CSS Frameworks như Bootstrap đã phát triển hơn khái niệm CSS rất nhiều, ta nên gọi nó với tên <strong>front-end component library</strong>, vì nó còn tích hợp nhiều thư viện JavaScript bên trong. <a href="https://usablica.github.io/front-end-frameworks/compare.html?v=2.0" target="_blank" rel="noopener">Số lượng các front-end libraries ngày nay</a></p></blockquote><h2 id="2015-CSS3-va-Flexbox"><a href="#2015-CSS3-va-Flexbox" class="headerlink" title="2015 - CSS3 và Flexbox"></a>2015 - CSS3 và Flexbox</h2><p>CSS3 đã hỗ trợ một công nghệ thiết kế layout mới, hiện đại hơn Float đó chính là Flexbox. Đúng như tên gọi flexible (linh hoạt), nó thực sự rất mạnh.</p><ul><li>Flexbox sẽ giúp bạn điều khiển được không những chiều ngang (horizontal) mà còn chiều dọc (vertical) điều mà CSS thường với position rất cứng nhắc.</li><li>Flexbox có thể điều khiển được các phần tử bên trong, giúp bạn dễ dàng biểu diễn nội dung và bố cục trên các thiết bị di động.</li></ul><p><img src="http://namluu.com/wp-content/uploads/2018/01/fl.jpg" alt=""></p><p><strong>Khuyết điểm</strong>: flexbox mạnh và mới nên bạn phải bỏ nhiều công sức để học và làm chủ được nó, khó hơn so với dùng float và Bootstrap. <a href="https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/" target="_blank" rel="noopener">Không khuyến khích dùng flexbox</a> để làm bố cục toàn trang trừ trường hợp đặc biệt, chỉ dùng để bố cục các thành phần bên trong. Lý do vì flexbox phụ thuộc vào nội dung bên trong nó, nên khi bài viết dài ngắn có thể làm “biến dạng” bố cục website của bạn, chưa kể tình huống khi web load chưa kịp.</p><blockquote><p>Kết hợp khôn ngoan là dùng grid system để làm bố cục bên ngoài, những phần bố cục cần sự linh hoạt thì dùng flexbox. Bootstrap 4 đã tích hợp flexbox vào grid view của mình, chứng tỏ sức mạnh của flexbox và không thể bàn cãi, đồng thời cho thấy cái tiện lợi khi dùng Bootstrap.</p></blockquote><h2 id="2017-CSS-Grid"><a href="#2017-CSS-Grid" class="headerlink" title="2017 - CSS Grid"></a>2017 - CSS Grid</h2><p>Grid và 1 thuộc tính CSS rất mới, ra đời 3-2017. Tuy nhiên nó đã và đang được giới công nghệ web đặc biệt quan tâm vì những tính năng ưu việt.<br>Nếu như Flexbox phân bố các phần tử theo 1 chiều duy nhất thì Grid cho phép bạn điểu khiển phần tử theo 2 chiều - ngang và dọc.<br>Vì đây là 1 công nghệ mới, nên các <a href="https://medium.com/tag/grid-layout" target="_blank" rel="noopener">tài liệu chất lượng</a> về nó hầu hết là bằng tiếng anh, sắp tới mình sẽ có bài viết về công nghệ này, mới các bạn theo dõi.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*phV0oLsKV_qVjFVv5lY1vw.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Gioi-thieu&quot;&gt;&lt;a href=&quot;#Gioi-thieu&quot; class=&quot;headerlink&quot; title=&quot;Giới thiệu&quot;&gt;&lt;/a&gt;Giới thiệu&lt;/h2&gt;&lt;p&gt;Bài viết bàn về công nghệ các lập trình viên web áp dụng để thiết kế bố cục trong trang web (website layout) - qua các thời kỳ: table, float, block-inline, flexbox, JS, Twitter Bootstrap và grid.&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://nth-blogs.herokuapp.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>[Regex] Học rồi mà như chưa học</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Regex-Hoc-roi-ma-nhu-chua-hoc.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Regex-Hoc-roi-ma-nhu-chua-hoc.html</id>
    <published>2018-04-25T10:23:00.000Z</published>
    <updated>2018-04-25T10:44:38.060Z</updated>
    
    <content type="html"><![CDATA[<p>Người dẫn lại bài này cũng được phen lao đao khi lục lọi lại mớ kiến thức cơ bản cũ. Đối với sự nghiệp của một coder thì phải được thực hiện liên tục, nếu không sẽ rất dễ quên và lóng ngóng dù chỉ là những kiến thức cơ bản nhất. Dẫu biết rằng <strong>search là sẽ thấy</strong> nhưng nhiều phen cũng không khỏi thẹn vì giải thích sai cho đàn em =)) Cũng may đọc lại được bài của cu em công ty, kiến thức lại nhanh chóng được khỏa lấp, vì kiến thức nội bộ nên xin được trích lại bài chia sẻ của em nó để đây cho đỡ quên.!</p><a id="more"></a><h3 id="1-Tua-de"><a href="#1-Tua-de" class="headerlink" title="1. Tựa đề"></a>1. Tựa đề</h3><p>Mình vẫn còn nhớ cái hôm đấy. Trong khi mãi ngắm nhìn những dòng code đến hoa mắt là lúc mặt trời đã lặn khuất sau những toà nhà đô thị từ lúc nào cũng không ai hay. Bên ngoài mưa gió bão bùng, lúc mà mình đang cố release cho cái dự án lụt không cần nước, cho nó có thể chạy được.</p><p><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/8bnypsnck8_image.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/8bnypsnck8_image.png" alt="alt text"></a></p><p>Nhưng hôm đấy cũng không nằm ngoài dự tính, nó vẫn bị fail như bao lần trước, lần này nguyên nhân là do validate dữ liệu bị sai. Lúc đấy phải cần fix luôn ngay nhưng thật không may là anh phụ trách làm phần đấy đã tốc biến về nhà lúc nào không rõ. Còn bản thân thì chả biết tí tẹo về regex cả. Mọi thứ dường như bế tắc!<br><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hfcqpp7kjz_image%20%281%29.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hfcqpp7kjz_image%20%281%29.png" alt="alt text"></a></p><p>Đã đến lúc mình phải đọc cái regex mà anh kia đã viết! Nhìn những dòng đấy chỉ có thể thốt lên “wth, mình đang đọc cái nồi gì thế này”. Thật không thể nếu bạn chả có kiến thức gì về nó cả. Thực ra mình và nhiều người hay mắc tật lúc cần làm gì là chỉ cần search từ khoá trên anh google rồi copy vào code của mình, tuy không hiểu rõ nhưng thấy nó chạy ổn thì ok. Đến lúc lỗi lên thì chả biết fix thế nào. Cũng vì nguyên nhân đấy mà mình mới biết là đang làm một cách sai lầm và mù quáng và bắt đầu học một cách đúng đắn hơn. Trước mắt là phải tìm hiểu về regex xem nó có gì mà nhìn vào đã thấy sợ rồi.<br><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/4syn5tlsc4_image%20%282%29.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/4syn5tlsc4_image%20%282%29.png" alt="alt text"></a></p><p>Bạn đã từng bao giờ rơi vào trường hợp như mình chưa, cần kiểm tra định dạng một chuỗi có hợp lệ, hoặc tìm kiếm một chuỗi nằm trong một chuỗi dài khác. Đa số các bạn cần dùng đến việc validate (xác minh) tính hợp lệ của dữ liệu đều đã từ gặp phải câu hỏi đấy.</p><blockquote><p>Nếu bạn gặp trường hợp lúc đấy giải pháp đầu tiên bạn nghĩ đến là gì nếu chưa biết gì về regex?</p></blockquote><p>Có thể nó sẽ trở thành một bài toán khá hóc búa nếu bạn chỉ xử lý thuần tuý bằng cách duyệt chuỗi mà không có công cụ và thư viện xử lý.</p><blockquote><p>Vậy regex là gì? Nó giải quyết bài toán không tưởng ở trên như thế nào? Nó cao siêu và ảo diệu ra sao?</p></blockquote><p>Chúng ta hãy cùng đi tìm hiểu nào!<br><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/86ziaz9buq_ByN7VztCMAEj-wr.png_large.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/86ziaz9buq_ByN7VztCMAEj-wr.png_large.png" alt="alt text"></a></p><h3 id="2-Gioi-thieu"><a href="#2-Gioi-thieu" class="headerlink" title="2. Giới thiệu"></a>2. Giới thiệu</h3><p>Theo anh <a href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener">wiki</a> <img src="https://assets-cdn.github.com/images/icons/emoji/trollface.png" alt=":trollface:" title=":trollface:"></p><blockquote><p>Biểu thức chính quy (regular expression, viết tắt là regexp, regex hay regxp) là một chuỗi miêu tả một bộ các chuỗi khác, theo những quy tắc cú pháp nhất định.</p></blockquote><p>Cùng điểm một chút về lịch sử nhỉ.</p><blockquote><p>Khái niệm regex được bắt đầu đưa ra từ những năm 1950 khi mà nhà toán học người Mỹ Stephen Cole Kleene chính thức mô tả một ngôn ngữ chính quy Khái niệm này được sử dụng phổ biến trong các tiện ích xử lý văn bản Unix. Sau đấy, từ những năm 1980, tồn tại các cú pháp khác nhau để tạo ra các biểu thức chính quy. Các chuẩn được đưa ra và sử dụng rộng rãi nhất là cú pháp Perl</p></blockquote><p>Mỗi lần mình tìm hiểu xong một thời gian không dùng đến, lúc quay lại đọc đều có cảm giác như mới :).</p><h3 id="3-Cong-dung"><a href="#3-Cong-dung" class="headerlink" title="3. Công dụng"></a>3. Công dụng</h3><p>Regex được sử dụng với rất nhiều mục đích khác nhau nhưng thường được dùng nhiều với mục đích đối sánh văn bản và kiểm tra cú pháp trong các trình biên tập văn bản và các tiện ích tìm kiếm và xử lý văn bản dựa trên các mẫu được quy định.</p><blockquote><p>Ví dụ: Nếu bạn muốn tạo bộ lọc và muốn loại bỏ dữ liệu là những trang web mà người khác tạo ra, bạn có thể sử dụng biểu thức chính quy để loại trừ bất kỳ dữ liệu nào từ toàn bộ dải địa chỉ IP người khác sử dụng. Giả sử các địa chỉ IP đó có dải từ 198.51.100.1 - 198.51.100.25. Thay vì nhập 25 địa chỉ IP khác nhau, bạn có thể tạo biểu thức chính quy như 198.51.100.\d* để đối sánh với toàn bộ dải địa chỉ.</p></blockquote><h3 id="4-Cach-dung"><a href="#4-Cach-dung" class="headerlink" title="4. Cách dùng"></a>4. Cách dùng</h3><h4 id="Cac-ki-tu-dac-biet"><a href="#Cac-ki-tu-dac-biet" class="headerlink" title="Các kí tự đặc biệt"></a>Các kí tự đặc biệt</h4><p>Bảng 4.1 Các kí tự đặc biệt trong biểu thức chính quy.</p><table><thead><tr><th>Kí tự (kí hiệu, cờ)</th><th>Ý nghĩa</th></tr></thead><tbody><tr><td>\</td><td>Tìm với luật dưới đây:  Một dấu gạch chéo ngược sẽ biến một kí tự thường liền kế phía sau thành một kí tự đặc biệt, tức là nó không được sử dụng để tìm kiếm thông thường nữa. Ví dụ,  trường hợp kí tự ‘b’ không có dấu gạch chéo ngược này sẽ được khớp với các kí tự ‘b’ in thường, nhưng khi nó có thêm dấu gạch chéo ngược, ‘\b’ thì nó sẽ không khớp với bất kì kí tự nào nữa, lúc này nó trở thành kí tự đặc biệt. Xem thêm phần word boundary character để biết thêm chi tiết.  Tuy nhiên nếu đứng trước một kí tự đặc biệt thì nó sẽ biến kí tự này thành một kí tự thường, tức là bạn có thể tìm kiếm kí tự đặc biệt này trong xâu chuỗi của bạn như các kí tự thường khác. Ví dụ, mẫu /a<em>/ có ‘’ là kí tự đặc biệt và mẫu này sẽ bị phụ thuộc vào kí tự này, nên được hiểu là sẽ tìm khớp  với 0 hoặc nhiều kí tự a. Nhưng, với mẫu /a</em>/ thì kí tự ‘’ lúc này được hiểu là kí tự thường nên mẫu này sẽ tìm kiếm xâu con là ‘a*’.  Đừng quên \ cũng là một kí tự đặc biệt, khi cần so khớp chính nó ta cũng phải đánh dấu nó là kí tự đặc biệt bằng cách đặt \ ở trước ().</td></tr><tr><td>^</td><td>Khớp các kí tự đứng đầu một chuỗi. Nếu có nhiều cờ này thì nó còn khớp được cả các kí tự đứng đầu của mỗi dòng (sau kí tự xuống dòng).  Ví dụ, /^A/ sẽ không khớp được với ‘A’ trong “an A” vì ‘A’ lúc này không đứng đầu chuỗi, nhưng nó sẽ khớp “An E” vì lúc này ‘A’ đã đứng đầu chuỗi. Ý nghĩa của ‘^’ sẽ thay đổi khi nó xuất hiện như một kí tự đầu tiên trong một lớp kí tự, xem phần complemented character sets để biết thêm chi tiết.</td></tr><tr><td>$</td><td>So khớp ở cuối chuỗi. Nếu gắn cờ multiline (đa dòng), nó sẽ khớp ngay trước kí tự xuống dòng.Ví dụ, /t$/ không khớp với ‘t’ trong chuỗi “eater” nhưng lại khớp trong chuỗi “eat”.</td></tr><tr><td>*</td><td>Cho phép kí tự trước nó lặp lại 0 lần hoặc nhiều lần. Tương đương với cách viết {0,}.Ví dụ, /bo*/ khớp với ‘boooo’ trong chuỗi “A ghost booooed” nhưng không khớp trong chuỗi “A birth warbled”.</td></tr><tr><td>+</td><td>Cho phép kí tự trước nó lặp lại 1 lần hoặc nhiều lần. Tương đương với cách viết {1,}.Ví dụ, /a+/ khớp với ‘a’ trong chuỗi “candy” và khớp với tất cả kí tự a liền nhau trong chuỗi “caaaaaaandy”.</td></tr><tr><td>?</td><td>Cho phép kí tự trước nó lặp lại 0 lần hoặc 1 lần duy nhất. Tương đương với cách viết {0,1}.Ví dụ, /e?le?/ khớp với ‘el’ trong chuỗi “angel” và ‘le’ trong chuỗi “angle” hay ‘l’ trong “oslo”.Nếu sử dụng kí tự này ngay sau bất kì kí tự định lượng nào trong số *,+,? hay {}, đều làm bộ định lượng “chán ăn” (dừng so khớp sau ngay khi tìm được kí tự phù hợp), trái ngược với đức tính “tham lam” vốn sẵn của chúng (khớp tất cả kí tự chúng tìm thấy). Ví dụ, áp dụng biểu mẫu /\d+/ cho “123abc” ta được “123”. Nhưng áp /\d+?/ cho chính chuỗi trên ta chỉ nhận được kết quả là “1”.Bạn có thể đọc thêm trong mục x(?=y) và x(?!y) của bảng này.</td></tr><tr><td>.</td><td>Dấu . khớp với bất kì kí tự đơn nào ngoại trừ kí tự xuống dòng.Ví dụ, /.n/ khớp với ‘an’ và ‘on’ trong chuỗi “no, an apple is on the tree”, nhưng không khớp với ‘no’.</td></tr><tr><td>(x)</td><td>Khớp ‘x’ và nhớ kết quả so khớp này, như ví dụ ở dưới. Các dấu ngoặc tròn được gọi là các dấu ngoặc có nhớ.Biểu mẫu /(foo) (bar) \1 \2/ khớp với ‘foo’ và ‘bar’ trong chuỗi “foo bar foo bar”. \1 và \2 trong mẫu khớp với 2 từ cuối.Chú ý rằng \1, \2, \n được sử dụng để so khớp các phần trong regex, nó đại diện cho nhóm so khớp đằng trước. Ví dụ: /(foo) (bar) \1 \2/ tương đương với biểu thức /(foo) (bar) foo bar/. Cú pháp $1, $2, $n còn được sử dụng trong việc thay thế các phần của một regex. Ví dụ: ‘bar foo’.replace(/(…) (…)/, ‘$2 $1’) sẽ đảo vị trí 2 từ ‘bar’ và ‘foo’ cho nhau.</td></tr><tr><td>(?:x)</td><td>Khớp ‘x’ nhưng không nhớ kết quả so khớp. Những dấu ngoặc tròn được gọi là những dấu ngoặc không nhớ, nó cho phép bạn định nghĩa những biểu thức con cho những toán tử so khớp. Xem xét biểu thức đơn giản /(?:foo){1,2}/. Nếu biểu thức này được viết là /foo{1,2}/, {1,2} sẽ chỉ áp dụng cho kí tự ‘o’ ở cuối chuỗi ‘foo’. Với những dấu ngoặc không nhớ, {1,2} sẽ áp dụng cho cả cụm ‘foo’.</td></tr><tr><td>x(?=y)</td><td>Chỉ khớp ‘x’ nếu ‘x’ theo sau bởi ‘y’.Ví dụ, /Jack(?=Sprat)/ chỉ khớp với ‘Jack’ nếu đằng sau nó là ‘Sprat’. /Jack(?=Sprat</td></tr><tr><td>x(?!y)</td><td>Chỉ khớp ‘x’ nếu ‘x’ không được theo sau bởi ‘y’.Ví dụ: /\d+(?!.)/ chỉ khớp với số không có dấu . đằng sau. Biểu thức /\d+(?!.)/.exec(“3.141”)​ cho kết quả là ‘141’ mà không phải ‘3.141’.</td></tr><tr><td>x</td><td>y</td></tr><tr><td>{n}</td><td>Kí tự đứng trước phải xuất hiện n lần. n phải là một số nguyên dương.Ví dụ, /a{2}/ không khớp với ‘a’ trong “candy”, nhưng nó khớp với tất cả kí tự ‘a’ trong “caandy”, và khớp với 2 kí tự ‘a’ đầu tiên trong “caaandy”.</td></tr><tr><td>{n,m}</td><td>Kí tự đứng trước phải xuất hiện từ n đến m lần. n và m là số nguyên dương và n &lt;= m. Nếu m bị bỏ qua, nó tương đương như ∞.Ví dụ, /a{1,3}/ không khớp bất kì kí tự nào trong “cndy”, kí tự ‘a’ trong “candy”, 2 kí tự ‘a’ đầu tiên trong “caandy”, và 3 kí tự ‘a’ đầu tiên trong “caaaaaaandy”. Lưu ý là “caaaaaaandy” chỉ khớp với 3 kí tự ‘a’ đầu tiên mặc dù chuỗi đó chứa 7 kí tự ‘a’.</td></tr><tr><td>[xyz]</td><td>Lớp kí tự. Loại mẫu này dùng để so khớp với một kí tự bất kì trong dấu ngoặc vuông, bao gồm cả escape sequences. Trong lớp kí tự, dấu chấm (.) và dấu hoa thị (*) không còn là kí tự đặc biệt nên ta không cần kí tự thoát đứng trước nó. Bạn có thể chỉ định một khoảng kí tự bằng cách sử dụng một kí tự gạch nối (-) như trong ví dụ dưới đây:Mẫu [a-d] so khớp tương tự như mẫu [abcd], khớp với ‘b’ trong “brisket” và ‘c’ trong “city”. Mẫu /[a-z.]+/ và /[\w.]+/ khớp với toàn chuỗi “test.i.ng”.</td></tr><tr><td>[^xyz]</td><td>Lớp kí tự phủ định. Khi kí tự ^ đứng đầu tiên trong dấu ngoặc vuông, nó phủ định mẫu này.Ví dụ, [^abc] tương tự như [^a-c], khớp với ‘r’ trong “brisket” và ‘h’ trong “chop” là kí tự đầu tiên không thuộc khoảng a đến c.</td></tr><tr><td>[\b]</td><td>Khớp với kí tự dịch lùi - backspace (U+0008). Bạn phải đặt trong dấu ngoặc vuông nếu muốn so khớp một kí tự dịch lùi. (Đừng nhầm lẫn với mẫu \b).</td></tr><tr><td>\b</td><td>Khớp với kí tự biên. Kí tự biên là một kí tự giả, nó khớp với vị trí mà một kí tự không được theo sau hoặc đứng trước bởi một kí tự khác. Tương đương với mẫu (^\w</td></tr><tr><td>\B</td><td>Khớp với kí tự không phải kí tự biên. Mẫu này khớp tại vị trí mà kí tự trước và kí tự sau nó cùng kiểu: hoặc cả hai là kí tự hoặc cả hai không phải là kí tự. Bắt đầu và kết thúc chuỗi không được xem là những kí tự.Ví dụ, /\B../ khớp với ‘oo’ trong “noonday”, và /y\B./ khớp với ‘ye’ trong “possibly yesterday.”</td></tr><tr><td>\cX</td><td>X là một kí tự trong khoảng A tới Z. Mẫu này khớp với một kí tự điều khiển trong một chuỗi.Ví dụ: /\cM/ khớp với control-M (U+000D) trong chuỗi.</td></tr><tr><td>\d</td><td>Khớp với một kí tự số. Tương đương với mẫu [0-9].Ví dụ: /\d/ hoặc /[0-9]/ khớp với ‘2’ trong chuỗi “B2 is the suite number.”</td></tr><tr><td>\D</td><td>Khớp với một kí tự không phải là kí tự số. Tương đương với mẫu [^0-9].Ví dụ; /\D/ hoặc /[^0-9]/ khớp với ‘B’ trong “B2 is the suite number.”</td></tr><tr><td>\f</td><td>Khớp với kí tự phân trang - form feed (U+000C).</td></tr><tr><td>\n</td><td>Khớp với kí tự xuống dòng - line feed (U+000A).</td></tr><tr><td>\r</td><td>Khớp với kí tự quay đầu dòng -  carriage return (U+000D).</td></tr><tr><td>\s</td><td>Khớp với một kí tự khoảng trắng, bao gồm trống - space, tab, phân trang - form feed, phân dòng - line feed. Tương đương với [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​\u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​\u3000].Ví dụ: /\s\w*/ khớp với ‘ bar’ trong “foo bar.”</td></tr><tr><td>\S</td><td>Khớp với một kí tự không phải khoảng trắng. Tương đương với [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​\u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000].Ví dụ: /\S\w*/ khớp với ‘foo’ trong chuỗi “foo bar.”</td></tr><tr><td>\t</td><td>Khớp với kí tự tab (U+0009).</td></tr><tr><td>\v</td><td>Khớp với kí tự vertical tab (U+000B).</td></tr><tr><td>\w</td><td>Khớp với tất cả kí tự là chữ, số và gạch dưới. Tương đương với mẫu [A-Za-z0-9_].Ví dụ, /\w/ khớp với ‘a’ trong “apple,” ‘5’ trong “$5.28,” và ‘3’ trong “3D.”</td></tr><tr><td>\W</td><td>Khớp với tất cả kí tự không phải là chữ. Tương đương với mẫu [^A-Za-z0-9_].Ví dụ, /\W/ hoặc /[^A-Za-z0-9_]/ khớp với ‘%’ trong “50%.”</td></tr><tr><td>\n</td><td>Trong đó, n là một số nguyên dương, một tham chiếu ngược tới chuỗi khớp thứ n trong biểu thức (đếm từ trái sang, bắt đầu bằng 1).Ví dụ, /apple(,)\sorange\1/ hay /apple(,)\sorange,/ khớp với ‘apple, orange,’ trong chuỗi “apple, orange, cherry, peach.”</td></tr><tr><td>\0</td><td>Khớp với kí tự NULL (U+0000). Lưu ý: không được thêm bất kì một kí tự số nào sau 0, vì \0 là một biểu diễn hệ bát phân escape sequence.</td></tr><tr><td>\xhh</td><td>Khớp với kí tự với mã code là hh (2 số trong hệ thập lục phân)</td></tr><tr><td>\uhhhh</td><td>Khớp với kí tự có mã hhhh (4 số trong hệ thập lục phân).</td></tr></tbody></table><h4 id="Lam-viec-voi-bieu-thuc-chinh-quy"><a href="#Lam-viec-voi-bieu-thuc-chinh-quy" class="headerlink" title="Làm việc với biểu thức chính quy"></a>Làm việc với biểu thức chính quy</h4><p>Bảng 4.2 Những phương thức được sử dụng trong biểu thức chính quy</p><table><thead><tr><th>Phương thức</th><th>Mô tả</th></tr></thead><tbody><tr><td>exec</td><td>Một phương thức của RegExp dùng để tìm kiếm chuỗi phù hợp với mẫu so khớp. Nó trả về một mảng chứa kết quả tìm kiếm.</td></tr><tr><td>test</td><td>Một phương thức của RegExp dùng để kiểm tra mẫu có khớp với chuỗi hay không. Nó trả về giá trị true hoặc false.</td></tr><tr><td>match</td><td>Một phương thức của chuỗi dùng để tìm kiếm chuỗi phù hợp với mẫu so khớp. Nó trả về một mảng chứa kết quả tìm kiếm hoặc null nếu không tìm thấy.</td></tr><tr><td>search</td><td>Một phương thức của chuỗi dùng để tìm kiếm chuỗi phù hợp với mẫu so khớp và trả về vị trí của chuỗi đó hoặc -1 nếu không tìm thấy.</td></tr><tr><td>replace</td><td>Một phương thức của chuỗi dùng để tìm kiếm một chuỗi theo mẫu so khớp và thay thế chuỗi con được khớp với một chuỗi thay thế.</td></tr><tr><td>split</td><td>Một phương thức của chuỗi dùng một biểu mẫu chính quy hoặc một chuỗi bất biến để ngắt chuỗi đó thành một mảng các chuỗi con.</td></tr></tbody></table><h4 id="Vi-du"><a href="#Vi-du" class="headerlink" title="Ví dụ"></a>Ví dụ</h4><p>Mã hóa escapse chuỗi người dùng nhập vào bằng một hàm thay thế đơn giản sử dụng biểu thức chính quy:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeRegExp</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.replace(<span class="regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="string">"\\$&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hh3gywbz2y_image%20%283%29.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hh3gywbz2y_image%20%283%29.png" alt="alt text"></a></p><p>Bạn có thể sử dụng trang web <a href="https://regex101.com/" target="_blank" rel="noopener">Regex101.com</a> , dán một đoạn regex vào đấy, nó sẽ giải thích đoạn mã đấy làm gì.</p><h4 id="Luu-y"><a href="#Luu-y" class="headerlink" title="Lưu ý"></a>Lưu ý</h4><p>Giữ biểu thức chính quy của bạn đơn giản. Regex đơn giản giúp người dùng khác hiểu và sửa đổi dễ dàng hơn.</p><p>Biểu thức chính quy về bản chất đối sánh rất nhiều dữ liệu: nếu bạn không chỉ định cho regex biết không nên đối sánh dữ liệu nào, chúng sẽ đối sánh với những gì bạn chỉ định và bất kỳ ký tự liền kề nào. Ví dụ: site đối sánh với mysite, yoursite, theirsite, parasite–bất kỳ chuỗi có chứa “site”. Nếu bạn cần thực hiện đối sánh cụ thể, hãy thiết lập cấu trúc regex của bạn cho phù hợp. Ví dụ: nếu bạn chỉ cần đối sánh với chuỗi “site”, hãy thiết lập cấu trúc regex của bạn để “site” vừa là bắt đầu chuỗi vừa là kết thúc chuỗi: ^site$.</p><h3 id="5-Tham-khao"><a href="#5-Tham-khao" class="headerlink" title="5. Tham khảo"></a>5. Tham khảo</h3><p><a href="https://support.google.com/analytics/answer/1034324?hl=vi&amp;ref_topic=1034375%0Ahttps://developer.mozilla.org/vi/docs/Web/JavaScript/Guide/Regular_Expressions%0Ahttps://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener">Analytics Trợ giúp</a><br>Nguồn N.T.Giáp - Kaopiz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Người dẫn lại bài này cũng được phen lao đao khi lục lọi lại mớ kiến thức cơ bản cũ. Đối với sự nghiệp của một coder thì phải được thực hiện liên tục, nếu không sẽ rất dễ quên và lóng ngóng dù chỉ là những kiến thức cơ bản nhất. Dẫu biết rằng &lt;strong&gt;search là sẽ thấy&lt;/strong&gt; nhưng nhiều phen cũng không khỏi thẹn vì giải thích sai cho đàn em =)) Cũng may đọc lại được bài của cu em công ty, kiến thức lại nhanh chóng được khỏa lấp, vì kiến thức nội bộ nên xin được trích lại bài chia sẻ của em nó để đây cho đỡ quên.!&lt;/p&gt;
    
    </summary>
    
    
      <category term="regex" scheme="http://nth-blogs.herokuapp.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Học Regular Expression và cuộc đời bạn sẽ bớt khổ</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Hoc-Regular-Expression-va-cuoc-doi-ban-se-bot-kho.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Hoc-Regular-Expression-va-cuoc-doi-ban-se-bot-kho.html</id>
    <published>2018-04-25T08:27:00.000Z</published>
    <updated>2018-04-30T08:06:42.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Regular-Expression-RegEx-a-Nghe-quen-quen"><a href="#Regular-Expression-RegEx-a-Nghe-quen-quen" class="headerlink" title="Regular Expression (RegEx) à? Nghe quen quen."></a>Regular Expression (RegEx) à? Nghe quen quen.</h2><a id="more"></a><blockquote><p><em><strong>Đã bao giờ bạn ở vào các tính huống sau đây?</strong></em></p></blockquote><h3 id="Ban-can-xu-ly-validate-kiem-tra-tinh-hop-le-cac-truong-du-lieu-nhap-vao-o-Text"><a href="#Ban-can-xu-ly-validate-kiem-tra-tinh-hop-le-cac-truong-du-lieu-nhap-vao-o-Text" class="headerlink" title="Bạn cần xử lý validate (kiểm tra tính hợp lệ) các trường dữ liệu nhập vào ô Text"></a>Bạn cần xử lý validate (kiểm tra tính hợp lệ) các trường dữ liệu nhập vào ô Text</h3><p><img src="https://images.viblo.asia/1e7a1bf4-eb56-428c-b731-eb53970ffba9.png" alt=""></p><h3 id="Ban-can-copy-va-paste-rat-nhieu-text-tu-cho-nay-sang-cho-kia"><a href="#Ban-can-copy-va-paste-rat-nhieu-text-tu-cho-nay-sang-cho-kia" class="headerlink" title="Bạn cần copy và paste rất nhiều text từ chỗ này sang chỗ kia"></a>Bạn cần copy và paste rất nhiều text từ chỗ này sang chỗ kia</h3><p>Ví dụ từ XML sang C#</p><p><img src="https://images.viblo.asia/4b3505d9-e466-427e-8ee4-e7327ec16d12.jpg" alt=""></p><p>hoặc CSV, Excel sang C#</p><p><img src="https://images.viblo.asia/2a11aac3-36a4-43d9-b3de-b75f36b41ab8.jpg" alt=""></p><h3 id="Tim-kiem-mot-chuoi-nam-o-nhieu-dong-trong-Visual-Studio-hoac-Notepad"><a href="#Tim-kiem-mot-chuoi-nam-o-nhieu-dong-trong-Visual-Studio-hoac-Notepad" class="headerlink" title="Tìm kiếm một chuỗi nằm ở nhiều dòng trong Visual Studio hoặc Notepad++"></a>Tìm kiếm một chuỗi nằm ở nhiều dòng trong Visual Studio hoặc Notepad++</h3><p>Ví dụ tôi cần tìm và xóa bỏ (replace all) các comment như thế này ở code cũ.</p><p><img src="https://images.viblo.asia/b77a555f-0486-4fef-bf15-637fa70473c9.jpg" alt=""></p><h3 id="Ban-can-boc-tach-du-lieu-cua-mot-trang-web"><a href="#Ban-can-boc-tach-du-lieu-cua-mot-trang-web" class="headerlink" title="Bạn cần bóc tách dữ liệu của một trang web."></a>Bạn cần bóc tách dữ liệu của một trang web.</h3><p>Ví dụ extract (crawling) tách lấy dữ liệu từ một trang web để lưu lại vào cơ sở dữ liệu của bạn</p><p><img src="https://images.viblo.asia/17aa1867-6f02-47b0-9884-6467e44a660d.jpg" alt=""></p><h3 id="Con-ac-mong-doc-mot-chuoi-string-tu-DB-va-co-gang-chuyen-doi-no-sang-DateTime"><a href="#Con-ac-mong-doc-mot-chuoi-string-tu-DB-va-co-gang-chuyen-doi-no-sang-DateTime" class="headerlink" title="Cơn ác mộng đọc một chuỗi string từ DB và cố gắng chuyển đổi nó sang DateTime"></a>Cơn ác mộng đọc một chuỗi string từ DB và cố gắng chuyển đổi nó sang DateTime</h3><p>Chuỗi ngày tháng lưu vào CSDL rất đa dạng. Rất khó để dùng hàm DateTime.TryParse() để tự động chuyển đổi một chuỗi thành Datetime ngon lành cành đào.</p><p><img src="https://images.viblo.asia/c40a1d3d-4f01-4f24-8749-119034a8f1ab.png" alt=""></p><h3 id="Tim-kiem-mot-chuoi-luu-chuoi-do-lai-va-lay-chuoi-da-luu-chen-vao-cho-nao-do"><a href="#Tim-kiem-mot-chuoi-luu-chuoi-do-lai-va-lay-chuoi-da-luu-chen-vao-cho-nao-do" class="headerlink" title="Tìm kiếm một chuỗi, lưu chuỗi đó lại và lấy chuỗi đã lưu chèn vào chỗ nào đó"></a>Tìm kiếm một chuỗi, lưu chuỗi đó lại và lấy chuỗi đã lưu chèn vào chỗ nào đó</h3><p>Hay nói cách khác, ta cần thay một chuỗi bằng một chuỗi khác, trong chuỗi mới đó lại có chứa cả chuỗi vừa bị thay thế. Như ví dụ dưới đây sẽ cho các bạn thấy. Ta cần tìm ra ClassName, nhưng không phải thay thế ClassName đó bằng Class khác mà ta sẽ nhét nó vào 2 vị trí thay vì chỉ có 1 vị trí như hiện tại.</p><p><img src="https://images.viblo.asia/7a2da882-3374-4327-ae69-57e43cadbc6a.jpg" alt=""></p><p><img src="https://images.viblo.asia/cc4d46c2-54d1-44a5-9dea-a2c6de67837e.gif" alt=""></p><h1 id="Vay-RegEx-co-the-giup-gi-cho-chung-ta-trong-cac-truong-hop-tren"><a href="#Vay-RegEx-co-the-giup-gi-cho-chung-ta-trong-cac-truong-hop-tren" class="headerlink" title="Vậy RegEx có thể giúp gì cho chúng ta trong các trường hợp trên?"></a>Vậy RegEx có thể giúp gì cho chúng ta trong các trường hợp trên?</h1><p>Regular Expression sinh ra là để giúp cho cuộc đời của bạn bớt khổ. Hãy tưởng tượng xem bạn phải nai lưng ra copy-paste bao nhiêu code. Bạn hoàn toàn có thể download các tool về để replace giúp bạn. Nhưng bạn cần bao nhiêu tool cho đủ đây.</p><p>Thay vào đó, bạn hãy thử học RegEx. Bộ cú pháp này sẽ giúp cho bạn thao tác với chuỗi như dao chém chuối. Như ta thấy các ví dụ bên trên, tất cả đều là XỬ LÝ CHUỖI ví dụ Cut Copy Paste hoặc Replace chuỗi. RegEx là ngôn ngữ giúp xử lý chuỗi rất mạnh.</p><p>RegEx không phải là một ngôn ngữ lập trình. Nó chỉ là một BỘ CÚ PHÁP dùng để bắt chuỗi. Nhưng nó cực kỳ phổ biến và bất kỳ ngôn ngữ lập trình nào cũng hỗ trợ. Nó có cả trăm ngàn ứng dụng và công cụ ăn theo.</p><p>Hãy lần lượt xem qua các ví dụ sau đây để học cách sử dụng Regular Expression nhé.</p><h1 id="Bat-dau-su-dung-Regular-Expression"><a href="#Bat-dau-su-dung-Regular-Expression" class="headerlink" title="Bắt đầu sử dụng Regular Expression"></a>Bắt đầu sử dụng Regular Expression</h1><p>Để bắt đầu sử dụng và học cách dùng RegEx, mình hay dùng trang web <a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a>. Giao diện như sau:</p><p><img src="https://images.viblo.asia/df2fd4af-d0f0-4e92-bd56-5570086484d3.gif" alt=""></p><h3 id="Truoc-het-cac-ban-hay-doc-qua-mot-luot-cac-quy-tac-bat-chuoi-matching-don-gian-nhat-cua-RegEx"><a href="#Truoc-het-cac-ban-hay-doc-qua-mot-luot-cac-quy-tac-bat-chuoi-matching-don-gian-nhat-cua-RegEx" class="headerlink" title="Trước hết các bạn hãy đọc qua một lượt các quy tắc bắt chuỗi (matching) đơn giản nhất của RegEx"></a>Trước hết các bạn hãy đọc qua một lượt các quy tắc bắt chuỗi (matching) đơn giản nhất của RegEx</h3><ul><li>[xyz] Tìm và so sánh tất cả ký tự nằm trong dấu ngoặc vuông và trùng khớp với 1 ký tự trong dấu ngoặc vuông. Ví dụ: [31] sẽ trùng khớp với <strong>3</strong> hoặc <strong>1</strong>, [0123456789] sẽ trùng khớp với bất kỳ một ký tự nào trong khoảng từ <strong>0</strong> đến <strong>9</strong>.</li><li>[a-z] So sánh và trùng khớp với một ký tự nằm trong khoảng chỉ định. Ví dụ: [a-z] sẽ trùng khớp với một ký tự trong khoảng từ a đến z nằm trong chuỗi cần test. [0-9] sẽ trùng khớp với bất kỳ một ký tự nào trong khoảng từ <strong>0</strong> đến <strong>9</strong>.</li><li>[^xyz] So sánh và không trùng khớp với những ký tự nằm trong khoảng chỉ định. Dấu ^ (dấu mũ) nằm trong dấu ngoặc vuông là một dấu phủ định. Ví dụ: [^a-z] sẽ không trùng khớp với tất cả các ký tự nằm trong khoảng từ <strong>a</strong> đến <strong>z</strong>.</li><li>^ Trùng khớp với phần đầu của chuỗi đích. Ví dụ: ^a sẽ trùng khớp với chữ <strong>a</strong> trong chuỗi <strong>abc</strong>, ^\w+ sẽ trùng khớp với chữ đầu tiên – chữ <strong>“the”</strong> của chuỗi <strong>“The quick brown fox jumps over the lazy dog”</strong>.</li><li>$ Trùng khớp với phần cuối của chuỗi đích. Ví dụ: c$ sẽ trùng khớp với chữ c trong chuỗi abc, \w+$ sẽ trùng khớp với chữ cuối – chữ <strong>“dog”</strong> của chuỗi <strong>“The quick brown fox jumps over the lazy dog”</strong>.</li><li><ul><li>Trùng khớp với 1 hoặc nhiều lần ký tự đứng trước nó. Ví dụ \d+ sẽ chỉ trùng với chuỗi có từ 1 con số trở lên.</li></ul></li><li><ul><li>Trùng khớp với 0 hoặc nhiều lần ký tự đứng trước nó. Ví dụ \d* sẽ trùng với chuỗi có chứa 1 chữ số hoặc k có chữ số nào cũng đc.</li></ul></li><li>? Trùng khớp với 0 hoặc 1 lần ký tự đứng trước nó. Tương tự như <em> nhưng nó lại chỉ nhân lên 1 lần. </em> thì nhân lên nhiều lần.</li><li>. Trùng khớp với 1 ký tự đơn bất kỳ ngoại trừ ký tự ngắt dòng (line-break) và cũng không lấy được ký tự có dấu (unicode). Ví dụ: . sẽ trùng khớp với ký tự <strong>a hoặc b hoặc c</strong> trong chuỗi <strong>abc</strong>. Nhưng . sẽ không bắt được các chữ ă hoặc ê.</li><li>x{n} Trùng khớp đúng với n lần ký tự đứng trước nó. n là một số không âm. Ví dụ \d{2} sẽ bắt đc các số có 2 chữ số đứng liền nhau.</li><li>x{n,} Trùng khớp với ít nhất n lần ký tự đứng trước nó. n là một số không âm.Ví dụ \d{2,} sẽ bắt đc các số có từ 2 chữ số trở lên đứng liền nhau.</li><li>x{n,m} Trùng khớp với ít nhất n lần và nhiều nhất là m lần ký tự đứng trước nó. n và m là một số không âm và n &lt;= m. Ví dụ: a{1,3} sẽ khớp với <strong>hah, haah, haaah</strong> nhưng không khớp với <strong>haaaah</strong>.</li><li>x|y Trùng khớp với x hoặc y. Ví dụ: slow|fast sẽ khớp với chữ <strong>slow</strong> hoặc <strong>fast</strong> trong chuỗi đích.</li><li>\b Trùng khớp với toàn bộ ký tự đứng trước nó. Ví dụ: hello\b sẽ trùng khớp với toàn bộ từ hello trong chuỗi <strong>hello world</strong> nhưng sẽ không khớp với chuỗi <strong>helloworld</strong>.</li><li>\B Ngược lại với \b, \B sẽ không khớp với toàn bộ mà chỉ 1 phần ký tự đứng trước nó. Ví dụ: hello\B sẽ trùng khớp với chữ hello trong chuỗi <strong>helloworld</strong> nhưng sẽ không khớp với chuỗi <strong>hello world</strong>.</li><li>\d Trùng khớp 1 ký tự số (digit).</li><li>\D Trùng khớp 1ký tự không phải số (non-digit).</li><li>\s Trùng khớp 1 ký tự khoảng trắng (whitespace) bao gồm khoảng trắng tạo ra bởi phím Tab.</li><li>\S Trùng khớp với 1 ký tự không phải là khoảng trắng (non-whitespace).</li><li>\w Trùng khớp với các ký tự là từ (word) bao gồm dấu _ (underscore) và chữ số.</li><li>\W Trùng khớp với các ký tự không phải là từ (non-word). Ví dụ: \W sẽ khớp với ký tự % trong chuỗi <strong>“100%”</strong>.</li><li>\uxxxx Trùng khớp với 1 ký tự unicode. Ví dụ: \u00FA sẽ khớp với ký tự <strong>“ú”</strong>, \u00F9 sẽ khớp với ký tự <strong>“ù”</strong>.</li><li>\pL Trùng khớp với một ký tự Unicode bất kỳ ngoại trừ dấu cách. Đây chính là cú pháp viết hoàn hảo hơn của dấu .,Ví dụ \pL+ sẽ lấy được chuỗi truyền, thuyết trong chuỗi <strong>“truyền thuyết”</strong>.</li></ul><p><img src="https://images.viblo.asia/bb00ea2c-cb41-4090-bce0-1b7ce1893791.gif" alt=""></p><p>Đừng lo, hãy xem qua các ví dụ từ từ rồi bạn sẽ hiểu</p><h2 id="Vi-du-don-gian"><a href="#Vi-du-don-gian" class="headerlink" title="Ví dụ đơn giản"></a>Ví dụ đơn giản</h2><h3 id="Tim-chuoi-so"><a href="#Tim-chuoi-so" class="headerlink" title="Tìm chuỗi số"></a>Tìm chuỗi số</h3><p><img src="https://images.viblo.asia/f2448336-4cd5-4ceb-a147-f617228b24ed.gif" alt=""></p><h3 id="Tim-ngay-thang"><a href="#Tim-ngay-thang" class="headerlink" title="Tìm ngày tháng"></a>Tìm ngày tháng</h3><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/Regex_CaptureDate.gif" alt=""></p><p>Link demo: <a href="https://regex101.com/r/3dNzjU/1" target="_blank" rel="noopener">https://regex101.com/r/3dNzjU/1</a></p><h3 id="Tim-ngay-thang-chinh-xac"><a href="#Tim-ngay-thang-chinh-xac" class="headerlink" title="Tìm ngày tháng chính xác"></a>Tìm ngày tháng chính xác</h3><p>Trong ví dụ trên thì ta thấy có chuỗi <strong>“60/60/2018”</strong> cũng được coi là ngày tháng, như thế là không chính xác. Ta hãy viết lại cho chuẩn.</p><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_CaptureDate_Advance.gif" alt=""></p><p>Link demo: <a href="https://regex101.com/r/3dNzjU/2" target="_blank" rel="noopener">https://regex101.com/r/3dNzjU/2</a></p><h2 id="Cach-“tom-lay”-string-can-tim-dua-vao-Group"><a href="#Cach-“tom-lay”-string-can-tim-dua-vao-Group" class="headerlink" title="Cách “tóm lấy” string cần tìm đưa vào Group"></a>Cách “tóm lấy” string cần tìm đưa vào Group</h2><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_MatchGroup.gif" alt=""></p><h2 id="Cach-tao-ra-code-de-dung-RegEx-trong-cac-ngon-ngu-lap-trinh"><a href="#Cach-tao-ra-code-de-dung-RegEx-trong-cac-ngon-ngu-lap-trinh" class="headerlink" title="Cách tạo ra code để dùng RegEx trong các ngôn ngữ lập trình"></a>Cách tạo ra code để dùng RegEx trong các ngôn ngữ lập trình</h2><p>RegEx là bộ cú pháp, tuy nhiên để áp dụng nó vào các ngôn ngữ lập trình lại phải tuân thủ theo các thư viện và quy tắc lập trình để lấy ra được các Group đã capture (thu) được. Hãy xem các tạo code ngay sau đây:</p><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_GenerateCode.gif" alt=""></p><h2 id="Cach-bat-lay-chuoi-bat-ky"><a href="#Cach-bat-lay-chuoi-bat-ky" class="headerlink" title="Cách bắt lấy chuỗi bất kỳ"></a>Cách bắt lấy chuỗi bất kỳ</h2><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_CaptureString.gif" alt=""><br> Link demo: <a href="https://regex101.com/r/3dNzjU/3" target="_blank" rel="noopener">https://regex101.com/r/3dNzjU/3</a></p><h1 id="Su-dung-RegEx-trong-thuc-te"><a href="#Su-dung-RegEx-trong-thuc-te" class="headerlink" title="Sử dụng RegEx trong thực tế"></a>Sử dụng RegEx trong thực tế</h1><p>Trong thực tế RegEx có thể được gõ trực tiếp ở bất kỳ trình Editor nào. Ví dụ mình hay dùng Notepad++, hoặc Visual Studio</p><p><img src="https://github.com/chungminhtu/regex_practices/blob/master/Nodepad++KepChuoi.gif?raw=true" alt=""></p><h1 id="Tham-khao"><a href="#Tham-khao" class="headerlink" title="Tham khảo"></a>Tham khảo</h1><p>Tham khảo thêm toàn bộ cú pháp RegEx bằng tiếng Anh tại: <a href="https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/" target="_blank" rel="noopener">https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/</a></p><blockquote><p>Một số công cụ test RegEx Online</p></blockquote><ul><li><a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a></li><li><a href="http://regexr.com/" target="_blank" rel="noopener">http://regexr.com/</a></li><li><a href="http://www.regexpal.com/" target="_blank" rel="noopener">http://www.regexpal.com/</a></li><li><a href="http://regexper.com/" target="_blank" rel="noopener">http://regexper.com/</a></li></ul><h1 id="Bai-tap-ve-nha"><a href="#Bai-tap-ve-nha" class="headerlink" title="Bài tập về nhà"></a>Bài tập về nhà</h1><p>Bạn ngứa tay muốn thử học RegEx ngay và luôn cho nóng. Vậy hãy thử thực hành bằng một số bài tập từ dễ đến khó sau đây nhé.</p><p><em><strong>Bài tập nhập môn:</strong></em></p><ol><li>Lấy ra các chữ có chữ test trong chuỗi sau: <strong>“that tested test is testing the tester’s tests”</strong></li><li>Lấy ra các số điện thoại trong chuỗi sau: <strong> “p:444-555-1234 f:246.555.8888 m:1235554567”</strong></li><li>Lấy ra các mã màu RGB trong chuỗi sau: <strong>“#FF006C ABC 99AAB7FF 0xF0F73611”</strong></li><li>Lấy ra các chữ có 4 ký tự trong chuỗi sau: <strong>“drink beer, it’s very nice!”</strong></li><li>Lấy ra tên file trong chuỗi URL sau: <strong>“<a href="http://rapidshare.com/asd/asd/File.avi.html%E2%80%9D" target="_blank" rel="noopener">rapidshare.com/asd/asd/File.avi.html”</a></strong></li></ol><blockquote><p>Đáp án ở phần comment nhé.</p></blockquote><p><em><strong>Bài tập dành cho học sinh giỏi (lớp học thêm)</strong></em></p><ol><li>Tìm cách lấy các URL trong chuỗi HTML sau:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Lorem gyum</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Betrag<span class="tag">&lt;/<span class="name">b</span>&gt;</span> von </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.vektor.de"</span>&gt;</span>Vektoren<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">(Länge eines Vektors)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"gcfa.com"</span>&gt;</span>GCFA<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//cdn.com/test.js"</span>&gt;</span>CDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">ist das Maß einer Menge sozu…</span><br></pre></td></tr></table></figure><ol><li>Tìm cách loại bỏ toàn bộ COMMENT trong đoạn code sau:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sample = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">var</span> my_string = <span class="string">"Hello World!"</span>; </span><br><span class="line"><span class="comment">// This is a comment! </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_stuff</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="comment">// This is another comment! </span></span><br><span class="line">alert(‘somethings’);</span><br><span class="line"><span class="comment">/* this is a multiline</span></span><br><span class="line"><span class="comment">     comment */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Tìm cách lấy ra chuỗi tiếng Nhật trong chuỗi sau: “</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a demo story　前に来た時は北側からで、当時の光景はいまでも思い出せる。And it is true.</span><br></pre></td></tr></table></figure><ol><li>Lấy ra những file ảnh và độ phân giải của ảnh từ chuỗi sau:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.bash_profile</span><br><span class="line">workspace.doc</span><br><span class="line">img0912.jpg (1280x720)</span><br><span class="line">updated_img0912.png (1024x768)</span><br><span class="line">documentation.html</span><br><span class="line">favicon.gif </span><br><span class="line">img0912.jpg (1920x1600)</span><br><span class="line">access.htaccess</span><br></pre></td></tr></table></figure><ol><li>Đọc nội dung từ trang tin rss sau: <a href="http://rss.cnn.com/rss/edition.rss" target="_blank" rel="noopener">http://rss.cnn.com/rss/edition.rss</a> Lấy ra các Tiêu đề, ngày giờ đăng, nội dung tin vắn</li></ol><blockquote><p>Đáp án các bạn post vào phần comment và cùng trao đổi nhé.</p></blockquote><p>Nếu các bài tập trên đây vẫn chưa đủ, các bạn hãy làm thêm các bài tập tại trang <a href="https://regexone.com" target="_blank" rel="noopener">https://regexone.com</a> nhé, rất nhiều ví dụ hay.</p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Hi vọng bài viết nhỏ này đã giúp bạn học được cú pháp viết RegEx và áp dụng vào công việc thường ngày. Mình dùng Regex rất nhiều và nó là trợ thủ đắc lực trong quá trình code.</p><p>Các bạn thì sao? bạn đã dùng Regex vào những việc gì? Hãy kể tên bên dưới comment để mình cùng học hỏi với nhé.</p><p>Thanks các bạn đã đọc!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Regular-Expression-RegEx-a-Nghe-quen-quen&quot;&gt;&lt;a href=&quot;#Regular-Expression-RegEx-a-Nghe-quen-quen&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression (RegEx) à? Nghe quen quen.&quot;&gt;&lt;/a&gt;Regular Expression (RegEx) à? Nghe quen quen.&lt;/h2&gt;
    
    </summary>
    
    
      <category term="regex" scheme="http://nth-blogs.herokuapp.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Tìm hiểu Higher-Order Function (HOF) và Currying qua một số ví dụ</title>
    <link href="http://nth-blogs.herokuapp.com/2018/04/Tim-hieu-Higher-Order-Function-HOF-va-Currying-qua-mot-so-vi-du-3.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/04/Tim-hieu-Higher-Order-Function-HOF-va-Currying-qua-mot-so-vi-du-3.html</id>
    <published>2018-04-03T04:20:00.000Z</published>
    <updated>2018-05-18T01:02:21.693Z</updated>
    
    <content type="html"><![CDATA[<p>HOF và Currying là hai kỹ thuật không khó, thậm chí có thể bạn đang dùng nó hàng ngày mà không để ý. Cùng tìm hiểu chúng thông qua một số ví dụ.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Tôi cho rằng một kỹ sư phần mềm pro không phải là người viết ra những dòng code đánh đố người đọc hay đồng nghiệp, mà là người viết những dòng code mà khi người khác đọc nó liền cảm thấy trong sáng, dễ hiểu, dễ bảo trì.</p><p>Cũng như sự tiến hóa của con người, khi mà “ăn no, ăn sạch rồi ăn ngon”, thì coding cũng có slogan tương tự: <a href="http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast" target="_blank" rel="noopener">“chạy được, chạy đúng, sau cùng là chạy nhanh”</a>.<br>Vậy, sau khi chạy được và chạy đúng rồi, chúng ta nên suy nghĩ xem ngoài việc có thể chạy nhanh hơn ko, thì đoạn code này đã sáng sủa chưa? Nếu bị/được sửa thì có dễ ko?</p><p>HOF và Currying là 2 trong số ti tỉ kỹ thuật nhằm giúp chúng ta, những lập trình viên huyền thoại, đạt được tiêu chí trên.<br><a id="more"></a><br>Trước khi đi vào khái niệm cụ thể, chúng ta cùng xem ví dụ dưới đây:</p><h3 id="Vi-du-1"><a href="#Vi-du-1" class="headerlink" title="Ví dụ 1"></a>Ví dụ 1</h3><p>Nhóc con nhà bạn nhờ bạn tìm những số tự nhiên khác 0 nhỏ hơn 20 và là số lẻ.<br>Là một ông bố mẫu mực với niềm kiêu hãnh nhiều năm kinh nghiệm fixed hàng trăm bug nhỏ và <del>tạo ra</del> hàng tá bug to, bạn muốn viết một chương trình hoành tráng để lấy le với con mình. Ok, you win!.<br>Dưới đây chắc hẳn là đoạn code đầu tiên xuất hiện trong đầu:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickOddNumbers</span>(<span class="params">maximum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pickOddNumbers(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>Nhưng đời không bao giờ là mơ, khi hôm sau nhóc con lại mếu máo: “Cô giáo cho thêm bài: Tìm những số tự nhiên khác 0 nhỏ hơn 20 mà nếu gấp 3 số đó rồi từ đi 2 thì thu được số chẵn.”.<br>Bố chiều cô luôn. Vậy là bạn lại cho ra phiên bản mới:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickSpecialNumbers</span>(<span class="params">maximum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (((i * <span class="number">3</span>) - <span class="number">2</span>) % <span class="number">2</span> === <span class="number">0</span>) result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pickSpecialNumbers(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>Đời vẫn ko như mơ khi cô giáo lại cho thêm bài tập: “Tìm những số tự nhiên khác 0 nhỏ hơn 20 mà nếu lấy phần dư số đó cho 9 rồi cộng thêm 2 thì thu số lẻ.”<br>Ơ cô giáo từ từ, để bố em sửa function bên trên đã :))))</p><p>Cứ như vậy, mỗi lần cô giáo cho thêm yêu cầu là bạn lại phải sửa phiên bản cũ hoặc cho ra một bản mới, tuy yêu cầu khác nhau nhưng xử lý cơ bản là giống nhau, chỉ khác ở đoạn xử lý điều kiện cho số được chọn.<br>Và bạn chợt nhớ tới HOF, một ứng cử viên sáng giá cho việc làm đoạn code trên sạch hơn, gọn hơn, dễ sửa hơn.</p><h3 id="Dinh-nghia-HOF"><a href="#Dinh-nghia-HOF" class="headerlink" title="Định nghĩa HOF"></a>Định nghĩa HOF</h3><p>Theo <a href="https://en.wikipedia.org/wiki/Higher-order_function" target="_blank" rel="noopener">wikipedia</a> thì:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A higher-order <span class="function"><span class="keyword">function</span> (<span class="params">also functional, functional form or functor</span>) <span class="title">is</span> <span class="title">a</span> <span class="title">function</span> <span class="title">that</span> <span class="title">does</span> <span class="title">at</span> <span class="title">least</span> <span class="title">one</span> <span class="title">of</span> <span class="title">the</span> <span class="title">following</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">・<span class="title">takes</span> <span class="title">one</span> <span class="title">or</span> <span class="title">more</span> <span class="title">functions</span> <span class="title">as</span> <span class="title">arguments</span>,</span></span><br><span class="line"><span class="function">・<span class="title">returns</span> <span class="title">a</span> <span class="title">function</span> <span class="title">as</span> <span class="title">its</span> <span class="title">result</span>.</span></span><br></pre></td></tr></table></figure><p>Vietsub:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOF là một <span class="function"><span class="keyword">function</span> <span class="title">m</span>à <span class="title">cho</span> <span class="title">ph</span>é<span class="title">p</span> <span class="title">th</span>ự<span class="title">c</span> <span class="title">hi</span>ệ<span class="title">n</span> í<span class="title">t</span> <span class="title">nh</span>ấ<span class="title">t</span> 1 <span class="title">trong</span> 2 <span class="title">kh</span>ả <span class="title">n</span>ă<span class="title">ng</span> <span class="title">sau</span>:</span></span><br><span class="line"><span class="function">・<span class="title">Nh</span>ậ<span class="title">n</span> <span class="title">v</span>à<span class="title">o</span> <span class="title">m</span>ộ<span class="title">t</span> <span class="title">ho</span>ặ<span class="title">c</span> <span class="title">nhi</span>ề<span class="title">u</span> <span class="title">function</span> <span class="title">nh</span>ư <span class="title">l</span>à <span class="title">tham</span> <span class="title">s</span>ố, <span class="title">ho</span>ặ<span class="title">c</span>/<span class="title">v</span>à</span></span><br><span class="line"><span class="function">・<span class="title">Tr</span>ả <span class="title">v</span>ề <span class="title">k</span>ế<span class="title">t</span> <span class="title">qu</span>ả <span class="title">l</span>à <span class="title">m</span>ộ<span class="title">t</span> <span class="title">function</span>.</span></span><br></pre></td></tr></table></figure><p><em>// Bạn có thể thấy có rất nhiều ngôn ngữ hỗ trợ HOF ở link wiki trên. Đến Java còn hỗ trợ nữa là :v</em></p><p>Trăm nghe không bằng một thấy, trăm thấy không bằng một sờ, và chúng ta lại cùng sờ với ví dụ bên trên.<br>Lần này là bản nâng cấp có giá trị về mặt học thuật, vì được áp dụng HOF vào cơ mà :)))</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickNumbers</span>(<span class="params">maximum, pickingCondition</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pickingCondition(i)) result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số lẻ</span></span><br><span class="line">pickNumbers(<span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số mà gấp 3 số đó rồi trừ đi 2 thu số chẵn</span></span><br><span class="line">pickNumbers(<span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((number * <span class="number">3</span>) - <span class="number">2</span>) % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Với việc đưa HOF vào function bên trên, giờ thì cô giáo thích gì cũng chiều được nhé,<br>chỉ cần thay đổi function kiểm tra điều kiện vào thôi, ko cần phải copy thành function mới nữa.</p><h3 id="Dinh-nghia-Currying"><a href="#Dinh-nghia-Currying" class="headerlink" title="Định nghĩa Currying"></a>Định nghĩa Currying</h3><p>Lại theo <a href="https://en.wikipedia.org/wiki/Currying" target="_blank" rel="noopener">wikipedia</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Currying is the technique <span class="keyword">of</span> translating the evaluation <span class="keyword">of</span> a <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">that</span> <span class="title">takes</span> <span class="title">multiple</span> <span class="title">arguments</span> (<span class="params">or a tuple of arguments</span>)</span></span><br><span class="line"><span class="function"><span class="title">into</span> <span class="title">evaluating</span> <span class="title">a</span> <span class="title">sequence</span> <span class="title">of</span> <span class="title">functions</span>, <span class="title">each</span> <span class="title">with</span> <span class="title">a</span> <span class="title">single</span> <span class="title">argument</span>.</span></span><br></pre></td></tr></table></figure><p>Vietsub:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Currying là kỹ thuật mà cho phép chuyển đổi một <span class="function"><span class="keyword">function</span> <span class="title">v</span>ớ<span class="title">i</span> <span class="title">nhi</span>ề<span class="title">u</span> <span class="title">tham</span> <span class="title">s</span>ố</span></span><br><span class="line"><span class="function"><span class="title">th</span>à<span class="title">nh</span> <span class="title">nh</span>ữ<span class="title">ng</span> <span class="title">functions</span> <span class="title">li</span>ê<span class="title">n</span> <span class="title">ti</span>ế<span class="title">p</span> <span class="title">c</span>ó <span class="title">m</span>ộ<span class="title">t</span> <span class="title">tham</span> <span class="title">s</span>ố.</span></span><br><span class="line"><span class="function">// <span class="title">V</span>í <span class="title">d</span>ụ <span class="title">f</span>(<span class="params">a,b,c</span>) <span class="title">c</span>ó <span class="title">th</span>ể đượ<span class="title">c</span> <span class="title">convert</span> <span class="title">th</span>à<span class="title">nh</span> <span class="title">g</span>(<span class="params">a</span>)<span class="title">h</span>(<span class="params">b, c</span>) <span class="title">hay</span> <span class="title">g</span>(<span class="params">a</span>)<span class="title">h</span>(<span class="params">b</span>)<span class="title">k</span>(<span class="params">c</span>), <span class="title">th</span>ậ<span class="title">m</span> <span class="title">ch</span>í <span class="title">l</span>à đổ<span class="title">i</span> <span class="title">th</span>ứ <span class="title">t</span>ự <span class="title">c</span>ủ<span class="title">a</span> <span class="title">c</span>á<span class="title">c</span> <span class="title">function</span> <span class="title">t</span>ươ<span class="title">ng</span> ứ<span class="title">ng</span>...</span></span><br></pre></td></tr></table></figure><p>Vậy dễ dàng nhận thấy Currying là một trường hợp của HOF, vì nó thỏa mãn điều kiện trả về kết quả là một function.</p><p>Cụ thể áp dụng cho ví dụ trên, có thể viết thành dạng sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickNumbers</span>(<span class="params">maximum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">pickingCondition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pickingCondition(i)) result.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số lẻ</span></span><br><span class="line">pickNumbers(<span class="number">20</span>)(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số mà gấp 3 số đó rồi trừ đi 2 thu số chẵn</span></span><br><span class="line">pickNumbers(<span class="number">20</span>)(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (number * <span class="number">3</span> - <span class="number">2</span>) % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>So sánh ví dụ áp dụng Currying này với ví dụ sử dụng HOF ở trên, rõ ràng là ta chưa thấy sự ưu việt của Currying so với HOF, thậm chí còn thấy hơi rườm rà nữa.<br>Tuy nhiên, hãy cùng xem xét ví dụ dưới đây:</p><h3 id="Vi-du-2"><a href="#Vi-du-2" class="headerlink" title="Ví dụ 2"></a>Ví dụ 2</h3><p>Viết một function lấy ra giá trị của một key của object, được chọn ra từ một mảng các objects với điều kiện. Đơn giản vậy thôi, nên việc cài đặt cũng có vẻ là đơn giản.</p><p>Với HOF:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">objects, key, pickingCondition</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> object = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pickingCondition(objects[i])) &#123;</span><br><span class="line">      object = objects[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> object ? object[key] : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Mỗi khi gọi function với key khác nhau, hẳn là sẽ phải gọi kiểu như vầy:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> valueByKey1 = getValue(objects, <span class="string">'key1'</span>, pickingCondition);</span><br><span class="line"><span class="keyword">var</span> valueByKey2 = getValue(objects, <span class="string">'key2'</span>, pickingCondition);</span><br></pre></td></tr></table></figure><p>Nếu như coi key là <strong>biết trước</strong>, chỉ thay đổi objects và pickingCondition, thì việc áp dụng Currying là hợp lý:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">objects, pickingCondition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> object = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pickingCondition(objects[i])) &#123;</span><br><span class="line">        object = objects[i];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object ? object[key] : <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrap getValue thành những function ngắn hơn với tên sáng nghĩa:</span></span><br><span class="line"><span class="keyword">var</span> getValueByKey1 = getValue(<span class="string">'key1'</span>);</span><br><span class="line"><span class="keyword">var</span> getValueByKey2 = getValue(<span class="string">'key2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sử dụng:</span></span><br><span class="line"><span class="keyword">var</span> valueByKey1 = getValueByKey1(objects, pickingCondition);</span><br><span class="line"><span class="keyword">var</span> valueByKey2 = getValueByKey2(objects, pickingCondition);</span><br></pre></td></tr></table></figure><p>Khá là gọn gàng.</p><p><em>// Ngoài lề: Nếu bạn làm việc với ReactJs, hẳn bạn đã biết tới thuật ngữ Higher-Order Component, hay các selectors mà redux-form cung cấp, thì chúng đều áp dụng kỹ thuật Currying này, cũng như HOF.</em></p><p>Dưới đây là một vài ví dụ cho thấy tác dụng tốt của Currying:</p><h3 id="Vi-du-3"><a href="#Vi-du-3" class="headerlink" title="Ví dụ 3"></a>Ví dụ 3</h3><p>Viết function để kiểm tra độ dài của một xâu s có vượt quá n hay ko.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cách 1: Không dùng Currying</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLengthOver</span>(<span class="params">s, n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.length &gt; n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cách 2: Có Currying</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLengthOver</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.length &gt; n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Giả sử cả 2 cách viết trên được sử dụng cho việc validate của một field trên form, với n = 10 thì có sự khác biệt như sau:</p><p>Với cách 1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> validate=&#123;value =&gt; isLengthOver(value, <span class="number">10</span>)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>Với cách 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> validate=&#123;isLengthOver(<span class="number">10</span>)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>Quá khác bọt!</p><h3 id="Vi-du-4"><a href="#Vi-du-4" class="headerlink" title="Ví dụ 4"></a>Ví dụ 4</h3><p>Viết function hiển thị tên group mà một nhân viên đang làm việc, với:</p><p>Input:</p><ul><li>employeeGroupId là id của group mà nhân viên đang làm việc,</li><li>Mảng chứa toàn bộ groups có trong công ty.</li></ul><p>Điều kiện rằng buộc:</p><ul><li>Một group luôn có id khác null,</li><li>Nếu groupB là group con của groupA, thì groupB sẽ có parentGroupId là id của groupA. Group không là con khi parentGroupId của nó là null,</li><li>Không có quan hệ vòng tròn. (Kiểu: groupA là con groupB, groupB là con groupC, groupC là con groupA)</li></ul><p>Output:</p><ul><li>Full path của group mà nhân viên đang làm việc, phân cách bởi dấu /. Ví dụ Group A / Group B / Group C</li></ul><p>Chắc hẳn bạn sẽ nghĩ tới cách dùng vòng lặp, kiểm tra chừng nào còn tìm thấy group có id bằng parentGroupId. Và tôi cũng nghĩ vậy :D</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getGroupFullPathName = <span class="function">(<span class="params">groups, employeeGroupId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> groupNames = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> group = groups.find(<span class="function"><span class="params">grp</span> =&gt;</span> grp.id === employeeGroupId);</span><br><span class="line">  <span class="keyword">while</span> (group) &#123;</span><br><span class="line">    groupNames.unshift(group.name);</span><br><span class="line">    group = groups.find(<span class="function"><span class="params">grp</span> =&gt;</span> grp.id === group.parentGroupId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> groupNames.join(<span class="string">'/'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Nhưng đoạn code trên vẫn chưa ngon, do vi phạm rule <a href="https://eslint.org/docs/rules/no-loop-func" target="_blank" rel="noopener">Don’t make functions within a loop</a> của ESLint.<br>Cụ thể: Mỗi khi vòng while được chạy thì groups.find(grp =&gt; grp.id === group.parentGroupId) lại sinh ra một anonymous function, chính là grp =&gt; grp.id === group.parentGroupId.</p><p>Cách khắc phục là ta viết một currying bên ngoài vòng while là được:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getGroupFullPathName = <span class="function">(<span class="params">groups, employeeGroupId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> groupNames = [];</span><br><span class="line">  <span class="keyword">const</span> condition = <span class="function"><span class="params">parentGroupId</span> =&gt;</span> group =&gt; group.id === parentGroupId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> group = groups.find(<span class="function"><span class="params">grp</span> =&gt;</span> grp.id === employeeGroupId);</span><br><span class="line">  <span class="keyword">while</span> (group) &#123;</span><br><span class="line">    groupNames.unshift(group.name);</span><br><span class="line">    group = groups.find(condition(group.parentDepartmentId));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> groupNames.join(<span class="string">'/'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận:"></a>Kết luận:</h3><p>Bài quá dài.</p><p><em>// Nếu mấy ví dụ trên dùng cú pháp của es6 và dùng các api của Array thì sẽ ngắn hơn nhiều, nhưng lại khó nhìn rõ đâu là function được nhận vào/trả ra, nên các bạn chịu khó đọc với cú pháp cơ bản vậy :D</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HOF và Currying là hai kỹ thuật không khó, thậm chí có thể bạn đang dùng nó hàng ngày mà không để ý. Cùng tìm hiểu chúng thông qua một số ví dụ.&lt;/p&gt;
&lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;Tôi cho rằng một kỹ sư phần mềm pro không phải là người viết ra những dòng code đánh đố người đọc hay đồng nghiệp, mà là người viết những dòng code mà khi người khác đọc nó liền cảm thấy trong sáng, dễ hiểu, dễ bảo trì.&lt;/p&gt;
&lt;p&gt;Cũng như sự tiến hóa của con người, khi mà “ăn no, ăn sạch rồi ăn ngon”, thì coding cũng có slogan tương tự: &lt;a href=&quot;http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“chạy được, chạy đúng, sau cùng là chạy nhanh”&lt;/a&gt;.&lt;br&gt;Vậy, sau khi chạy được và chạy đúng rồi, chúng ta nên suy nghĩ xem ngoài việc có thể chạy nhanh hơn ko, thì đoạn code này đã sáng sủa chưa? Nếu bị/được sửa thì có dễ ko?&lt;/p&gt;
&lt;p&gt;HOF và Currying là 2 trong số ti tỉ kỹ thuật nhằm giúp chúng ta, những lập trình viên huyền thoại, đạt được tiêu chí trên.&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
      <category term="hof" scheme="http://nth-blogs.herokuapp.com/tags/hof/"/>
    
  </entry>
  
  <entry>
    <title>CSS Grid vs Flexbox sử dụng như thế nào</title>
    <link href="http://nth-blogs.herokuapp.com/2018/03/CSS-Grid-vs-Flexbox-su-dung-nhu-the-nao.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/03/CSS-Grid-vs-Flexbox-su-dung-nhu-the-nao.html</id>
    <published>2018-03-25T13:52:00.000Z</published>
    <updated>2018-03-25T07:39:52.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no"><a href="#Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no" class="headerlink" title="Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó."></a>Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó.</h2><p>CSS Flexbox đã trở nên cực kỳ quen thuộc với các lập trình viên front-end trong vài năm gần đây. Điều này không đáng ngạc nhiên, bởi vì nó giúp chúng ta tạo ra các bố cục động (dynamic layout) và sắp xếp nội dung trong các container dễ dàng hơn rất nhiều.</p><p>Tuy nhiên, có một mô-đun mới gọi là CSS Grid và nó có nhiều khả năng giống như Flexbox. Trong một vài trường hợp nó tốt hơn so với Flexbox, và một số trường hợp khác thì không.</p><p>Điều này có vẻ gây nhầm lẫn cho các lập trình viên. Vì vậy, bài viết này sẽ so sánh hai mô-đun, cả mức độ vi mô và vĩ mô.</p><a id="more"></a><h3 id="Mot-chieu-vs-hai-chieu"><a href="#Mot-chieu-vs-hai-chieu" class="headerlink" title="Một chiều vs hai chiều"></a>Một chiều vs hai chiều</h3><p>Nếu bạn rút ra một bài học từ bài viết này, thì đây là nó:</p><blockquote><p>Flexbox được tạo ra cho các bố cục một chiều và Grid được tạo ra cho các bố cục hai chiều.</p></blockquote><p>Điều này có nghĩa là nếu bạn đang đặt các item theo một hướng (ví dụ ba nút bên trong header), thì bạn nên sử dụng Flexbox:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*h6dcLWRp0lXeWklPAFK8cA.png" alt=""></p><p>Nó sẽ linh hoạt hơn CSS Grid. Và cũng dễ dàng hơn để bảo trì và yêu cầu mã ít hơn.</p><p>Tuy nhiên nếu bạn định tạo bố cục theo hai chiều - với cả các hàng và các cột - thì bạn nên sử dụng CSS Grid:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*AxItLokVtaF56WMo_ZF6Pw.png" alt=""></p><p>Trong trường hợp này, CSS Grid sẽ linh hoạt hơn, làm cho code của bạn đơn giản hơn và dễ bảo trì hơn.</p><p>Tất nhiên bạn có thể kết hợp cả hai. Trong ví dụ ở trên, giải pháp hoàn hảo là sử dụng Grid cho việc bố cục trang, và sau đó dùng Flexbox để sắp xếp nội dung bên trong header. Điều này sẽ cung cấp cho bạn những chức năng tốt nhất của cả hai mô-đun.</p><h3 id="Content-first-vs-layout-first"><a href="#Content-first-vs-layout-first" class="headerlink" title="Content-first vs layout-first"></a>Content-first vs layout-first</h3><p>Một khác biệt quan trọng nữa giữa 2 mô-đun là Flexbox tập trung vào <strong>nội dung</strong> trong khi Grid tập trung vào <strong>bố cục</strong>. Điều này có vẻ trừu tượng, vì vậy hãy xem một ví dụ cụ thể, nó sẽ dễ hiểu hơn.</p><p>Chúng ta sẽ sử dụng header. Đây là code HTML cho nó:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Trước khi chúng ta style nó với Flexbox, các div này sẽ được xếp chồng lên nhau như thế này:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*VRnOqt5g9NVKY-NUh0vh7Q.png" alt=""></p><h4 id="Flexbox-header"><a href="#Flexbox-header" class="headerlink" title="Flexbox header"></a>Flexbox header</h4><p>Tuy nhiên, khi chúng ta style nó với display: flex; các item sẽ được đặt trên một dòng.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/1600/1*XHmGGavmUsEi3-vd9v0vcg.png" alt=""></p><p>Để di chuyển nút <em>logout</em> sang phía bên phải, chúng ta chỉ cần chọn phần tử đó và style với margin:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kết quả sẽ như thế này:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*1inbBN_44U2HSwFL3Ech-w.png" alt=""></p><p>Cái tôi muốn bạn để ý ở đây là chúng ta để các item tự quyết định vị trí của mình. Chúng ta không phải xác định trước bất cứ điều gì khác ngoài <code>display: flex;</code>.</p><p>Đây là khác biệt chính giữa Flexbox và Grid, và nó sẽ trở nên rõ ràng hơn khi chúng ta tạo header này bằng cách sử dụng Grid.</p><blockquote><p>Mặc dù CSS Grid không được tạo ra cho header một chiều, nhưng vẫn là một ý hay khi làm điều này vì nó dạy cho chúng ta về sự khác biệt cốt lõi giữa Flexbox và Grid.</p></blockquote><h4 id="Grid-header"><a href="#Grid-header" class="headerlink" title="Grid header"></a>Grid header</h4><p>Chúng ta có thể tạo header theo nhiều cách khác nhau với CSS Grid. Tôi sẽ sử dụng một cách khá đơn giản, trong đó grid của chúng ta có mười cột.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(10, 1fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nó sẽ giống hệt với giải pháp Flexbox.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*VPeA-uXOph9dNuOEUAz_kQ.png" alt=""></p><p>Tuy nhiên, chúng ta có thể sử dụng Chrome inspector để kiểm tra các dòng cột:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*RK-Kw7WoW6hXnpIYIPZF3Q.png" alt=""></p><p>Sự khác biệt chính với cách tiếp cận này là chúng ta phải xác định các cột - bố cục - đầu tiên. Chúng ta bắt đầu với việc xác định chiều rộng của các cột, và <em>sau đó</em> chúng ta đặt nội dung vào các ô có sẵn trong grid.</p><blockquote><p>Cách tiếp cận này buộc chúng ta phải xác định số lượng cột mà chúng ta muốn chia trong header.</p></blockquote><p>Trừ khi thay đổi grid, còn không chúng ta luôn có 10 cột. Một hạn chế mà chúng ta sẽ không phải đối mặt trong Flexbox.</p><p>Để thay đổi <em>logout</em> sang phía bên tay phải, chúng ta sẽ đặt nó vào cột thứ mười, như sau:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dùng Chrome inspector chúng ta sẽ thấy:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*u5z2zikNjwyL84dcUhRgJA.png" alt=""></p><p>Chúng ta không thể chỉ đơn giản style nó với <code>margin-left: auto;</code> vì nút <em>logout</em> đã được đặt trong một ô cụ thể trong bố cục, trong cột thứ ba. Để di chuyển nó, chúng ta phải tìm một ô khác cho nó.</p><h3 id="Ket-hop-ca-hai"><a href="#Ket-hop-ca-hai" class="headerlink" title="Kết hợp cả hai"></a>Kết hợp cả hai</h3><p>Bây giờ chúng ta hãy xem cách kết hợp cả hai, sát nhập header vào bố cục trang web. Chúng ta sẽ bắt đầu bằng cách xây dựng bố cục trang web.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*OcjCKOnh48lYnUuEJw_ZBA.png" alt=""></p><p>Đây là HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>MENU<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Đây là CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;    </span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(12, 1fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">350px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chúng ta sẽ đặt các item trên grid như sau:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tiếp theo, chúng ta sẽ chỉ cần thêm style cho header. Chúng ta sẽ biến header - một <em>item</em> trong CSS Grid - thành một Flexbox container.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chúng ta có thể thiết lập nút logout sang bên phải:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kết quả, chúng ta có một bố cục hoàn hảo sử dụng những tính năng tốt nhất từ cả Grid và Flexbox. Hai container sẽ trông như thế này:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*jPJsp3kukI6WNQBntfHsWg.png" alt=""></p><p>Bây giờ, bạn đã hiểu rõ sự khác biệt nói chung và cụ thể giữa Flexbox và Grid, và biết cách sử dụng chúng cùng với nhau.</p><h4 id="Trinh-duyet-ho-tro"><a href="#Trinh-duyet-ho-tro" class="headerlink" title="Trình duyệt hỗ trợ"></a>Trình duyệt hỗ trợ</h4><p>Trước khi kết thúc, tôi cũng cần đề cập đến các trình duyệt hỗ trợ CSS Grid. Vào thời điểm này (25/03/2018), <a href="https://caniuse.com/#feat=css-grid" target="_blank" rel="noopener">84.14% website toàn cầu hỗ trợ CSS Grid</a>, và nó đang tăng dần.</p><p>Tôi tin năm 2018 sẽ là năm của CSS Grid. Nó sẽ đột phá, và sẽ trở thành một kỹ năng phải có của các lập trình viên front-end. Giống như những gì đã xảy ra với CSS Flexbox trong vài năm gần đây.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no&quot;&gt;&lt;a href=&quot;#Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no&quot; class=&quot;headerlink&quot; title=&quot;Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó.&quot;&gt;&lt;/a&gt;Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó.&lt;/h2&gt;&lt;p&gt;CSS Flexbox đã trở nên cực kỳ quen thuộc với các lập trình viên front-end trong vài năm gần đây. Điều này không đáng ngạc nhiên, bởi vì nó giúp chúng ta tạo ra các bố cục động (dynamic layout) và sắp xếp nội dung trong các container dễ dàng hơn rất nhiều.&lt;/p&gt;
&lt;p&gt;Tuy nhiên, có một mô-đun mới gọi là CSS Grid và nó có nhiều khả năng giống như Flexbox. Trong một vài trường hợp nó tốt hơn so với Flexbox, và một số trường hợp khác thì không.&lt;/p&gt;
&lt;p&gt;Điều này có vẻ gây nhầm lẫn cho các lập trình viên. Vì vậy, bài viết này sẽ so sánh hai mô-đun, cả mức độ vi mô và vĩ mô.&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://nth-blogs.herokuapp.com/tags/css/"/>
    
      <category term="flexbox" scheme="http://nth-blogs.herokuapp.com/tags/flexbox/"/>
    
      <category term="grid" scheme="http://nth-blogs.herokuapp.com/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>Một số thủ thuật Chrome DevTools có thể bạn đã biết</title>
    <link href="http://nth-blogs.herokuapp.com/2018/03/Mot-so-thu-thuat-Chrome-DevTools-co-the-ban-da-biet.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/03/Mot-so-thu-thuat-Chrome-DevTools-co-the-ban-da-biet.html</id>
    <published>2018-03-25T07:54:00.000Z</published>
    <updated>2018-03-25T15:14:28.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Drag-and-drop-in-the-Elements-panel"><a href="#1-Drag-and-drop-in-the-Elements-panel" class="headerlink" title="1. Drag-and-drop in the Elements panel"></a>1. Drag-and-drop in the Elements panel</h3><p>In the Elements panel, you can drag and drop any HTML element and change its position across the page</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*YJ4pbintkGmF67YSLH7UEQ.gif" alt="Drag-and-drop in the Elements panel"></p><a id="more"></a><h3 id="2-Reference-the-currently-selected-element-in-the-Console"><a href="#2-Reference-the-currently-selected-element-in-the-Console" class="headerlink" title="2. Reference the currently selected element in the Console"></a>2. Reference the currently selected element in the Console</h3><p>Select a node in the Elements panel, and type $0 in the console to reference it.</p><p>If you’re using jQuery, you can enter $($0) to access the jQuery API on this element.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*Ua9Z12CO8LYWcx5L2zpQAw.gif" alt="Reference the currently selected element in the Console"></p><h3 id="3-Use-the-value-of-the-last-operation-in-the-Console"><a href="#3-Use-the-value-of-the-last-operation-in-the-Console" class="headerlink" title="3. Use the value of the last operation in the Console"></a>3. Use the value of the last operation in the Console</h3><p>Use $_ to reference the return value of the previous operation executed in the Console</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*zxJYnGdu8QUPGSiW.gif" alt="Use the value of the last operation in the Console"></p><h3 id="4-Add-CSS-and-edit-the-element-state"><a href="#4-Add-CSS-and-edit-the-element-state" class="headerlink" title="4. Add CSS and edit the element state"></a>4. Add CSS and edit the element state</h3><p>In the Elements panel there are two super useful buttons.</p><p>The first lets you add a new CSS property with any selector you want, but pre-filling the currently selected element:</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*SVTP4Rl82XYNc4Kp.gif" alt="Add CSS rules"></p><p>The second one lets you trigger a state for the selected element, so you can see the styles applied when it’s active, hovered, or on focus.</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*1nCZIzP73fr2xAwQ.png" alt="Edit the element state"></p><h3 id="5-Save-to-file-the-modified-CSS"><a href="#5-Save-to-file-the-modified-CSS" class="headerlink" title="5. Save to file the modified CSS"></a>5. Save to file the modified CSS</h3><p>Click the name of the CSS file that you edited. The inspector opens it into the Sources pane, and from there you can save it with the live edits you applied.</p><p>This trick does not work for new selectors added using +, or into the element.style properties, but only for modified, existing ones.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*7Q-CbjzcXYR20dbtmyMbJw.gif" alt="Save to file the modified CSS"></p><h3 id="6-Screenshot-a-single-element"><a href="#6-Screenshot-a-single-element" class="headerlink" title="6. Screenshot a single element"></a>6. Screenshot a single element</h3><p>Select an element and press cmd-shift-p (or ctrl-shift-p in Windows) to open the Command Menu, and select <strong>Capture node screenshot</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/0*CjWhHTmoZbCeMXSw.gif" alt="Screenshot a single element"></p><h3 id="7-Find-an-element-using-CSS-selectors"><a href="#7-Find-an-element-using-CSS-selectors" class="headerlink" title="7. Find an element using CSS selectors"></a>7. Find an element using CSS selectors</h3><p>Pressing cmd-f (ctrl-f in Windows) opens the search box in the Elements panel.</p><p>You can type any string in there to match the source code, or you can also use CSS selectors to have Chrome generate an image for you:</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*ipqpirAGqDRlEbes.gif" alt="Find an element using CSS selectors"></p><h3 id="8-Shift-enter-in-the-Console"><a href="#8-Shift-enter-in-the-Console" class="headerlink" title="8. Shift-enter in the Console"></a>8. Shift-enter in the Console</h3><p>To write commands that span over multiple lines in the Console, press shift-enter.</p><p>Once you’re ready, press enter at the end of the script to execute it:</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*QizwVdkFs7FC1kv1.gif" alt="Shift-enter in the Console to write multiline commands"></p><p>You can clear the console using the <em>Clear</em> button on the top-left of the console, or by pressing ctrl-l or cmd-k.</p><h3 id="9-Go-to…"><a href="#9-Go-to…" class="headerlink" title="9. Go to…"></a>9. Go to…</h3><p>In the Sources panel:</p><ul><li>cmd-o (ctrl-o in Windows), shows all the files loaded by your page.</li><li>cmd-shift-o (ctrl-shift-o in Windows) shows the functions (or classes) in the current file.</li><li>cmd-l (ctrl-l in Windows) goes to a specific line.</li></ul><p><img src="https://cdn-images-1.medium.com/max/1600/0*mxGuyBT02JoiSlb-.png" alt="Go to file"></p><h3 id="10-Watch-Expression"><a href="#10-Watch-Expression" class="headerlink" title="10. Watch Expression"></a>10. Watch Expression</h3><p>Instead of writing again and again a variable name or an expression you are going to check a lot during a debug session, add it to the <em>Watch Expression</em> list.</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*gSpZcWiUho4z9DoW.gif" alt="Watch Expression"></p><h3 id="11-XHR-Fetch-debugging"><a href="#11-XHR-Fetch-debugging" class="headerlink" title="11. XHR/Fetch debugging"></a>11. XHR/Fetch debugging</h3><p>From the debugger open the <strong>XHR/Fetch Breakpoints</strong> panel.</p><p>You can set it to break any time a XHR/Fetch call is sent, or just on specific ones:</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*r_-hBTOJ23eSDX-g.png" alt="XHR/Fetch debugging"></p><h3 id="12-Debug-on-DOM-modifications"><a href="#12-Debug-on-DOM-modifications" class="headerlink" title="12. Debug on DOM modifications"></a>12. Debug on DOM modifications</h3><p>Right-click an element and enable <em>Break on Subtree Modifications.</em> Whenever a script traverses that element’s children and modifies them, the debugger stops automatically to let you inspect what’s happening.</p><p><img src="https://cdn-images-1.medium.com/max/1600/0*VYABHtIwKZ5eeu-p.png" alt="Debug on DOM modifications"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Drag-and-drop-in-the-Elements-panel&quot;&gt;&lt;a href=&quot;#1-Drag-and-drop-in-the-Elements-panel&quot; class=&quot;headerlink&quot; title=&quot;1. Drag-and-drop in the Elements panel&quot;&gt;&lt;/a&gt;1. Drag-and-drop in the Elements panel&lt;/h3&gt;&lt;p&gt;In the Elements panel, you can drag and drop any HTML element and change its position across the page&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*YJ4pbintkGmF67YSLH7UEQ.gif&quot; alt=&quot;Drag-and-drop in the Elements panel&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://nth-blogs.herokuapp.com/categories/Tips/"/>
    
    
      <category term="tips" scheme="http://nth-blogs.herokuapp.com/tags/tips/"/>
    
      <category term="chorme" scheme="http://nth-blogs.herokuapp.com/tags/chorme/"/>
    
  </entry>
  
  <entry>
    <title>Kiến thức cho phỏng vấn Javascript developer</title>
    <link href="http://nth-blogs.herokuapp.com/2018/01/Kien-thuc-cho-phong-van-Javascript-developer.html"/>
    <id>http://nth-blogs.herokuapp.com/2018/01/Kien-thuc-cho-phong-van-Javascript-developer.html</id>
    <published>2018-01-02T15:12:14.000Z</published>
    <updated>2018-03-25T04:12:04.733Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript is the most popular programming language and has been since 2014, according to <a href="https://insights.stackoverflow.com/survey/2017#most-popular-technologies" target="_blank" rel="noopener">Stack Overflow Survey</a>. It is no wonder that over 1/3rd of all developer jobs require some JavaScript knowledge. So, if you plan to work as a developer in the near future, you should be familiar with this extremely popular language.</p><p>The post’s purpose is to bring together all JavaScript concepts that are frequently brought up in developer interviews. It was written so you can review everything you need to know about JavaScript in a single place.<br><a id="more"></a></p><h3 id="Types-amp-Coercion"><a href="#Types-amp-Coercion" class="headerlink" title="Types &amp; Coercion"></a><strong>Types &amp; Coercion</strong></h3><p>There are 7 built-in types: null, undefined , boolean, number, string, object and symbol (ES6).</p><p>All of these are types are called primitives, except for object.</p><script src="//gist.github.com/5e3f8d5dc70abac837cf272df2891934.js"></script><ul><li><strong>Null vs. Undefined</strong></li></ul><p><strong>Undefined</strong> is the absence of a definition. It is used as the default value for uninitialized variables, function arguments that were not provided and missing properties of objects. Functions return undefined when nothing has been explicitly returned.</p><p><strong>Null</strong> is the absence of a value. It is an assignment value that can be assigned to a variable as a representation of ‘no-value’.</p><ul><li><strong>Implicit coercion</strong></li></ul><p>Take a look at the following example:</p><script src="//gist.github.com/c0ad651bb55abd65e16dbb44c905d779.js"></script><p>In this case, the string variable name is coerced to true and you have ‘Joey doesn’t share food!’ printed in our console. But how do you know what will be coerced to true and what will be coerced to false?</p><p>Falsy values are values that will be coerced to false when forced a boolean coercion on it.</p><p>Falsy values: “”, 0, null, undefined, NaN, false.</p><p>Anything not explicitly on the falsy list is truthy —<strong>boolean coerced to true</strong>.</p><script src="//gist.github.com/5eadf22657bd8cdc1d46770185bd04eb.js"></script><p>Yes. You read it right. Empty arrays, objects and functions are boolean coerced to true!</p><ul><li><strong>String &amp; Number coercion</strong></li></ul><p>The first thing you need to be aware of is the + operator. This is a tricky operator because it works for both number addition and string concatenation.</p><p>But, the <code>*</code>, <code>/</code>, and <code>-</code> operators are exclusive for numeric operations. When these operators are used with a string, it forces the string to be coerced to a number.</p><script src="//gist.github.com/77723e09a20beabad6e8e8adba4ad0b5.js"></script><ul><li><strong>== vs. ===</strong></li></ul><p>It is widely spread that == checks for equality and === checks for equality and type. Well, that is a misconception.</p><p>In fact, == checks for <strong>equality with coercion</strong> and === checks for equality without coercion — <strong>strict equality</strong>.</p><script src="//gist.github.com/3cbeceb2e5fde3141f58919df6bd1798.js"></script><p>Coercion can be tricky. Take a look at the following code:</p><script src="//gist.github.com/64728b4693d4efa86823b04e0f6ef657.js"></script><p>What would you expect for the following comparison?<br>console.log(a == b); (1)</p><p>This comparison actually returns True. Why?<br>What really happens under the hood is that if you are comparing a boolean with something other than a boolean, JavaScript coerces that boolean to a number and compares. (2)</p><p>This comparison is now between a number and a string. JavaScript now coerces that string to a number and compares both numbers. (3)</p><p>In this case, the final comparison 0 == 0 is True.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'0'</span> == <span class="literal">false</span>   (<span class="number">1</span>)</span><br><span class="line"><span class="string">'0'</span> == <span class="number">0</span>       (<span class="number">2</span>)</span><br><span class="line"> <span class="number">0</span>  == <span class="number">0</span>       (<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>For a fully comprehension on how such comparisons are performed, you can check ES5 documentation <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3" target="_blank" rel="noopener">here</a>.</p><p>For a cheat sheet, you can click <a href="http://dorey.github.io/JavaScript-Equality-Table/" target="_blank" rel="noopener">here</a>.</p><p>Some tricky comparisons to look out for:</p><script src="//gist.github.com/27ace3848b30aa9c6c195ea47f2cbf94.js"></script><h3 id="Value-vs-Reference"><a href="#Value-vs-Reference" class="headerlink" title="Value vs. Reference"></a>Value vs. Reference</h3><p>Simple values (also known as primitives) are always assigned by value-copy: null, undefined , boolean, number, string and ES6 symbol.</p><p>Compound values always create a copy of the reference on assignment: objects, which includes arrays, and functions.</p><script src="//gist.github.com/53602e9d38c3fc9e4c5799ef4d5ef680.js"></script><p>To copy a compound value by value, you need to <strong>make</strong>a copy of it. The reference does not point to the original value.</p><script src="//gist.github.com/7b7c1dfa5ce4fac0d9e2f5becb70351d.js"></script><h3 id="Scop-e"><a href="#Scop-e" class="headerlink" title="Scop_e_"></a>Scop_e_</h3><p>Scope refers to the execution context. It defines the accessibility of variables and functions in the code.</p><p><strong>Global Scope</strong> is the outermost scope. Variables declared outside a function are in the global scope and can be accessed in any other scope. In a browser, the window object is the global scope.</p><p><strong>Local Scope</strong> is a scope nested inside another function scope. Variables declared in a local scope are accessible within this scope as well as in any inner scopes.</p><script src="//gist.github.com/af953afc4fa5cbc5730f33cdcc84cc6d.js"></script><p>You may think of Scopes as a series of doors decreasing in size (from biggest to smallest). A short person that fits through the smallest door — <strong>innermost scope</strong> — also fits through any bigger doors — <strong>outer scopes</strong>.</p><p>A tall person that gets stuck on the third door, for example, will have access to all previous doors — <strong>outer scopes</strong> — but not any further doors — <strong>inner scopes</strong>.</p><h3 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h3><p>The behavior of “moving” var and function declarations to the top of their respective scopes during the compilation phase is called <strong>hoisting</strong>.</p><p>Function declarations are completely hoisted. This means that a declared function can be called before it is defined.</p><script src="//gist.github.com/2e4cf346eb8a63a0db8b7e3fb09b3da8.js"></script><p>Variables are partially hoisted. var declarations are hoisted but not its assignments.</p><p>let and const are not hoisted.</p><script src="//gist.github.com/e1bdaf648836bb3a58aeb2605e6ff6cd.js"></script><h3 id="Function-Expression-vs-Function-Declaration"><a href="#Function-Expression-vs-Function-Declaration" class="headerlink" title="Function Expression vs. Function Declaration"></a>Function Expression vs. Function Declaration</h3><ul><li><strong>Function Expression</strong> A Function Expression is created when the execution reaches it and is usable from then on — it is not hoisted.</li></ul><script src="//gist.github.com/97cc7170cf4d249bc510f92563aee5b0.js"></script><ul><li><strong>Function Declaration</strong> A Function Declaration can be called both before and after it was defined — it is hoisted.</li></ul><script src="//gist.github.com/5604017e8dafbaa179fc505b13f792fc.js"></script><h3 id="Variables-var-let-and-const"><a href="#Variables-var-let-and-const" class="headerlink" title="Variables: var, let and const"></a>Variables: var, let and const</h3><p>Before ES6, it was only possible to declare a variable using var. Variables and functions declared inside another function cannot be accessed by any of the enclosing scopes — they are function-scoped.</p><p>Variables declared inside a block-scope, such as if statements and for loops, can be accessed from outside of the opening and closing curly braces of the block.</p><p><strong>Note</strong>: An undeclared variable — assignment without var, let or const — creates a var variable in global scope.</p><script src="//gist.github.com/09e19a0bfec70019ebe54bf507ed2efa.js"></script><p>ES6 let and const are new. They are not hoisted and block-scoped alternatives for variable declaration. This means that a pair of curly braces define a scope in which variables declared with either let or const are confined in.</p><script src="//gist.github.com/035ffb6832bc698e86c80ae9472d17ec.js"></script><p>A common misconception is that const is immutable. It cannot be reassigned, but its properties can be <strong>changed</strong>!</p><script src="//gist.github.com/75ee0da2b6ab311a011aa4e4fec4c8b4.js"></script><h3 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h3><p>A <strong>closure</strong> is the combination of a function and the lexical environment from which it was declared. Closure allows a function to access variables from an enclosing scope — <strong>environment</strong> — even after it leaves the scope in which it was declared.</p><script src="//gist.github.com/debafd05414b713b065189f236ea8d88.js"></script><p>The above example covers the two things you need to know about closures:</p><ol><li>Refers to variables in outer scope.<br>The returned function access themessage variable from the enclosing scope.</li><li>It can refer to outer scope variables even after the outer function has returned.<br>sayHiToJon is a reference to the greeting function, created when sayHi was run. The greeting function maintains a reference to its outer scope — <strong>environment</strong> — in which message exists.</li></ol><p>One of the main benefits of closures is that it allows <strong>data encapsulation</strong>. This refers to the idea that some data should not be directly exposed. The following example illustrates that.</p><p>By the time elementary is created, the outer function has already returned. This means that the staff variable only exists inside the closure and it cannot be accessed otherwise.</p><script src="//gist.github.com/d1d6074cb995bb41393f5375f0fdd306.js"></script><p>Let’s go deeper into closures by solving one of the most common interview problems on this subject:<br>What is wrong with the following code and how would you fix it?</p><script src="//gist.github.com/6911302e191138cb2ec8411372dff9a0.js"></script><p>Considering the above code, the console will display four identical messages “The value undefined is at index: 4”. This happens because each function executed within the loop will be executed after the whole loop has completed, referencing to the last value stored in i, which was 4.</p><p>This problem can be solved by using IIFE, which creates a unique scope for each iteration and storing each value within its scope.</p><script src="//gist.github.com/30f45b336aecb5f891f2c0f0b8541799.js"></script><p>Another solution would be declaring the i variable with let, which creates the same result.</p><script src="//gist.github.com/ce8a4a5f3e5c9b48e17ff9baa6330934.js"></script><h3 id="Immediate-Invoked-Function-Expression-IIFE"><a href="#Immediate-Invoked-Function-Expression-IIFE" class="headerlink" title="Immediate Invoked Function Expression (IIFE)"></a>Immediate Invoked Function Expression (IIFE)</h3><p>An IIFE is a function expression that is called immediately after you define it. It is usually used when you want to create a new variable scope.</p><p>The <strong>(surrounding parenthesis)</strong> prevents from treating it as a function declaration.</p><p>The <strong>final parenthesis()</strong> are executing the function expression.</p><p>On IIFE you are calling the function exactly when you are defining it.</p><script src="//gist.github.com/bd2a30ed9e8e084adf21668c82245f81.js"></script><p>Using IIFE:</p><ul><li>Enables you to attach private data to a function.</li><li>Creates fresh environments.</li><li>Avoids polluting the global namespace.</li></ul><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p><strong>Context</strong> is often confused as the same thing as Scope. To clear things up, lets keep the following in mind:<br><strong>Context</strong> is most often determined by how a function is invoked. It always refers to the value of this in a particular part of your code.<br><strong>Scope</strong> refers to the visibility of variables.</p><h3 id="Function-calls-call-apply-and-bind"><a href="#Function-calls-call-apply-and-bind" class="headerlink" title="Function calls: call, apply and bind"></a>Function calls: call, apply and bind</h3><p>All of these three methods are used to attach thisinto function and the difference is in the function invocation.</p><p>.call() invokes the function immediately and requires you to pass in arguments as a list (one by one).</p><p>.apply() invokes the function immediately and allows you to pass in arguments as an array.</p><p>.call() and .apply() are mostly equivalent and are used to borrow a method from an object. Choosing which one to use depends on which one is easier to pass the arguments in. Just decide whether it’s easier to pass in an array or a comma separated list of arguments.</p><p><strong>Quick tip:</strong> <strong>A</strong>pply for <strong>A</strong>rray — <strong>C</strong>all for <strong>C</strong>omma.</p><script src="//gist.github.com/5250167cbfd155b45817fd1903378c6e.js"></script><p><strong>Note</strong>: If you pass in an array as one of the arguments on a call function, it will treat that entire array as a single element.<br>ES6 allows us to spread an array as arguments with the call function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char.knows.call(Snow, ...[<span class="string">"nothing"</span>, <span class="string">"Jon"</span>]);  <span class="comment">// You know nothing, Jon Snow</span></span><br></pre></td></tr></table></figure><p>.bind() returns a new function, with a certain context and parameters. It is usually used when you want a function to be called later with a certain context.</p><p>That is possible thanks to its ability to maintain a given context for calling the original function. This is useful for asynchronous callbacks and events.</p><p>.bind() works like the call function. It requires you to pass in the arguments one by one separated by a comma.</p><script src="//gist.github.com/8f811c287891fd1b177d5db6993b9c76.js"></script><h3 id="‘this’-keyword"><a href="#‘this’-keyword" class="headerlink" title="‘this’ keyword"></a>‘this’ keyword</h3><p>Understanding the keyword thisin JavaScript, and what it is referring to, can be quite complicated at times.</p><p>The value of thisis usually determined by a functions execution context. Execution context simply means how a function is called.</p><p>The keyword thisacts as a placeholder, and will refer to whichever object called that method when the method is actually used.</p><p>The following list is the ordered rules for determining this. Stop at the first one that applies:</p><ul><li><strong>new</strong> <strong>binding</strong> — When using the new keyword to call a function, thisis the newly constructed object.</li></ul><script src="//gist.github.com/382cc89b2759c87cc962670e5a301f1a.js"></script><ul><li><strong>Explicit binding</strong> — When call or apply are used to call a function, thisis the object that is passed in as the argument.<br><strong>Note</strong>: .bind() works a little bit differently. It creates a new function that will call the original one with the object that was bound to it.</li></ul><script src="//gist.github.com/9563de1a62e500ecd0e3a06738f7d4f9.js"></script><ul><li><strong>Implicit binding</strong> — When a function is called with a context (the containing object), thisis the object that the function is a property of.<br>This means that a function is being called as a method.</li></ul><script src="//gist.github.com/1396312d7f2691b0ecde4365249530c9.js"></script><ul><li><strong>Default binding</strong> — If none of the above rules applies, thisis the global object (in a browser, it’s the window object).<br>This happens when a function is called as a standalone function.<br>A function that is not declared as a method automatically becomes a property of the global object.</li></ul><script src="//gist.github.com/5a6d2419f84087903cee98c530bbdd0c.js"></script><p><strong>Note</strong>: This also happens when a standalone function is called from within an outer function scope.</p><script src="//gist.github.com/54b951399b507020ef9a5dd442b2f389.js"></script><ul><li><strong>Lexical this</strong> — When a function is called with an arrow function =&gt;, thisreceives the thisvalue of its surrounding scope at the time it’s created.<br>thiskeeps the value from its original context.</li></ul><script src="//gist.github.com/3c89befdc4bb2e2cce7aac85f4c62568.js"></script><h3 id="Strict-Mode"><a href="#Strict-Mode" class="headerlink" title="Strict Mode"></a>Strict Mode</h3><p>JavaScript is executed in strict mode by using the “use strict” directive. Strict mode tightens the rules for parsing and error handling on your code.</p><p>Some of its benefits are:</p><ul><li><strong>Makes debugging easier </strong>— Code errors that would otherwise have been ignored will now generate errors, such as assigning to non-writable global or property.</li><li><strong>Prevents accidental global variables</strong> — Assigning a value to an undeclared variable will now throw an error.</li><li><strong>Prevents invalid use of delete</strong> — Attempts to delete variables, functions and undeletable properties will now throw an error.</li><li><strong>Prevents duplicate property names or parameter values</strong> — Duplicated named property in an object or argument in a function will now throw an error. (This is no longer the case in ES6)</li><li><strong>Makes eval() safer </strong>— Variables and functions declared inside an eval() statement are not created in the surrounding scope.</li><li><strong>“Secures” JavaScript eliminating this coercion</strong> — Referencing a this value of null or undefined is not coerced to the global object. This means that in browsers it’s no longer possible to reference the window object using this inside a function.</li></ul><h3 id="new-keyword"><a href="#new-keyword" class="headerlink" title="new keyword"></a><strong><code>new</code> keyword</strong></h3><p>The new keyword invokes a function in a special way. Functions invoked using the new keyword are called <strong>constructor functions</strong>.</p><p>So what does the new keyword actually do?</p><ol><li>Creates a new object.</li><li>Sets the <strong>object’s</strong> prototypeto be the prototypeof the <strong>constructor function</strong>.</li><li>Executes the constructor function with this as the newly created object.</li><li>Returns the created object. If the constructor returns an object, this object is returned.</li></ol><script src="//gist.github.com/fc8349759be2c7aee1c3fe61d1651ac0.js"></script><p>What is the difference between invoking a function with the new keyword and without it?</p><script src="//gist.github.com/f4db26183f24b85d19b55c29bdc4a9b5.js"></script><h3 id="Prototype-and-Inheritance"><a href="#Prototype-and-Inheritance" class="headerlink" title="Prototype and Inheritance"></a>Prototype and Inheritance</h3><p>Prototype is one of the most confusing concepts in JavaScript and one of the reason for that is because there are two different contexts in which the word <strong>prototype</strong> is used.</p><ul><li><strong>Prototype relationship</strong> Each object has a <strong>prototype</strong>object, from which it inherits all of its prototype’s properties.<br>.<strong>proto</strong> is a non-standard mechanism (available in ES6) for retrieving the prototypeof an object <em>(*)</em>. It points to the object’s “parent” —the <strong>object’s prototype</strong>.<br>All normal objects also inherit a .constructor property that points to the constructor of the object. Whenever an object is created from a constructor function, the .<strong>proto</strong> property links that object to the .prototype property of the constructor function used to create it.<br><em>(*)</em> _Object.getPrototypeOf()_is the standard ES5 function for retrieving the prototype of an object.</li><li><strong>Prototype property</strong> Every function has a .prototype property.<br>It references to an object used to attach properties that will be inherited by objects further down the prototype chain. This object contains, by default, a .constructor property that points to the original constructor function.<br>Every object created with a constructor function inherits a constructor property that points back to that function.</li></ul><script src="//gist.github.com/559d31ffa79f9f8f29781c2e7365fc25.js"></script><h4 id="Prototype-Chain"><a href="#Prototype-Chain" class="headerlink" title="Prototype Chain"></a><strong>Prototype Chain</strong></h4><p>The prototype chain is a series of links between objects that reference one another.</p><p>When looking for a property in an object, JavaScript engine will first try to access that property on the object itself.</p><p>If it is not found, the JavaScript engine will look for that property on the object it inherited its properties from — the <strong>object’s prototype</strong>.</p><p>The engine will traverse up the chain looking for that property and return the first one it finds.</p><p>The last object in the chain is the built-in Object.prototype, which has null as its <strong>prototype</strong>. Once the engine reaches this object, it returns undefined.</p><h4 id="Own-vs-Inherited-Properties"><a href="#Own-vs-Inherited-Properties" class="headerlink" title="Own vs Inherited Properties"></a>Own vs Inherited Properties</h4><p>Objects have own properties and inherited properties.</p><p>Own properties are properties that were defined on the object.</p><p>Inherited properties were inherited through prototype chain.</p><script src="//gist.github.com/a538f482a3e0f347b6cecbd36f713b60.js"></script><p><strong>Object.create(</strong><em>obj</em><strong>) </strong>— Creates a new object with the specified <strong>prototype</strong>object and properties.</p><script src="//gist.github.com/8dba6a2cfcb71f65799dcdf67b49b497.js"></script><h4 id="Inheritance-by-reference"><a href="#Inheritance-by-reference" class="headerlink" title="Inheritance by reference"></a><strong>Inheritance by reference</strong></h4><p>An inherited property is a copy by reference of the <strong>prototype object’s</strong>property from which it inherited that property.</p><p>If an object’s property is mutated on the prototype, objects which inherited that property will share the same mutation. But if the property is replaced, the change will not be shared.</p><script src="//gist.github.com/077b60ea3ab52644fc05b1e2d4e63d2e.js"></script><h4 id="Classical-Inheritance-vs-Prototypal-Inheritance"><a href="#Classical-Inheritance-vs-Prototypal-Inheritance" class="headerlink" title="Classical Inheritance vs. Prototypal Inheritance"></a><strong>Classical Inheritance vs. Prototypal Inheritance</strong></h4><p>In classical inheritance, objects inherit from classes — like a blueprint or a description of the object to be created — and create sub-class relationships. These objects are created via constructor functions using the new keyword.</p><p>The downside of classical inheritance is that it causes:<br>inflexible hierarchy<br>tight coupling problems<br>fragile base class problems<br>duplication problems<br>And the so famous gorilla/banana problem — <em>“What you wanted was a banana, what you got was a gorilla holding the banana, and the entire jungle.”</em></p><p>In prototypal inheritance, objects inherit directly from other objects. Objects are typically created via Object.create(), object literals or factory functions.</p><p>There are three different kinds of prototypal inheritance:</p><ul><li><strong>Prototype delegation</strong> — A delegate prototype is an object which is used as a model for another object. When you inherit from a delegate prototype, the new object gets a reference to the prototype and its properties.<br>This process is usually accomplished by using Object.create().</li><li><strong>Concatenative inheritance </strong>— The process of inheriting properties from one object to another by copying the object’s prototype properties, without retaining a reference between them.<br>This process is usually accomplished by using Object.assign().</li><li><strong>Functional inheritance</strong> — This process makes use of a <em>factory function(*)</em> to create an object, and then adds new properties directly to the created object.This process has the benefit of allowing data encapsulation via closure.<br><strong><em>(*)Factory function</em></strong> is a function that is not a class or constructor that returns an object without using the new keyword.</li></ul><script src="//gist.github.com/d44e8a9eb035553e5eaefbed5939df2f.js"></script><p>You can find a complete article on this topic by <a href="https://medium.com/@_ericelliott" target="_blank" rel="noopener">Eric Elliott</a> <a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9" target="_blank" rel="noopener">here</a>.</p><h4 id="Favor-composition-over-class-inheritance"><a href="#Favor-composition-over-class-inheritance" class="headerlink" title="Favor composition over class inheritance"></a>Favor composition over class inheritance</h4><p>Many developers agree that class inheritance should be avoided in most cases. In this pattern you design your types regarding what they <strong>are</strong>, which makes it a very strict pattern.</p><p>Composition, on the other hand, you design your types regarding what they <strong>do</strong>, which makes it more flexible and reusable.</p><p>Here is a nice video on this topic by <a href="https://medium.com/@mpjme" target="_blank" rel="noopener">Mattias Petter Johansson</a></p><div class="video-container"><iframe src="//www.youtube.com/embed/wfMtDGfHWpA" frameborder="0" allowfullscreen></iframe></div><h3 id="Asynchronous-JavaScript"><a href="#Asynchronous-JavaScript" class="headerlink" title="Asynchronous JavaScript"></a>Asynchronous JavaScript</h3><p>JavaScript is a single-threaded programming language. This means that the JavaScript engine can only process a piece of code at a time. One of its main consequences is that when JavaScript encounters a piece of code that takes a long time to process, it will block all code after that from running.</p><p>JavaScript uses a data structure that stores information about active functions named <strong>Call Stack</strong>. A Call Stack is like a pile of books. Every book that goes into that pile sits on top of the previous book. The last book to go into the pile will be the first one removed from it, and the first book added to the pile will be the last one removed.</p><p>The solution to executing heavy pieces of code without blocking anything is <strong>asynchronous callback functions</strong>. These functions are executed later — <strong>asynchronously</strong>.</p><p>The asynchronous process begins with an asynchronous callback functions placed into a <strong>Heap or</strong> region of memory. You can think of the Heap as an <strong>Event Manager</strong>. The Call Stack asks the Event Manager to execute a specific function only when a certain event happens. Once that event happens, the Event Manager moves the function to the Callback Queue. <strong>Note</strong>: When the Event Manager handles a function, the code after that is not blocked and JavaScript continues its execution.</p><p>The Event Loop handles the execution of multiple pieces of your code over time. The Event Loop monitors the Call Stack and the Callback Queue.</p><p>The Call Stack is constantly checked whether it is empty or not. When it is empty, the Callback Queue is checked if there is a function waiting to be invoked. When there is a function waiting, the first function in the queue is pushed into the Call Stack, which will run it. This checking process is called a ‘tick’ in the Event Loop.</p><p>Let’s break down the execution of the following code to understand how this process works:</p><script src="//gist.github.com/8de2cd85cb86c29450d440bd8431f00b.js"></script><ol><li>Initially the Browser console is clear and the Call Stack and Event Manager are empty.</li><li>first() is added to the Call Stack.</li><li>console.log(“First message”) is added to the Call Stack.</li><li>console.log(“First message”) is executed and the Browser console displays <strong>“First message”</strong>_._</li><li>console.log(“First message”) is removed from the Call Stack.</li><li>first() is remove from the Call Stack.</li><li>setTimeout(second, 0) is added to the Call Stack.</li><li>setTimeout(second, 0) is executed and handled by the Event Manager. And after 0ms the Event Manager moves second() to the Callback Queue.</li><li>setTimeout(second, 0) is now completed and removed from the Call Stack.</li><li>third() is added to the Call Stack.</li><li>console.log(“Third message”) is added to the Call Stack.</li><li>console.log(“Third message”) is executed and the Browser console displays <strong>“Third message”</strong>_._</li><li>console.log(“Third message”) is removed from the Call Stack.</li><li>Call Stack is now empty and the second() function is waiting to be invoked in the Callback Queue.</li><li>The Event Loop moves second() from the Callback Queue to the Call Stack.</li><li>console.log(“Second message”) is added to the Call Stack.</li><li>console.log(“Second message”) is executed and the Browser console displays <strong>“Second message”</strong>.</li><li>console.log(“Second message”) is removed from the Call Stack.</li><li>second() is removed from the Call Stack.</li></ol><p><strong>Note</strong>: The second() function is not executed after 0ms. The <strong>time</strong> you pass in to setTimeout function does not relate to the delay of its execution. The Event Manager will wait the given timebefore moving that function into the Callback Queue. Its execution will only take place on a future ‘tick’ in the Event Loop.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript is the most popular programming language and has been since 2014, according to &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017#most-popular-technologies&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stack Overflow Survey&lt;/a&gt;. It is no wonder that over 1/3rd of all developer jobs require some JavaScript knowledge. So, if you plan to work as a developer in the near future, you should be familiar with this extremely popular language.&lt;/p&gt;
&lt;p&gt;The post’s purpose is to bring together all JavaScript concepts that are frequently brought up in developer interviews. It was written so you can review everything you need to know about JavaScript in a single place.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Cải thiện tốc độ Web App với Tinder</title>
    <link href="http://nth-blogs.herokuapp.com/2017/12/Cai-thien-toc-do-Web-App-voi-Tinder.html"/>
    <id>http://nth-blogs.herokuapp.com/2017/12/Cai-thien-toc-do-Web-App-voi-Tinder.html</id>
    <published>2017-12-25T11:29:59.000Z</published>
    <updated>2018-03-24T03:25:31.654Z</updated>
    
    <content type="html"><![CDATA[<p>Tinder recently swiped right on the web. Their new responsive <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">Progressive Web App</a> — <a href="https://tinder.com" target="_blank" rel="noopener">Tinder Online</a> — is available to 100% of users on desktop and mobile, employing techniques for <a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e" target="_blank" rel="noopener">JavaScript performance optimization</a>, <a href="https://developers.google.com/web/fundamentals/primers/service-workers/" target="_blank" rel="noopener">Service Workers</a> for network resilience and <a href="https://developers.google.com/web/fundamentals/push-notifications/" target="_blank" rel="noopener">Push Notifications</a> for chat engagement. Today we’ll walk through some of their web perf learnings.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*1HmfQhMAQL8kukiNtMZRjA.png" alt=""><br><a id="more"></a></p><h3 id="Journey-to-a-Progressive-Web-App"><a href="#Journey-to-a-Progressive-Web-App" class="headerlink" title="Journey to a Progressive Web App"></a>Journey to a Progressive Web App</h3><p>Tinder Online started with the goal of getting adoption in new markets, striving to hit feature parity with V1 of Tinder’s experience on other platforms.</p><p><strong>The MVP for the PWA took 3 months to implement using</strong> <a href="https://reactjs.com" target="_blank" rel="noopener"><strong>React</strong></a> <strong>as their UI library and</strong> <a href="https://redux.js.org" target="_blank" rel="noopener"><strong>Redux</strong></a> <strong>for state management.</strong> The result of their efforts is a PWA that delivers the core Tinder experience in <strong>10%</strong> of the data-investment costs for someone in a data-costly or data-scarce market:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*cqYbI-L0zukfYS0ZAwUtqA.png" alt="">Comparing the data-investment for Tinder Online vs the native apps. It’s important to note that this isn’t comparing apples to apples, however. The PWA loads code for new routes on demand, and the cost of additional code is amortized over the lifetime of the application. Subsequent navigations still don’t cost as much data as the download of the app.</p><p>Early signs show good swiping, messaging and session length compared to the native app. With the PWA:</p><ul><li>Users swipe more on web than their native apps</li><li>Users message more on web than their native apps</li><li>Users purchase on par with native apps</li><li>Users edit profiles more on web than on their native apps</li><li>Session times are longer on web than their native apps</li></ul><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><p>The mobile devices Tinder Online’s users most commonly access their web experience with include:</p><ul><li>Apple iPhone &amp; iPad</li><li>Samsung Galaxy S8</li><li>Samsung Galaxy S7</li><li>Motorola Moto G4</li></ul><p>Using the <a href="https://developers.google.com/web/tools/chrome-user-experience-report/" target="_blank" rel="noopener">Chrome User Experience report</a> (CrUX), we’re able to learn that the majority of users accessing the site are on a 4G connection:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*gO4n3kBs5Zy1eAkMQqxx7w.png" alt=""></p><p><em>Note: Rick Viscomi recently covered CrUX on</em> <a href="https://calendar.perfplanet.com/2017/finding-your-competitive-edge-with-the-chrome-user-experience-report/" target="_blank" rel="noopener"><em>PerfPlanet</em></a> <em>and Inian Parameshwaran covered</em> <a href="https://calendar.perfplanet.com/2017/introducing-ruxt-visualizing-real-user-experience-data-for-1-2-million-websites/" target="_blank" rel="noopener"><em>rUXt</em></a> <em>for better visualizing this data for the top 1M sites.</em></p><p>Testing the new experience on <a href="https://www.webpagetest.org/result/171224_ZB_13cef955385ddc4cae8847f451db8403/" target="_blank" rel="noopener">WebPageTest</a> and <a href="https://github.com/GoogleChrome/lighthouse/" target="_blank" rel="noopener">Lighthouse</a> (using the Galaxy S7 on 4G) we can see that they’re able to load and get interactive in <strong>under 5 seconds</strong>:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*e-EHgbBBNXyuce8Z836Sgg.png" alt=""></p><p>There is of course <strong>lots of room</strong> to improve this further on <a href="https://www.webpagetest.org/lighthouse.php?test=171224_NP_f7a489992a86a83b892bf4b4da42819d&amp;run=3" target="_blank" rel="noopener">median mobile hardware</a> (like the Moto G4), which is more CPU constrained:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*VJ3ZbSQtIjxsIW8Feuiejw.png" alt=""></p><p>Tinder are hard at work on optimizing their experience and we look forward to hearing about their work on web performance in the near future.</p><h3 id="Performance-Optimization"><a href="#Performance-Optimization" class="headerlink" title="Performance Optimization"></a>Performance Optimization</h3><p>Tinder were able to improve how quickly their pages could load and become interactive through a number of techniques. They implemented route-based code-splitting, introduced performance budgets and long-term asset caching.</p><h3 id="Route-level-code-splitting"><a href="#Route-level-code-splitting" class="headerlink" title="Route-level code-splitting"></a>Route-level code-splitting</h3><p>Tinder initially had large, monolithic JavaScript bundles that delayed how quickly their experience could get interactive. These bundles contained code that wasn’t immediately needed to boot-up the core user experience, so it could be broken up using <a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noopener">code-splitting</a>. <strong>It’s generally useful to only ship code users need upfront and lazy-load the rest as needed</strong>.</p><p>To accomplish this, Tinder used <a href="https://reacttraining.com/react-router/" target="_blank" rel="noopener">React Router</a> and <a href="https://github.com/thejameskyle/react-loadable" target="_blank" rel="noopener">React Loadable</a>. As their application centralized all their route and rendering info a configuration base, they found it straight-forward to implement code splitting at the top level.</p><p><strong>In summary:</strong></p><p>React Loadable is a small library by James Kyle to make component-centric <strong>code splitting</strong> easier in React. <strong>Loadable</strong> is a higher-order component (a function that creates a component) which makes it easy to <strong>split</strong> up bundles at a component level.</p><p>Let’s say we have two components “A” and “B”. Before code-splitting, Tinder statically imported everything (A, B, etc) into their main bundle. This was inefficient as we didn’t need both A and B right away:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*DoTby4l_-A3TNdiUSZ0LmA.png" alt=""></p><p>After adding code-splitting, components A and B could be loaded as and when needed. Tinder did this by introducing React Loadable, <a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener">dynamic import()</a> and <a href="https://medium.com/faceyspacey/how-to-use-webpacks-new-magic-comment-feature-with-react-universal-component-ssr-a38fd3e296a" target="_blank" rel="noopener">webpack’s magic comment syntax</a> (for naming dynamic chunks) to their JS:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*aPY-1uGEvPV1dNKrrD8z4Q.png" alt=""></p><p>For “vendor” (library) chunking, Tinder used the webpack <a href="https://webpack.js.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener"><strong>CommonsChunkPlugin</strong></a> to move commonly used libraries across routes up to a single bundle file that could be cached for longer periods of time:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*R-kXPcn937BNoFXLukPJPg.png" alt=""></p><p>Next, Tinder used <a href="https://github.com/thejameskyle/react-loadable#loadablecomponentpreload" target="_blank" rel="noopener">React Loadable’s preload support</a> to preload potential resources for the next page on control component:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*G2JvbNCsm4eBXbGgyW6OmA.png" alt=""></p><p>Tinder also used <a href="https://developers.google.com/web/fundamentals/primers/service-workers/" target="_blank" rel="noopener">Service Workers</a> to precache all their route level bundles and include routes that users are most likely to visit in the main bundle without code-splitting. They’re of course also using common optimizations like JavaScript minification via UglifyJS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      parallel: <span class="literal">true</span>,</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        screw_ie8: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: SHOULD_SOURCEMAP</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><h4 id="Impact"><a href="#Impact" class="headerlink" title="Impact"></a>Impact</h4><p>After introducing route-based code-splitting their main bundle sizes went down from 166KB to 101KB and DCL improved from 5.46s to 4.69s:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*1Tt8bnnkyIi8aEw0BjRgMw.png" alt=""></p><h3 id="Long-term-asset-caching"><a href="#Long-term-asset-caching" class="headerlink" title="Long-term asset caching"></a>Long-term asset caching</h3><p>Ensuring <a href="https://webpack.js.org/guides/caching/" target="_blank" rel="noopener">long-term caching</a> of static resources output by webpack benefits from using [chunkhash] to add a cache-buster to each file.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*nofQB3Q-8IUo9f1Eipd0xw.png" alt=""></p><p>Tinder were using a number of open-source (vendor) libraries as part of their dependency tree. Changes to these libraries would originally cause the [chunkhash] to change and invalidate their cache. To address this, Tinder began defining a <a href="https://gist.github.com/tinder-rhsiao/89cd682c34d1e1307111b091801e6fe5]%28https://gist.github.com/tinder-rhsiao/89cd682c34d1e1307111b091801e6fe5" target="_blank" rel="noopener">whitelist of external dependencies</a> and splitting out their webpack manifest from the main chunk to improve caching. The bundle size is now about 160KB for both chunks.</p><h3 id="Preloading-late-discovered-resources"><a href="#Preloading-late-discovered-resources" class="headerlink" title="Preloading late-discovered resources"></a>Preloading late-discovered resources</h3><p>As a refresher, <a href="https://developers.google.com/web/fundamentals/performance/resource-prioritization" target="_blank" rel="noopener"><link rel="preload"></a> is a declarative instruction to the browser to load critical, late-discovered resources earlier on. In single-page applications, these resources can sometimes be JavaScript bundles.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*CaObLc_tGJvnllyV3CGD5w.png" alt=""></p><p>Tinder implemented support for to preload their critical JavaScript/webpack bundles that were important for the core experience. This reduced load time by 1s and first paint from 1000ms to about 500ms.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*AtzElAKy_pCvRjZN__YSsQ.png" alt=""></p><h3 id="Performance-budgets"><a href="#Performance-budgets" class="headerlink" title="Performance budgets"></a>Performance budgets</h3><p>Tinder adopted <strong>performance budgets</strong> for helping them hit their performance goals on mobile. As Alex Russell noted in “<a href="https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/" target="_blank" rel="noopener">Can you afford it?: real-world performance budgets</a>”, you have a limited headroom to deliver an experience when considering slow 3G connections being used on median mobile hardware.</p><p>To get and stay interactive quickly, Tinder enforced a budget of ~155KB for their main and vendor chunks, asynchronous (lazily loaded) chunks are ~55KB and other chunks are ~35KB. CSS has a limit of 20KB. This was crucial to ensuring they were able to avoid regressing on performance.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*OgDLsMxsy6IO79NmjQtcng.png" alt=""></p><h3 id="Webpack-Bundle-Analysis"><a href="#Webpack-Bundle-Analysis" class="headerlink" title="Webpack Bundle Analysis"></a>Webpack Bundle Analysis</h3><p><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener">Webpack Bundle Analyzer</a> allows you to discover what the dependency graph for your JavaScript bundles looks like so you can discover whether there’s low-hanging fruit to optimize.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*qsiUA0G50a4p3y2e4p7CyA.png" alt=""></p><p>Tinder used Webpack Bundle Analyzer to discover areas for improvement:</p><ul><li><strong>Polyfills:</strong> Tinder are targeting modern browsers with their experience but also support IE11 and Android 4.4 and above. <strong>To keep polyfills &amp; transpiled code to a minimum, they use For polyfills, they use</strong> <a href="https://github.com/babel/babel-preset-env" target="_blank" rel="noopener"><strong>babel-preset-env</strong></a> <strong>and</strong> <a href="https://github.com/zloirock/core-js" target="_blank" rel="noopener"><strong>core-js</strong></a><strong>.</strong></li><li><strong>Slimmer use of libraries:</strong> Tinder replaced <a href="https://github.com/localForage/localForage" target="_blank" rel="noopener">localForage</a> with direct use of IndexedDB.</li><li><strong>Better splitting:</strong> Split out components from the main bundles which were not required for first paint/interactive</li><li><strong>Code re-use:</strong> Created asynchronous common chunks to abstract chunks used more than three times from children.</li><li><strong>CSS:</strong> Tinder also removed <a href="https://www.smashingmagazine.com/2015/08/understanding-critical-css/" target="_blank" rel="noopener">critical CSS</a> from their core bundles (as they had shifted to server-side rendering and delivered this CSS anyway)</li></ul><p><img src="https://cdn-images-1.medium.com/max/1600/1*ZL3i2BRHo8Sq_dv1NyA8Dw.png" alt=""></p><p>Using bundle analysis led to also also taking advantage of Webpack’s <a href="https://github.com/lodash/lodash-webpack-plugin" target="_blank" rel="noopener">Lodash Module Replacement Plugin</a>. The plugin creates smaller Lodash builds by replacing feature sets of modules with noop, identity or simpler alternatives:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*of2Mv5ypTySRpTZQZVRj7A.png" alt=""></p><p>Webpack Bundle Analyzer can be integrated into your Webpack config. Tinder’s setup for it looks like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">      <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">        analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">        analyzerPort: <span class="number">8888</span>,</span><br><span class="line">        reportFilename: <span class="string">'report.html'</span>,</span><br><span class="line">        openAnalyzer: <span class="literal">true</span>,</span><br><span class="line">        generateStatsFile: <span class="literal">false</span>,</span><br><span class="line">        statsFilename: <span class="string">'stats.json'</span>,</span><br><span class="line">        statsOptions: <span class="literal">null</span></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>The majority of the JavaScript left is the main chunk which is trickier to split out without architecture changes to Redux Reducer and Saga Register.</p><h3 id="CSS-Strategy"><a href="#CSS-Strategy" class="headerlink" title="CSS Strategy"></a>CSS Strategy</h3><p>Tinder are using <a href="https://acss.io/" target="_blank" rel="noopener">Atomic CSS</a> to create highly reusable CSS styles. All of these atomic CSS styles are inlined in the initial paint and some of the rest of the CSS is loaded in the stylesheet (including animation or base/reset styles). Critical styles have a maximum size of 20KB gzipped, with recent builds coming in at a lean &lt; 11KB.</p><p>Tinder use <a href="http://cssstats.com/stats?url=https%253A%252F%252Ftinder.com&amp;ua=Browser%2520Default%0A" target="_blank" rel="noopener">CSS stats</a> and Google Analytics for each release to keep track of what has changed. Before Atomic CSS was being used, average page load times were ~6.75s. After they were ~5.75s.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*Uv_at6Xs7QYHZJ0iy8c7GQ.png" alt=""></p><p>Tinder Online also uses the PostCSS <a href="https://twitter.com/autoprefixer" target="_blank" rel="noopener">Autoprefixer plugin</a> to parse CSS and add vendor prefixes based on rules from <a href="http://caniuse.com" target="_blank" rel="noopener">Can I Use</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">    context: paths.basePath,</span><br><span class="line">    output: &#123; <span class="attr">path</span>: <span class="string">'./'</span> &#125;,</span><br><span class="line">    minimize: <span class="literal">true</span>,</span><br><span class="line">    postcss: [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">        browsers: [</span><br><span class="line">            <span class="string">'last 2 versions'</span>,</span><br><span class="line">            <span class="string">'not ie &lt; 11'</span>,</span><br><span class="line">            <span class="string">'Safari &gt;= 8'</span></span><br><span class="line">        ]</span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="Runtime-performance"><a href="#Runtime-performance" class="headerlink" title="Runtime performance"></a>Runtime performance</h3><h4 id="Deferring-non-critical-work-with-requestIdleCallback"><a href="#Deferring-non-critical-work-with-requestIdleCallback" class="headerlink" title="Deferring non-critical work with requestIdleCallback()"></a>Deferring non-critical work with requestIdleCallback()</h4><p>To improve runtime performance, Tinder opted to use <a href="https://developers.google.com/web/updates/2015/08/using-requestidlecallback" target="_blank" rel="noopener">requestIdleCallback()</a> to defer non-critical actions into idle time.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestIdleCallback(myNonEssentialWork);</span><br></pre></td></tr></table></figure><p>This included work like instrumentation beacons. They also simplified some HTML composite layers to reduce paint count while swiping.</p><p><strong>Using requestIdleCallback() for their instrumentation beacons while swiping:</strong></p><p>before..</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*oHJ8IjCs7AKdCrt9b28ZPw.png" alt=""></p><p>and after..</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*UTQuSSp7MGMY06mwYtQmaw.png" alt=""></p><h3 id="Dependency-upgrades"><a href="#Dependency-upgrades" class="headerlink" title="Dependency upgrades"></a>Dependency upgrades</h3><p><strong>Webpack 3 + Scope Hoisting</strong></p><p>In older versions of webpack, when bundling each module in your bundle would be wrapped in individual function closures. These wrapper functions made it slower for your JavaScript to execute in the browser. <a href="https://medium.com/webpack/webpack-3-official-release-15fd2dd8f07b" target="_blank" rel="noopener">Webpack 3</a> introduced “scope hoisting” — the ability to concatenate the scope of all your modules into one closure and allow for your code to have a faster execution time in the browser. It accomplishes this with the Module Concatenation plugin:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin()</span><br></pre></td></tr></table></figure><p><strong>Webpack 3’s scope hoisting improved Tinder’s initial JavaScript parsing time for vendor chunk by 8%.</strong></p><p><strong>React 16</strong></p><p>React 16 introduced improvements that <a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html#reduced-file-size" target="_blank" rel="noopener">decreased React’s bundle size</a> compared to previous versions. This was in part due to better packaging (using Rollup) as well as removing now unused code.</p><p><strong>By updating from React 15 to React 16, Tinder reduced the total gzipped size of their vendor chunk by ~7%.</strong></p><p>The size of react + react-dom used to be~50KB gzipped and is now just ~<strong>35KB</strong>. Thanks to <a href="https://twitter.com/dan_abramov" target="_blank" rel="noopener">Dan Abramov</a>, <a href="https://twitter.com/trueadm" target="_blank" rel="noopener">Dominic Gannaway</a> and <a href="https://twitter.com/natehunzaker" target="_blank" rel="noopener">Nate Hunzaker</a> who were instrumental in trimming down React 16’s bundle size.</p><h3 id="Workbox-for-network-resilience-and-offline-asset-caching"><a href="#Workbox-for-network-resilience-and-offline-asset-caching" class="headerlink" title="Workbox for network resilience and offline asset caching"></a>Workbox for network resilience and offline asset caching</h3><p>Tinder also use the <a href="https://developers.google.com/web/tools/workbox/get-started/webpack" target="_blank" rel="noopener">Workbox Webpack plugin</a> for caching both their <a href="https://developers.google.com/web/fundamentals/architecture/app-shell" target="_blank" rel="noopener">Application Shell</a> and their core static assets like their main, vendor, manifest bundles and CSS. This enables network resilience for repeat visits and ensures that the application starts-up more quickly when a user returns for subsequent visits.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*yXpAzyA1ODPk2OSOTA6Lhg.png" alt=""></p><h3 id="Opportunities"><a href="#Opportunities" class="headerlink" title="Opportunities"></a>Opportunities</h3><p>Digging into the Tinder bundles using <a href="https://www.npmjs.com/package/source-map-explorer" target="_blank" rel="noopener">source-map-explorer</a> (another bundle analysis tool), there are additional opportunities for reducing payload size. Before logging in, components like Facebook Photos, notifications, messaging and captchas are fetched. Moving these away from the critical path could save up to 20% off the main bundle:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*G1nq7BNZPEo2mFr_my5zjA.png" alt=""></p><p>Another dependency in the critical path is a 200KB Facebook SDK script. Dropping this script (which could be lazily loaded when needed) could shave 1 second off initial loading time.</p><h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p>Tinder are still iterating on their Progressive Web App but have already started to see positive results from the fruits of their labor. Check out Tinder.com and stay tuned for more progress in the near future!</p><p><em>With thanks and congrats to Roderick Hsiao, Jordan Banafsheha, and Erik Hellenbrand for launching Tinder Online and their input to this article. Thanks to Cheney Tsai for his review.</em></p><p><strong>Related reading:</strong></p><ul><li><a href="https://medium.com/dev-channel/a-pinterest-progressive-web-app-performance-case-study-3bd6ed2e6154" target="_blank" rel="noopener">A Pinterest PWA performance case study</a></li><li><a href="https://medium.com/dev-channel/treebo-a-react-and-preact-progressive-web-app-performance-case-study-5e4f450d5299" target="_blank" rel="noopener">A Treebo React &amp; Preact performance case study</a></li><li><a href="https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3" target="_blank" rel="noopener">Twitter Lite and high-performance PWAs at scale</a></li></ul><p>This article was cross-posted from <a href="https://calendar.perfplanet.com/2017/a-tinder-progressive-web-app-performance-case-study/" target="_blank" rel="noopener">Performance Planet</a>. If you’re new to React, I’ve found <a href="https://goo.gl/G1WGxU" target="_blank" rel="noopener">React for Beginners</a> a comprehensive starting point.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tinder recently swiped right on the web. Their new responsive &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Progressive Web App&lt;/a&gt; — &lt;a href=&quot;https://tinder.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tinder Online&lt;/a&gt; — is available to 100% of users on desktop and mobile, employing techniques for &lt;a href=&quot;https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript performance optimization&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Service Workers&lt;/a&gt; for network resilience and &lt;a href=&quot;https://developers.google.com/web/fundamentals/push-notifications/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Push Notifications&lt;/a&gt; for chat engagement. Today we’ll walk through some of their web perf learnings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*1HmfQhMAQL8kukiNtMZRjA.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>The Cost Of JavaScript</title>
    <link href="http://nth-blogs.herokuapp.com/2017/12/The-Cost-Of-JavaScript.html"/>
    <id>http://nth-blogs.herokuapp.com/2017/12/The-Cost-Of-JavaScript.html</id>
    <published>2017-12-16T08:01:29.000Z</published>
    <updated>2017-12-25T03:39:22.196Z</updated>
    
    <content type="html"><![CDATA[<p>As we build sites more heavily reliant on JavaScript, we sometimes pay for what we send down in ways that we can’t always easily see. In this post, I’ll cover why a little <strong>discipline</strong> can help if you’d like your site to load &amp; be interactive quickly on mobile devices.</p><p><strong>tl;dr: less code = less parse/compile + less transfer + less to decompress</strong><br><a id="more"></a></p><h4 id="Network"><a href="#Network" class="headerlink" title="Network"></a><strong>Network</strong></h4><p>When most developers think about the cost of JavaScript, they think about it in terms of the <strong>download &amp; execution cost.</strong> Sending more bytes of JavaScript over the wire takes longer the slower a user’s connection is.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*U00XcnhqoczTuJ8NH8UhOw.png" alt=""></p><p>This can be a problem, even in first-world countries, as the <strong>effective network connection type</strong> a user has might not actually be 3G, 4G or WiFi. You can be on coffee-shop Wifi but connected to a cellular hotspot with 2G speeds.</p><p>You can <strong>reduce</strong> the network transfer cost of JavaScript by:</p><ul><li><strong>Only shipping the code a user needs</strong>. Code-splitting can help here.</li><li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer" target="_blank" rel="noopener"><strong>Minifying</strong></a> <strong>it</strong> (Uglify for ES5, <a href="https://github.com/babel/minify" target="_blank" rel="noopener">babel-minify</a> or <a href="https://www.npmjs.com/package/uglify-es" target="_blank" rel="noopener">uglify-es</a> for ES2015)</li><li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer" target="_blank" rel="noopener"><strong>Compressing it heavily</strong></a> (using <a href="https://www.smashingmagazine.com/2016/10/next-generation-server-compression-with-brotli/" target="_blank" rel="noopener">Brotli</a> ~<a href="https://twitter.com/paulcalvano/status/924660429846208514" target="_blank" rel="noopener">q11</a>, Zopfli or gzip). Brotli outperforms gzip on compression ratio. It helped CertSimple save <a href="https://speakerdeck.com/addyosmani/the-browser-hackers-guide-to-instant-loading?slide=30" target="_blank" rel="noopener">17%</a> on the size of compressed JS bytes and LinkedIn save <a href="https://engineering.linkedin.com/blog/2017/05/boosting-site-speed-using-brotli-compression" target="_blank" rel="noopener">4%</a> on their load times.</li><li><strong>Removing unused code</strong>. Identify with <a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes" target="_blank" rel="noopener">DevTools code coverage</a>. For stripping code, see <a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener">tree-shaking</a>, <a href="https://developers.google.com/closure/compiler/" target="_blank" rel="noopener">Closure Compiler</a>’s advanced optimizations and library trimming plugins like <a href="https://github.com/lodash/babel-plugin-lodash" target="_blank" rel="noopener">lodash-babel-plugin</a> or Webpack’s <a href="https://iamakulov.com/notes/webpack-front-end-size-caching/#moment-js" target="_blank" rel="noopener">ContextReplacementPlugin</a> for libraries like Moment.js. Use babel-preset-env &amp; browserlist to avoid transpiling features already in modern browsers. Advanced developers may find careful <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener">analysis of their Webpack bundles</a> helps identify opportunities to trim unneeded dependencies.</li><li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" target="_blank" rel="noopener"><strong>Caching it</strong></a> <strong>to minimize network trips.</strong> Determine optimal lifetimes for scripts (max-age) &amp; supply validation tokens (ETag) to avoid transferring unchanged bytes. Service Worker caching can make your app network resilient &amp; give you eager access to features like <a href="https://v8project.blogspot.com/2015/07/code-caching.html" target="_blank" rel="noopener">V8’s code cache</a>. Learn about long-term caching with <a href="https://webpack.js.org/guides/caching/" target="_blank" rel="noopener">filename hashing</a>.</li></ul><p><img src="https://cdn-images-1.medium.com/max/2000/1*8Spf9To8dzTG3Xy9s57oVA.png" alt="">Best practices for reducing how much JavaScript you’re shipping down to users.</p><h4 id="Parse-Compile"><a href="#Parse-Compile" class="headerlink" title="Parse/Compile"></a><strong>Parse/Compile</strong></h4><p>Once downloaded, one of JavaScript’s <strong>heaviest</strong> costs is the time for a JS engine to <strong>parse/compile</strong> this code. In Chrome DevTools, parse and compile are part of the yellow “Scripting” time in the Performance panel.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*_4gNDmBlXxOF2-KmsOrKkw.png" alt=""></p><p>The Bottom-Up/Call Tree allow viewing exact Parse/compile timings:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*GdrVt_BTTzzBOIoyZZsQZQ.png" alt="">Chrome DevTools Performance panel &gt; Bottom-Up. With V8’s Runtime Call Stats enabled, we can see time spent in phases like Parse and Compile</p><p>But, why does this matter?</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*Dirw7RdQj9Dktc-Ny6-xbA.png" alt=""></p><p><strong>Spending a long time parsing/compiling code can heavily delay how soon a user can interact with your site. The more JavaScript you send, the longer it will take to parse &amp; compile it before your site is interactive.</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*6Y665hpxfWNMu2EXu3VGlw.png" alt=""></p><blockquote><p>Byte-for-byte, <strong>JavaScript is more expensive for the browser to process than the equivalently sized image or Web Font </strong>— Tom Dale</p></blockquote><p>Compared to JavaScript, there are numerous costs involved in processing equivalently sized images (they still have to be decoded!) but on average mobile hardware, JS is more likely to negatively impact a page’s interactivity.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*PRVzNizF9jQ_QADF5lQHpA.png" alt="">JavaScript and image bytes have very different costs. Images usually don’t block the main thread or prevent interfaces from getting interactive while being decoded and rasterized. JS however can delay interactivity due to parse, compile and execution costs.</p><p>When we talk about parse and compile being slow; context is important — we’re talking about <strong>average</strong> mobile phones here. <strong>Average users can have phones with slow CPUs and GPUs, no L2/L3 cache and which may even be memory constrained.</strong></p><blockquote><p>Network capabilities and device capabilities don’t always match up. A user with an amazing Fiber connection doesn’t necessarily have the best CPU to parse and evaluate JavaScript sent to their device. This is also true in reverse..a terrible network connection, but a blazing fast CPU. — Kristofer Baxter, LinkedIn</p></blockquote><p>In <a href="https://medium.com/reloading/javascript-start-up-performance-69200f43b201" target="_blank" rel="noopener">JavaScript Start-up Performance</a>, I noted the cost of parsing ~1MB of decompressed (simple) JavaScript on low and high-end hardware. <strong>There is a 2–5x difference in time to parse/compile code between the fastest phones on the market and average phones</strong>.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*8BQ3bCYu1AVvJWPR1x8Yig.png" alt=""><strong>Parse times for a 1MB bundle of JavaScript (~250KB gzipped)</strong> across desktop &amp; mobile devices of differing classes. When looking at the cost of parse, it’s the <strong>decompressed</strong> figures to consider e.g ~250KB gzipped JS decompresses to ~1MB of code.</p><p>What about a real-world site, like CNN.com?</p><p><strong>On the high-end iPhone 8 it takes just ~4s to parse/compile CNN’s JS compared to ~13s for an average phone (Moto G4)</strong>. This can significantly impact how quickly a user can fully interact with this site.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*7ysArXJ4nN0rQEMT9yZ_Sg.png" alt="">Parse times comparing the performance of Apple’s A11 Bionic chip to the Snapdragon 617 in more average Android hardware.</p><p>This highlights the importance of testing on <strong>average</strong> hardware (like the Moto G4) instead of just the phone that might be in your pocket. Context matters however: <strong>optimize for the device &amp; network conditions <em>your</em> users have.</strong></p><p><img src="https://cdn-images-1.medium.com/max/1600/1*6oEpMEi_pjRNjmtN9i2TCA.png" alt=""></p><p>Analytics can provide insight into the <a href="https://crossbrowsertesting.com/blog/development/use-google-analytics-find-devices-customers-use/" target="_blank" rel="noopener">mobile device classes</a> your real users are accessing your site with. This can provide opportunities to understand the real CPU/GPU constraints they’re operating with.</p><p><strong>Are we really sending down too much JavaScript? Err, possibly :)</strong></p><p>Using HTTP Archive (top ~500K sites) to analyze the state of <a href="http://beta.httparchive.org/reports/state-of-javascript#bytesJs" target="_blank" rel="noopener">JavaScript on mobile</a>, we can see that 50% of sites take over 14 seconds to get interactive. These sites spend up to 4 seconds just parsing &amp; compiling JS.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*sVgunAoet0i5FWEI9NSyMg.png" alt=""></p><p>Factor in the time it takes to fetch and process JS and other resources and it’s perhaps not surprising that users can be left waiting a while before feeling pages are ready to use. We can definitely do better here.</p><p><strong>Removing non-critical JavaScript from your pages can reduce transmission times, CPU-intensive parsing &amp; compiling and potential memory overhead. This also helps get your pages interactive quicker.</strong></p><h4 id="Execution-time"><a href="#Execution-time" class="headerlink" title="Execution time"></a>Execution time</h4><p>It’s not just parse and compile that can have a cost. <strong>JavaScript execution</strong> (running code once parsed/compiled) is one of the operations that has to happen on the main thread. Long execution times can also push out how soon a user can interact with your site.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*ec0wEKKVl7iQidBks3oDKg.png" alt=""></p><blockquote><p>If script executes for more than 50ms, time-to-interactive is delayed by the <em>entire</em> amount of time it takes to download, compile, and execute the JS — Alex Russell</p></blockquote><p>To address this, JavaScript benefits from being in <strong>small chunks</strong> to avoid locking up the main thread. Explore if you can reduce how much work is being done during execution.</p><h4 id="Patterns-for-reducing-JavaScript-delivery-cost"><a href="#Patterns-for-reducing-JavaScript-delivery-cost" class="headerlink" title="Patterns for reducing JavaScript delivery cost"></a>Patterns for reducing JavaScript delivery cost</h4><p>When you’re trying to keep parse/compile &amp; network transmit times for JavaScript slow, there are patterns that can help like route-based chunking or <a href="https://developers.google.com/web/fundamentals/performance/prpl-pattern/" target="_blank" rel="noopener">PRPL</a>.</p><p>PRPL is a pattern that optimizes for interactivity through aggressive code-splitting and caching:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*VgdNbnl08gcetpqE1t9P9w.png" alt=""></p><p>Let’s visualize the impact it can have.</p><p>We analyze the load-time of popular mobile sites and Progressive Web Apps using V8’s Runtime Call Stats. As we can see, parse time (shown in orange) is a significant portion of where many of these sites spend their time:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*9BMRW5i_bS4By_JSESXX8A.png" alt=""></p><p><a href="https://wego.com" target="_blank" rel="noopener">Wego</a>, a site that uses PRPL, manages to maintain a low parse time for their routes, getting interactive very quickly. Many of the other sites above adopted code-splitting and performance budgets to try lowering their JS costs.</p><h4 id="Other-costs"><a href="#Other-costs" class="headerlink" title="Other costs"></a>Other costs</h4><p>JavaScript can impact page performance in other ways:</p><ul><li>Memory. Pages can appear to jank or pause frequently due to GC (garbage collection). When a browser reclaims memory, JS execution is paused so a browser frequently collecting garbage can pause execution more frequently than we may like. Avoid memory leaks and frequent gc pauses to keep pages jank free.</li><li>During runtime, long-running JavaScript can block the main-thread causing pages that are unresponsive. Chunking up work into smaller pieces (using requestAnimationFrame() or requestIdleCallback() for scheduling) can minimize responsiveness issues.</li></ul><p><strong>Progressive Bootstrapping</strong></p><p>Many sites optimize content visibility as the expensive of interactivity. To get a fast first paint when you do have large JavaScript bundles, developers sometimes employ server-side rendering; then “upgrade” it to attach event handlers when the JavaScript finally gets fetched.</p><p>Be careful — this has its own costs. You 1) generally send down a <em>larger</em> HTML response which can push our interactivity, 2) can leave the user in an uncanny valley where half the experience can’t actually be interactive until JavaScript finishes processing.</p><p>Progressive Bootstrapping may be a better approach. Send down a minimally functional page (composed of just the HTML/JS/CSS needed for the current route). As more resources arrive, the app can lazy-load and unlock more features.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*zY03Y5nVEY21FXA63Qe8PA.png" alt=""><a href="https://twitter.com/aerotwist/status/729712502943174657" target="_blank" rel="noopener">Progressive Bootstrapping</a> visual by Paul Lewis</p><p><strong>Loading code proportionate to what’s in view is the holy grail. PRPL and Progressive Bootstrapping are patterns that can help accomplish this.</strong></p><h4 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h4><p><strong>Transmission size is critical for low end networks. Parse time is important for CPU bound devices. Keeping these low matters.</strong></p><p>Teams have found success adopting strict performance budgets for keeping their JavaScript transmission &amp; parse/compile times low. See Alex Russell’s “<a href="https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/" target="_blank" rel="noopener">Can You Afford It?: Real-world Web Performance Budgets</a>” for guidance on budgets for mobile.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*U8PJVNrA_tYADQ6_S4HUYw.png" alt="">It’s useful to consider how much JS “headroom” the architectural decisions we make can leave us for app logic.</p><p>If you’re building a site that targets mobile devices, do your best to develop on representative hardware, keep your JavaScript parse/compile times low and adopt a Performance Budget for ensuring your team are able to keep an eye on their JavaScript costs.</p><h4 id="Learn-More"><a href="#Learn-More" class="headerlink" title="Learn More"></a>Learn More</h4><ul><li><a href="https://medium.com/reloading/javascript-start-up-performance-69200f43b201" target="_blank" rel="noopener">JavaScript Start-up Performance</a></li><li><a href="https://nolanlawson.github.io/frontendday-2016/" target="_blank" rel="noopener">Solving the web performance crisis</a> — Nolan Lawson</li><li><a href="https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/" target="_blank" rel="noopener">Can you afford it? Real-world performance budgets</a> — Alex Russell</li><li><a href="https://twitter.com/kristoferbaxter/status/908144931125858304" target="_blank" rel="noopener">Evaluating web frameworks and libraries</a> — Kristofer Baxter</li><li><a href="https://blog.cloudflare.com/results-experimenting-brotli/" target="_blank" rel="noopener">Cloudflare’s Results of experimenting with Brotli</a> for compression (note dynamic Brotli at a higher quality can delay initial page render so evaluate carefully. You probably want to statically compress instead.)</li><li><a href="https://medium.com/@samccone/performance-futures-bundling-281543d9a0d5" target="_blank" rel="noopener">Performance Futures</a> — Sam Saccone</li></ul><p><em>With thanks to Nolan Lawson, Kristofer Baxter and Jeremy Wagner for their feedback.</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As we build sites more heavily reliant on JavaScript, we sometimes pay for what we send down in ways that we can’t always easily see. In this post, I’ll cover why a little &lt;strong&gt;discipline&lt;/strong&gt; can help if you’d like your site to load &amp;amp; be interactive quickly on mobile devices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr: less code = less parse/compile + less transfer + less to decompress&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Start-up Performance</title>
    <link href="http://nth-blogs.herokuapp.com/2017/12/JavaScript-Start-up-Performance.html"/>
    <id>http://nth-blogs.herokuapp.com/2017/12/JavaScript-Start-up-Performance.html</id>
    <published>2017-12-16T07:46:39.000Z</published>
    <updated>2017-12-16T07:59:58.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Start-up-Performance"><a href="#JavaScript-Start-up-Performance" class="headerlink" title="JavaScript Start-up Performance"></a>JavaScript Start-up Performance</h1><p>As web developers, we know how easy it is to end up with web page bloat. But <strong>loading</strong> a webpage is much more than shipping bytes down the wire. Once the browser has downloaded our page’s scripts it then has to parse, interpret &amp; run them. In this post, we’ll dive into this phase for JavaScript, <em>why</em> it might be slowing down your app’s start-up &amp; <em>how</em> you can fix it.</p><p>Historically, we just haven’t spent a lot of time optimizing for the JavaScript Parse/Compile step. We almost expect scripts to be immediately parsed and executed as soon as the parser hits a <code>&lt;script&gt;</code> tag. But this isn’t quite the case. <strong>Here’s a simplified breakdown of how V8 works</strong>:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*GuWInZljjvtDpdeT6O0emA.png" alt="">A simplified view of how V8 works. This is our idealized pipeline that we’re working towards.</p><p>Let’s focus on some of the main phases.<br><a id="more"></a></p><h4 id="What-slows-our-web-apps-from-booting-up"><a href="#What-slows-our-web-apps-from-booting-up" class="headerlink" title="What slows our web apps from booting up?"></a><strong>What slows our web apps from booting up?</strong></h4><p>Parsing, Compiling and Executing scripts are things a JavaScript engine spends <strong>significant</strong> time in during start-up. This matters as if it takes a while, it can <strong>delay</strong> how soon users can <strong>interact</strong> with our site. Imagine if they can see a button but not click or touch it for multiple seconds. This can <strong>degrade</strong> the user experience.</p><p><img src="https://cdn-images-1.medium.com/max/2000/0*M94-AavlZjGoudZG." alt="">Parse &amp; Compile times for a popular website using V8’s Runtime Call Stats in Chrome Canary. Notice how a slow Parse/Compile on desktop can take far longer on average mobile phones.</p><p>Start-up times matter for <strong>performance-sensitive</strong> code. In fact, V8 - Chrome’s JavaScript engine, spends a <strong>large</strong> amount of time parsing and compiling scripts on top sites like Facebook, Wikipedia and Reddit:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*XjHkzz0B7KlcDbLFD1JS8Q.png" alt="">The pink area (JavaScript) represents time spent in V8 and Blink’s C++, while the orange and yellow represent parse and compile.</p><p>Parse and Compile have also been highlighted as a bottleneck by a <strong>number</strong> of large sites &amp; frameworks you may be using. Below are tweets from Facebook’s Sebastian Markbage and Google’s Rob Wormald:</p><script src="//gist.github.com/https://medium.com/media/bfe5fc0258489a112c44c78f4de550d9?postId=69200f43b201.js"></script><script src="//gist.github.com/https://medium.com/media/553bef66abd9082b744501ac06ca6cc5?postId=69200f43b201.js"></script><img src="https://cdn-images-1.medium.com/max/1200/1*nkJwMuE5PpgF_pE0e6RM6g.jpeg" alt="">Sam Saccone calls out the cost of JS parse in ‘<a href="https://www.youtube.com/watch?v=RWLzUnESylc" target="_blank" rel="noopener">Planning for Performance</a>’<br><br>As we move to an increasingly mobile world, it’s important that we understand the <strong>time spent in Parse/Compile can often be 2–5x as long on phones as on desktop</strong>. Higher-end phones (e.g the iPhone or Pixel) will perform very differently to a Moto G4. This highlights the importance of us testing on representative hardware (not just high-end!) so our users’ experiences don’t suffer.<br><br><img src="https://cdn-images-1.medium.com/max/1600/1*dnhO1M_zlmAhvtQY_7tZmA.jpeg" alt=""><a href="https://docs.google.com/spreadsheets/d/1wHcNNQea28LhwQ_amFamT33d5woVrJfJy53Z1k6V090/edit?usp=sharing" target="_blank" rel="noopener">Parse times</a> for a 1MB bundle of JavaScript across desktop &amp; mobile devices of differing classes. Notice how close a high-end phone like an iPhone 7 is to perf on a Macbook Pro vs the performance as we go down the graph towards average mobile hardware.<br><br>If we’re shipping huge bundles for our app, this is where endorsing modern bundling techniques likecode-splitting, tree-shaking and Service Worker caching can really make a huge difference. That said, <strong>even a small bundle, written poorly or with poor library choices can result in the main thread being pegged for a long time in compilation or function call times.</strong> It’s important to holistically measure and understand where our real bottlenecks are.<br><br>### What Are JavaScript Parse &amp; Compile bottlenecks for the average website?<br><br>“Buuuut, I’m not Facebook”, I hear you say dear, reader. <strong>“How heavy are Parse &amp; Compile times for average sites out in the wild?”</strong>, you might be asking. Let’s science this out!<br><br>I spent two months <a href="https://github.com/GoogleChrome/discovery/issues/1" target="_blank" rel="noopener">digging into</a> the performance of a large set of production sites (6000+) built with different libraries and frameworks — like React, Angular, Ember and Vue. Most of the tests were recently redone on WebPageTest so you can easily redo them yourself or dig into the numbers if you wish. Here are some insights.<br><br><strong>Apps became interactive in 8 seconds on desktop (using cable) and 16 seconds on mobile (Moto G4 over 3G)</strong><br><br><img src="https://cdn-images-1.medium.com/max/2000/1*WC4zanI0DKAoSiJVU3VUeA.png" alt=""><br><br><strong>What contributed to this? Most apps spent an average of 4 seconds in start-up (Parse/Compile/Exec)..on desktop.</strong><br><br><img src="https://cdn-images-1.medium.com/max/1600/1*NacL9cZJ1osZowPS6hbCsQ.jpeg" alt=""><br><br>On mobile, parse times were up to 36% higher than they were on desktop.<br><br><img src="https://cdn-images-1.medium.com/max/2000/1*uTRfB5pne06h8lp5jGtiIQ.jpeg" alt=""><br><br><strong>Was everyone shipping huge JS bundles? Not as large as I had guessed, but there’s room for improvement.</strong> At the median, developers shipped 410KB of gzipped JS for their pages. This is in line with the 420KB over ‘average JS per page’ reported by the HTTPArchive. The worst offenders were sending anywhere up to 10MB of script down the wire. Oof.<br><br><img src="https://cdn-images-1.medium.com/max/1600/1*GvwfE2GjKQyLBKPmmfRwuA.png" alt=""><a href="http://httparchive.org/trends.php?s=All&amp;minlabel=Nov+15+2015&amp;maxlabel=Nov+15+2016#bytesJS&amp;reqJS" target="_blank" rel="noopener">HTTPArchive stat</a>: the average page ships down 420KB of JavaScript<br><br><strong>Script size is important, but it isn’t everything. Parse and Compile times don’t necessarily increase linearly when the script size increases.</strong> Smaller JavaScript bundles generally do result in a faster <strong>load</strong> time (regardless of our browser, device &amp; network connection) but 200KB of our JS !== 200KB of someone else’s and can have wildly different parse and compile numbers.<br><br>### <strong>Measuring JavaScript Parse &amp; Compile today</strong><br><br><strong>Chrome DevTools</strong><br><br>Timeline (Performance panel) &gt; Bottom-Up/Call Tree/Event Log will let us drill into the amount of time spent in Parse/Compile. For a more complete picture (like the time spent in Parsing, Preparsing or Lazy Compiling), we can turn on <strong>V8’s Runtime Call Stats</strong>. In Canary, this will be in Experiments &gt; V8 Runtime Call Stats on Timeline.<br><br><img src="https://cdn-images-1.medium.com/max/2000/0*rWkYJzc6Cp0r3Xkr." alt=""><br><br><strong>Chrome Tracing</strong><br><br><strong>about:tracing</strong> — Chrome’s lower-level Tracing tool allows us to use the <code>disabled-by-default-v8.runtime_stats</code> category to get deeper insights into where V8 spends its time. V8 have a <a href="https://docs.google.com/presentation/d/1Lq2DD28CGa7bxawVH_2OcmyiTiBn74dvC6vn2essroY/edit#slide=id.g1a504e63c9_2_84" target="_blank" rel="noopener">step-by-step guide</a> on how to use this that was published just the other day.<br><br><img src="https://cdn-images-1.medium.com/max/1600/0*P-_pLIITtYJRikRN." alt=""><br><br><strong>WebPageTest</strong><br><br><img src="https://cdn-images-1.medium.com/max/1200/1*y6x_vr7aOxK4jHG9blgseg.png" alt=""><br><br>WebPageTest’s “Processing Breakdown” page includes insights into V8 Compile, EvaluateScript and FunctionCall time when we do a trace with the Chrome &gt; Capture Dev Tools Timeline enabled.<br><br>We can now also get out the <strong>Runtime Call Stats</strong> by specifying <code>disabled-by-default-v8.runtime_stats</code> as a custom Trace category (Pat Meenan of WPT now does this by default!).<br><br><img src="https://cdn-images-1.medium.com/max/1600/1*tV48evC-XzYkoHonyKGkOw.png" alt=""><br><br>For a guide on how to get the most out of this, see <a href="https://gist.github.com/addyosmani/45b135900a7e3296e22673148ae5165b" target="_blank" rel="noopener">this gist</a> I wrote up.<br><br><strong>User Timing</strong><br><br>It’s possible to measure Parse times through the <a href="https://w3c.github.io/user-timing/#dom-performance-mark" target="_blank" rel="noopener">User Timing API</a> as Nolan Lawson points out below:<br><br><script src="//gist.github.com/https://medium.com/media/3a4c46356a6de348271a00bff1d4d2d4?postId=69200f43b201.js"></script><p>The third <code>&lt;script&gt;</code> here isn’t important, but it’s the first <code>&lt;script&gt;</code> being separate from the second (<em>performance.mark()</em> starting before the <code>&lt;script&gt;</code> has been reached) that is.</p><p><em>This approach can be affected on subsequent reloads by V8’s preparser. This could be worked around by appending a random string to the end of the script, something Nolan does in his optimize-js benchmarks.</em></p><p>I use a similar approach for measuring the impact of JavaScript Parse times using Google Analytics:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*ziA8f9KhB1gOt-Mq07cRFw.jpeg" alt="">A custom Google Analytics dimension for ‘parse’ allows me to measure JavaScript parse times from real users and devices hitting my pages in the wild.</p><p><strong>DeviceTiming</strong></p><p>Etsy’s <a href="https://github.com/danielmendel/DeviceTiming" target="_blank" rel="noopener">DeviceTiming</a> tool can help measure parse &amp; execution times for scripts in a controlled environment. It works by wrapping local scripts with instrumentation code so that each time our pages are hit from different devices (e.g laptops, phones, tablets) we can locally compare parse/exec. Daniel Espeset’s <a href="http://talks.desp.in/unpacking-the-black-box" target="_blank" rel="noopener">Benchmarking JS Parsing and Execution on Mobile Devices</a> goes into more detail on this tool.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*FFzrH2QUiQZFX2rlF5e2-g.jpeg" alt=""></p><h3 id="What-can-we-do-to-lower-our-JavaScript-parse-times-today"><a href="#What-can-we-do-to-lower-our-JavaScript-parse-times-today" class="headerlink" title="What can we do to lower our JavaScript parse times today?"></a><strong>What can we do to lower our JavaScript parse times today?</strong></h3><ul><li><strong>Ship less JavaScript</strong>. The less script that requires parsing, the lower our overall time spent in the parse &amp; compile phases will be.</li><li><strong>Use code-splitting to only ship the code a user needs for a route and lazy load the rest</strong>. This probably is going to help the most to avoid parsing too much JS. Patterns like <a href="https://developers.google.com/web/fundamentals/performance/prpl-pattern/" target="_blank" rel="noopener">PRPL</a> encourage this type of route-based chunking, now used by Flipkart, Housing.com and Twitter.</li><li><strong>Script streaming:</strong> In the past, V8 have told developers to use <code>async/defer</code> to opt into <a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html" target="_blank" rel="noopener">script streaming</a> for parse-time improvements of between 10–20%. This allows the HTML parser to at least detect the resource early, push the work to the script streaming thread and not halt the document parsing. Now that this is done for parser-blocking scripts too, I don’t think there’s anything actionable we need to do here. V8 recommend <strong>loading larger bundles earlier on as there’s only one streamer thread</strong> (more on this later)</li><li><strong>Measure the parse cost of our dependencies</strong>, such as libraries and frameworks. Where possible, switch them out for dependencies with faster parse times (e.g switch React for Preact or Inferno, which require fewer bytes to bootup and have smaller parse/compile times). Paul Lewis covered <a href="https://aerotwist.com/blog/when-everything-is-important-nothing-is/" target="_blank" rel="noopener">framework bootup</a> costs in a recent article. As Sebastian Markbage has also <a href="https://twitter.com/sebmarkbage/status/829733454119989248" target="_blank" rel="noopener">noted</a>, <strong>a good way to measure start-up costs for frameworks is to first render a view, delete and then render again as this can tell you how it scales.</strong> The first render tends to warm up a bunch of lazily compiled code, which a larger tree can benefit from when it scales.</li></ul><p>If our JavaScript framework of choice supports an ahead-of-time compilation mode (AoT), this can also help heavily reduce the time spent in parse/compile. Angular apps benefit from this for example:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*sr4eb-cx3lq7hVrJGfDNaw.png" alt="">Nolan Lawson’s ‘<a href="https://channel9.msdn.com/Blogs/msedgedev/nolanlaw-web-perf-crisis" target="_blank" rel="noopener">Solving the Web Performance Crisis</a>’</p><h3 id="What-are-browsers-doing-to-improve-Parse-amp-Compile-times-today"><a href="#What-are-browsers-doing-to-improve-Parse-amp-Compile-times-today" class="headerlink" title="What are browsers doing to improve Parse &amp; Compile times today?"></a><strong>What are <em>browsers</em> doing to improve Parse &amp; Compile times today?</strong></h3><p>Developers are not the only ones to still be catching up on real-world start-up times being an area for improvement. V8 discovered that Octane, one of our more historical benchmarks, was a poor proxy for real-world performance on the 25 popular sites we usually test. Octane can be a poor proxy for 1) <strong>JavaScript frameworks</strong> (typically code that isn’t mono/polymorphic) and 2) <strong>real-page app startup</strong> (where most code is cold). These two use-cases are pretty important for the web. That said, Octane isn’t unreasonable for all kinds of workloads.</p><p>The V8 team has been hard at work improving start-up time and we’ve already seem some wins here:</p><script src="//gist.github.com/https://medium.com/media/f34895d2d5798e73d1987965288e5a55?postId=69200f43b201.js"></script><p>We also estimate a 25% improve on V8 parse times for many pages looking at our Octane-Codeload numbers:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*cE8uvuvb0-iZslygh2NCTQ.jpeg" alt=""></p><p>And we’re seeing wins in this area for Pinterest too. There are a number of other explorations V8 has started over the last few years to improve Parsing and Compile times.</p><p><strong>Code caching</strong></p><p><img src="https://cdn-images-1.medium.com/max/1200/1*xChjWSbT1rCqgLMacOMotQ.png" alt="">From <a href="https://www.nativescript.org/blog/using-v8-code-caching-to-minimize-app-load-time-on-android" target="_blank" rel="noopener">using V8’s code caching</a></p><p>Chrome 42 introduced <a href="http://v8project.blogspot.com/2015/07/code-caching.html" target="_blank" rel="noopener">code caching </a>— a way to store a local copy of compiled code so that when users returned to the page, steps like script fetching, parsing and compilation could all be skipped. At the time we noted that this change allowed Chrome to avoid about 40% of compilation time on future visits, but I want to provide a little more insight into this feature:</p><ul><li>Code caching triggers for scripts that are executed <strong>twice in 72 hours</strong>.</li><li>For scripts of Service Worker: Code caching triggers for scripts that are executed twice in 72 hours.</li><li>For scripts stored in Cache Storage via Service Worker: Code caching triggers for scripts in the <strong>first execution</strong>.</li></ul><p>So, yes. <strong>If our code is subject to caching V8 will skip parsing and compiling on the third load.</strong></p><p>We can play around with these in <em>chrome://flags/#v8-cache-strategies-for-cache-storage</em> to look at the difference. We can also run Chrome with — js-flags=profile-deserialization to see if items are being loaded from the code cache (these are presented as deserialization events in the log).</p><p>One caveat with code caching is that it only caches what’s being eagerly compiled. This is generally only the top-level code that’s run once to setup global values. Function definitions are usually lazily compiled and aren’t always cached. <strong>IIFEs</strong> (for users of optimize-js ;)) are also included in the V8 code cache as they are also eagerly compiled.</p><p><strong>Script Streaming</strong></p><p><a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html" target="_blank" rel="noopener">Script streaming</a> allows async or defer scripts to be parsed on a <strong>separate background thread</strong> once downloading begins and improves page loading times by up to 10%. As noted earlier, this now also works for <strong>sync</strong> scripts.</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*ooXJ0NES-gXEzteaGPL2nQ.png" alt=""></p><p>Since the feature was first introduced, V8 have switched over to allowing <strong>all scripts</strong>, <em>even</em> parser blocking <code>&lt;script src=””&gt;</code> to be parsed on a background thread so everyone should be seeing some wins here. The only caveat is that there’s only one streaming background thread and so it makes sense to put our large/critical scripts in here first. <em>It’s important to measure for any potential wins here.</em></p><p><strong>Practically, <code>&lt;script defer&gt;</code> in the <code>&lt;head&gt;</code> so we can discover the resource early and then parse it on the background thread.</strong></p><p>It’s also possible to check with DevTools Timeline whether the correct scripts get streamed — if there’s one big script that dominates the parse time, it would make sense to make sure it’s (usually) picked up by the streaming.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*FAvUG7DrVJUXCK3oweMSLQ.png" alt=""></p><p><strong>Better Parsing &amp; Compiling</strong></p><p>Work is ongoing for a slimmer and faster Parser that frees up memory and is more efficient with data structures. Today, the <strong>largest</strong> cause of main thread jank for V8 is the nonlinear parsing cost. Take a snippet of UMD:</p><p>(function (global, <strong>module</strong>) { … })(this, function <strong>module</strong>() { <em>my functions</em> })</p><p>V8 won’t know that <strong>module</strong> is definitely needed so we won’t compile it when the main script gets compiled. When we decide to compile <strong>module</strong>, we need to reparse all of the inner functions. This is what makes V8’s parse-times non-linear. Every function at n-th depth is parsed n times and causes jank.</p><p>V8 are already working on collecting info about inner functions during the initial compile, so any future compilations can <em>ignore</em> their inner functions. For <strong>module</strong>-style functions, this should result in a large perf improvement.</p><p>See ‘<a href="https://docs.google.com/presentation/d/1214p4CFjsF-NY4z9in0GEcJtjbyVQgU0A-UqEvovzCs/edit#slide=id.p" target="_blank" rel="noopener">The V8 Parser(s) — Design, Challenges, and Parsing JavaScript Better</a>’ for the full story.</p><p>V8 are also exploring offloading parts of JavaScript compilation to the <strong>background</strong> during startup.</p><p><strong>Precompiling JavaScript?</strong></p><p>Every few years, it’s proposed engines offer a way to <em>precompile</em> scripts so we don’t waste time parsing or compiling code pops up. The idea is if instead, a build-time or server-side tool can just generate bytecode, we’d see a large win on start-up time. My opinion is shipping bytecode can increase your load-time (it’s larger) and you would likely need to sign the code and process it for security. V8’s position is for now we think exploring avoiding reparsing internally will help see a decent enough boost that precompilation may not offer too much more, but are always open to discussing ideas that can lead to faster startup times. That said, V8 are exploring being more aggressive at compiling and code-caching scripts when you update a site in a Service Worker and we hope to see some wins with this work.</p><p>We discussed precompilation at BlinkOn 7 with Facebook and Akamai and my notes can be found <a href="https://gist.github.com/addyosmani/4009ee1238c4b1ff6f2a2d8a5057c181" target="_blank" rel="noopener">here</a>.</p><p><strong>The Optimize JS lazy-parsing parens ‘hack’</strong></p><p>JavaScript engines like V8 have a lazy parsing heuristic where they pre-parse most of the functions in our scripts before doing a complete round of parsing (e.g to check for syntax errors). This is based on the idea that most pages have JS functions that are lazily executed if at all.</p><p><img src="https://cdn-images-1.medium.com/max/1200/1*LMRg_jHJeP53vdy8aiTEJQ.png" alt=""></p><p>Pre-parsing can speed up startup times by only checking the minimal a browser needs to know about functions. This breaks down with IIFEs. Although engines try to skip pre-parsing for them, the heuristics aren’t always reliable and this is where tools like <a href="https://github.com/nolanlawson/optimize-js" target="_blank" rel="noopener">optimize-js</a> can be useful.</p><p>optimize-js parses our scripts in advance, inserts parenthesis where it knows (or assumes via heuristics) functions will be immediately executed enabling <strong>faster execution</strong>. Some of the paren-hacked functions are sure bets (e.g IIFEs with !). Others are based on heuristics (e.g in a Browserify or Webpack bundle it’s assumed all modules are eagerly loaded which isn’t necessarily the case). Eventually, V8 hopes for such hacks to not be required but for now this is an optimization we can consider if we know what you’re doing.</p><p><em>V8 are also working on reducing the cost for cases where we guess wrong, and that should also reduce the need for the parens hack</em></p><h3 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h3><p><strong>Start-up performance matters.</strong> Acombination of slow parse, compile and execution times can be a real bottleneck for pages that wish to boot-up quickly. <strong>Measure</strong> how long your pages spend in this phase. Discover what you can do to make it faster.</p><p>We’ll keep working on improving V8 start-up performance from our end as much as we can. We promise ;) Happy perfing!</p><h3 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a><strong>Read More</strong></h3><ul><li><a href="https://www.youtube.com/watch?v=RWLzUnESylc" target="_blank" rel="noopener">Planning for Performance</a></li><li><a href="https://twitter.com/MSEdgeDev/status/819985530775404544" target="_blank" rel="noopener">Solving the Web Performance Crisis by Nolan Lawson</a></li><li><a href="https://timkadlec.com/2014/09/js-parse-and-execution-time/" target="_blank" rel="noopener">JS Parse and Execution Time</a></li><li><a href="http://carlos.bueno.org/2010/02/measuring-javascript-parse-and-load.html" target="_blank" rel="noopener">Measuring Javascript Parse and Load</a></li><li><a href="https://www.safaribooksonline.com/library/view/velocity-conference-new/9781491900406/part78.html" target="_blank" rel="noopener">Unpacking the Black Box: Benchmarking JS Parsing and Execution on Mobile Devices</a> (<a href="https://speakerdeck.com/desp/unpacking-the-black-box-benchmarking-js-parsing-and-execution-on-mobile-devices" target="_blank" rel="noopener">slides</a>)</li><li><a href="https://aerotwist.com/blog/when-everything-is-important-nothing-is/" target="_blank" rel="noopener">When everything’s important, nothing is!</a></li><li><a href="http://benediktmeurer.de/2016/12/16/the-truth-about-traditional-javascript-benchmarks/" target="_blank" rel="noopener">The truth about traditional JavaScript benchmarks</a></li><li><a href="http://stackoverflow.com/questions/1096907/do-browsers-parse-javascript-on-every-page-load/" target="_blank" rel="noopener">Do Browsers Parse JavaScript On Every Page Load</a></li></ul><p><em>With thanks to V8 (Toon Verwaest, Camillo Bruni, Benedikt Meurer, Marja Hölttä, Seth Thompson), Nolan Lawson (MS Edge), Malte Ubl (AMP), Tim Kadlec (Synk), Gray Norton (Chrome DX), Paul Lewis, Matt Gaunt and Rob Wormald (Angular) and for their reviews of this article.</em></p><p><strong>Update:</strong> Thanks to some awesome members of the community, this article is now available in <a href="https://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;mid=2247484987&amp;idx=1&amp;sn=7f20da20bc6baed62ca8ff115209942b&amp;chksm=972364f9a054edefccebc89bb4b39150328f84fc6a3da53dafa9563df7375fef00b3a1a4c483&amp;mpshare=1" target="_blank" rel="noopener">Chinese</a> and <a href="https://habrahabr.ru/company/mailru/blog/321748/" target="_blank" rel="noopener">Russian</a> too.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-Start-up-Performance&quot;&gt;&lt;a href=&quot;#JavaScript-Start-up-Performance&quot; class=&quot;headerlink&quot; title=&quot;JavaScript Start-up Performance&quot;&gt;&lt;/a&gt;JavaScript Start-up Performance&lt;/h1&gt;&lt;p&gt;As web developers, we know how easy it is to end up with web page bloat. But &lt;strong&gt;loading&lt;/strong&gt; a webpage is much more than shipping bytes down the wire. Once the browser has downloaded our page’s scripts it then has to parse, interpret &amp;amp; run them. In this post, we’ll dive into this phase for JavaScript, &lt;em&gt;why&lt;/em&gt; it might be slowing down your app’s start-up &amp;amp; &lt;em&gt;how&lt;/em&gt; you can fix it.&lt;/p&gt;
&lt;p&gt;Historically, we just haven’t spent a lot of time optimizing for the JavaScript Parse/Compile step. We almost expect scripts to be immediately parsed and executed as soon as the parser hits a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. But this isn’t quite the case. &lt;strong&gt;Here’s a simplified breakdown of how V8 works&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*GuWInZljjvtDpdeT6O0emA.png&quot; alt=&quot;&quot;&gt;A simplified view of how V8 works. This is our idealized pipeline that we’re working towards.&lt;/p&gt;
&lt;p&gt;Let’s focus on some of the main phases.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nth-blogs.herokuapp.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hiểu rõ về Regular Expressions: RegEx không khó như tưởng tượng</title>
    <link href="http://nth-blogs.herokuapp.com/2017/12/Hieu-ro-ve-Regular-Expressions-RegEx-khong-kho-nhu-tuong-tuong.html"/>
    <id>http://nth-blogs.herokuapp.com/2017/12/Hieu-ro-ve-Regular-Expressions-RegEx-khong-kho-nhu-tuong-tuong.html</id>
    <published>2017-12-15T15:23:22.000Z</published>
    <updated>2017-12-15T15:29:08.323Z</updated>
    
    <content type="html"><![CDATA[<p>Are you one of those people who stays away from regular expressions because it looks like a foreign language? I was one. Not anymore.</p><p>Think of all those sounds, traffic signs and smells that you can recognize. Regular expressions are no different. It’s like a sign language to analyze strings.</p><p>We are going to get our head around regular expressions today. At least, <strong>regularly</strong> used expressions.</p><p>Much like any programming language, a regular expression is a succinct language in its own right.</p><p>We will know how to put regular expressions to good use by the end of this article. We will solve simple problems and learn loads in the process.</p><p>Are you willing to invest 30 minutes and come out enlightened in RegEx? Settle down then.<br><a id="more"></a></p><h4 id="Why-regular-expressions"><a href="#Why-regular-expressions" class="headerlink" title="Why regular expressions?"></a>Why regular expressions?</h4><p>We each have our own ‘why’, don’t we? One may be to test if the string is a valid hex color code. You may be writing a processor library such as <a href="https://github.com/search?l=&amp;q=regexp+repo%3Asass%2Fsass&amp;ref=advsearch&amp;type=Code&amp;utf8=%E2%9C%93" target="_blank" rel="noopener">Sass</a> that leverages RegEx.</p><p>I’ll let the universe throw the <strong>why</strong> at you and help you cover the <strong>how</strong>.</p><h3 id="0-Get-Your-Playground-Ready"><a href="#0-Get-Your-Playground-Ready" class="headerlink" title="0. Get Your Playground Ready"></a>0. Get Your Playground Ready</h3><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p>Most of the time, I find this page adequate to get going: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">Regular Expressions from MDN</a>. In fact, that page is all you need. You can stop reading this post. Right now. Close this tab. 😉</p><p>Still with me? Thanks. You need a sandbox to play around in. Luckily, one is available on your browser. Just use the DevTools in your browser’s console.</p><h4 id="Familiarize-yourself-with-the-syntax"><a href="#Familiarize-yourself-with-the-syntax" class="headerlink" title="Familiarize yourself with the syntax"></a>Familiarize yourself with the syntax</h4><p>To start with, we are going to use the /expression/.test(‘string’) syntax.</p><p>An expression is any regular expression that we build. A string is the string under test. The test method returns true or false depending on the match.</p><p>Slashes mark the start and end of the expression. Treat them like the double quotes (“) and single quotes (‘) that you use to the mark start and end of a plain string.</p><p>The expression between / is a literal. <strong>They are treated as literal characters.</strong> Variable names wouldn’t be resolved down to their contents.</p><p>To make it dynamic, we’ll have to go via the constructor route, using new RegEx(variable_name) syntax. This will come to rescue towards the end of the post.</p><p><strong>Do it right now.</strong> Just type this into your browser console.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/a/.test(<span class="string">"a"</span>); <span class="comment">//true</span></span><br><span class="line">/a/.test(<span class="string">"b"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>If that works, you are ready. Don’t worry about what it is. That’s what we are going to breakdown into pieces in the following lines.</p><p>Let’s dive in…</p><h3 id="1-Start-Small-With-Letters"><a href="#1-Start-Small-With-Letters" class="headerlink" title="1. Start Small With Letters"></a>1. Start Small With Letters</h3><p>Let’s start small. We need to find if a string has a particular character. Look for the character a in a string.</p><p>Here is the expression in all its glory:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/a/.test(<span class="string">"abc"</span>); <span class="comment">//true </span></span><br><span class="line">/a/.test(<span class="string">"bcd"</span>); <span class="comment">//false </span></span><br><span class="line">/a/.test(<span class="string">"cba"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>The expression does what we asked for, “Look for a in the string under test”. In our case, abc and bca do have the character a. But bcd does not have it.</p><h4 id="Breakdown"><a href="#Breakdown" class="headerlink" title="Breakdown"></a>Breakdown</h4><p>Now, that’s a lot of slashes and backslashes. Let’s break them down.</p><p>We’ve seen that /expression/ is how we build regular expressions. So no question about slash there. In fact, we can even <strong>assign it to a variable</strong> and make it look better.</p><p><strong>The same code:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/a/</span>; </span><br><span class="line">e.test(<span class="string">"abc"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"bcd"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"cba"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>The expression between slashes is just a single character a in our case. We are looking only for that one character.</p><h4 id="Reach-Multi-Characters"><a href="#Reach-Multi-Characters" class="headerlink" title="Reach Multi-Characters"></a>Reach Multi-Characters</h4><p>Let’s scale the solution.</p><p>What if you want to find more than one character?</p><p>Put them in sequence. Treat them as a substring.</p><p>Here is an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ab/.test(<span class="string">"abacus"</span>); <span class="comment">//true </span></span><br><span class="line">/bac/.test(<span class="string">"abacus"</span>); <span class="comment">//true  </span></span><br><span class="line">/abc/.test(<span class="string">"abacus"</span>); <span class="comment">//false </span></span><br><span class="line">/abas/.test(<span class="string">"abacus"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>The string under test should contain the exact expression within slashes. We get a match if that condition is met.</p><p>bac is within abacusbut abas is not in abacus as it is. Even though we have those characters scrambled, we do not get an exact match.</p><h4 id="Review-Ground-Covered"><a href="#Review-Ground-Covered" class="headerlink" title="Review Ground Covered"></a>Review Ground Covered</h4><p>Symbol /…/ . Slash (/) marks the start and end of the regular expression. Ignore the dots, that’s where we place the pattern. The /a/ character between slashes is a pattern matched on string under test. The /abc/ characters between slashes are looked up as a sub-string during the pattern matching test on string under test.</p><h3 id="2-Patterns-in-Numbers"><a href="#2-Patterns-in-Numbers" class="headerlink" title="2. Patterns in Numbers"></a>2. Patterns in Numbers</h3><p>Let’s spice it up a bit. Let’s say you want to find out if a string is full of numeric characters.</p><p>Here it is:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/0|1|2|3|4|5|6|7|8|9/</span>;</span><br><span class="line">e.test(<span class="string">"42"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"The answer is 42"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>First of all, the pattern looks pretty long. But the same long streak of characters <strong>can be expressed in just two characters</strong>. I reserved it towards end of this section for a dramatic closure.</p><p>The second case shouldn’t be true. We’ll deal with it a bit later.</p><p>For now, the pipe symbol (|) means <strong>or</strong>. Outside of regular expressions, we’ve used it as a bitwise <strong>or</strong> and conditional <strong>or</strong> with double pipes (||). That’s the same guy.</p><p>I could call that easy and call it a day. But you would scream for something better, right? We are developers. We spend the best part of our day thinking about better Bash and Git aliases to save few keystrokes.</p><p>Should I type in nine pipe symbols? Nah.</p><p>Here we go again:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="regexp">/[0123456789]/</span>; </span><br><span class="line">e.test(<span class="string">"42"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"The answer is 42"</span>); <span class="comment">//still true</span></span><br></pre></td></tr></table></figure><p>This is better. 9 pipes were replaced with 2 square brackets. 7 characters were saved. That’s 77.7% less keystrokes.</p><p>By the way, anything within square brackets is considered as Either this or that. It is a character set. In our case, the string should contain either 0, or 1, or 2, or…bear with me, I promised myself to write 1000 words a day, or 3 or 4 or 5. All right, let’s stop. You get it.</p><p>What are you saying? It still looks quite lengthy? Not satisfied?</p><p>Okay, here we go once again:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="regexp">/[0-9]/</span>; </span><br><span class="line">e.test(<span class="number">42</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"42"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"The answer is 42"</span>); <span class="comment">//true!</span></span><br></pre></td></tr></table></figure><p>How about that? Looks much cleaner, doesn’t it? Anything within square brackets [] means <strong>or</strong>. 0-9 marks a range, meaning zero to nine.</p><p>So the test looks for characters from zero to nine in the test string.</p><p>As you can see, the test takes numbers too.</p><h4 id="The-prefix-and-suffix-patterns"><a href="#The-prefix-and-suffix-patterns" class="headerlink" title="The prefix and suffix patterns"></a>The prefix and suffix patterns</h4><p>Let’s now address that failing second case. The answer is 42 matches our test because our pattern looks for numeric characters somewhere <strong>within</strong> the string. <strong>Not start to end</strong>.</p><p>Let’s bring in ^ and $ to help us.</p><ul><li>^ means the <strong>start</strong> of the string. He is a double agent and he’ll trip us off. His second avatar is unmasked only in the last section.</li><li>$ means the <strong>end</strong> of the string.</li></ul><p>Let’s get the prefix pattern sorted out:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/^a/.test(<span class="string">"abc"</span>); <span class="comment">//true </span></span><br><span class="line">/^a/.test(<span class="string">"bca"</span>); <span class="comment">//false </span></span><br><span class="line">/^http/.test(<span class="string">"https://pineboat.in"</span>); <span class="comment">//true /^http/.test("ftp://pineboat.in"); //false</span></span><br></pre></td></tr></table></figure><p>Any pattern that follows ^ should be at the start of the string under test.</p><p>The second string starts with b while our pattern looks for a. The fourth one looks for http while the string starts with ftp. This is the reason they fail.</p><h4 id="The-suffix-patterns"><a href="#The-suffix-patterns" class="headerlink" title="The suffix patterns"></a>The suffix patterns</h4><p>The suffix pattern follows. $ at the end of the pattern directs the test to look for end of string.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/js$/.test(<span class="string">"regex.js"</span>); <span class="comment">//true </span></span><br><span class="line">/js$/.test(<span class="string">"regex.sj"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>That should sound in your head like, “Look for js and then the end of the string”. Better yet, “Look for a string that ends in js”.</p><h4 id="Pattern-match-End-to-End"><a href="#Pattern-match-End-to-End" class="headerlink" title="Pattern match End to End"></a>Pattern match End to End</h4><p>That paves the road to pattern match start to end, you might as well call it end to end.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^[0-9]$/</span> </span><br><span class="line">e.test(<span class="string">"42"</span>); <span class="comment">//false - NO! </span></span><br><span class="line">e.test(<span class="string">"The answer is 42"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"7"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Surprisingly, the first one failed when we added ^ and $.</p><p><code>/^[0-9]$/</code> reads like, “Go to the start of the string. Look for a <strong>single numeral</strong> from the character set. Check if the string ends right there.” That’s the reason the last entry returned true. It is just a single number, start to end.</p><p>That’s not what we wanted. We wanted to test if the string had one or more numerals.</p><p>We are very close. One last thing we need to learn is how to instruct the pattern to look for more than one character in the set.</p><h4 id="Tale-of-Three-Musketeers"><a href="#Tale-of-Three-Musketeers" class="headerlink" title="Tale of Three Musketeers"></a>Tale of Three Musketeers</h4><p>A question mark (?), a plus (+) and an asterisk (*) met at a battle ground. Each is differently sighted.</p><p>The humble question mark (?)says, “I can see none or just one.”</p><p>Plus (+) says, “I need to see at least one or more.”</p><p>Asterisk (*) says, “I get you both. I can see none, one, or more.”</p><p><strong>One of them is cleverly hiding what he is capable of.</strong></p><p>The question mark gets on stage first:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/a?<span class="regexp">/.test(""); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a?<span class="regexp">/.test("a"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a?<span class="regexp">/.test("b"); /</span><span class="regexp">/true! </span></span><br><span class="line"><span class="regexp">/</span>a?<span class="regexp">/.test("aa"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>^a?$/.test(<span class="string">"aa"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>Matches empty string “”<br>as ? stands for 0 or 1</li><li>Matches a<br>one match</li><li>Matches b matches 0 occurrence</li><li>Matches aa<br>one match and the second a is not part of the pattern</li><li><code>/^a?$/</code> does not match aa It looks for zero or one a, start to end, nothing more, nothing less</li></ul><p>The plus (+) looks at question mark and remarks, “I’m impressed, but your focus is so binary!”. And takes the stage to show off:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/a+<span class="regexp">/.test("a"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a+<span class="regexp">/.test("aa"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a+<span class="regexp">/.test("ba"); /</span><span class="regexp">/true! </span></span><br><span class="line"><span class="regexp">/</span>^a+$/.test(<span class="string">"aa"</span>); <span class="comment">//true  </span></span><br><span class="line">/a+<span class="regexp">/.test(""); /</span><span class="regexp">/false </span></span><br><span class="line"><span class="regexp">/</span>a+<span class="regexp">/.test("b"); /</span><span class="regexp">/false </span></span><br><span class="line"><span class="regexp">/</span>^a+$/.test(<span class="string">"ab"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Remember what plus (+) said? It can match one or more occurrences of preceding pattern.</p><p>All those returning true have one or more a. We even managed to get a whole string comprised only of a in the last one that returned true with <code>/^a+$/</code>.</p><p>false should make sense now, but a word on the last one that returned false. <code>/^a+$/</code> looks for a start to end, no other characters allowed. This is why ab failed the test.</p><p>Finally, star (*) of the show gets on stage. He boasts that, “I can duel alone or duel you both at once” and says, “I can match zero, one or more”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/a*<span class="regexp">/.test("a"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a*<span class="regexp">/.test("aa"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a*<span class="regexp">/.test("ba"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a*<span class="regexp">/.test(""); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>a*<span class="regexp">/.test("b"); /</span><span class="regexp">/true </span></span><br><span class="line"><span class="regexp">/</span>^a*$/.test(<span class="string">"aa"</span>); <span class="comment">//true </span></span><br><span class="line">/^a*$/.test(<span class="string">""</span>); <span class="comment">//true  </span></span><br><span class="line">/^a*$/.test(<span class="string">"ab"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Except the last one, <em> was able to handle all else. /^a</em>$/ reads like, 0 or more a start to end. Which is why empty string “” passed the test and “ab” failed.</p><h4 id="Back-to-the-Universal-Answer"><a href="#Back-to-the-Universal-Answer" class="headerlink" title="Back to the Universal Answer"></a>Back to the Universal Answer</h4><p>Remember where were we before we met the three musketeers? Yes, “The answer is 42”.</p><p>Now if we need to look for only numerals, one or more, start to end, what do we do?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Let's throw in a plus </span></span><br><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^[0-9]+$/</span> </span><br><span class="line">e.test(<span class="string">"4"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"42"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"The answer 42"</span>); <span class="comment">//false - Hurray</span></span><br></pre></td></tr></table></figure><p>The plus sign (+) in [0-9]+ comes to our rescue. Plus means more than one occurrence of the character or pattern in front of it. In our case, more than one numerals.</p><p>It also fails the match for our last case The answer is 42 because, there are no numerals at the start of the string.</p><h4 id="Practice-Patterns"><a href="#Practice-Patterns" class="headerlink" title="Practice Patterns"></a>Practice Patterns</h4><ul><li>Can you try to write a pattern for hexadecimal numbers (consisting of numerals 0–9 and letters a-f, with an optional # in front)?</li><li>How about a binary number? Can you test if a string is full of just 0 and 1?</li></ul><h4 id="That-Dramatic-End"><a href="#That-Dramatic-End" class="headerlink" title="That Dramatic End"></a>That Dramatic End</h4><p>Oh, I almost forgot. [0-9] stands for any of the numeric character set and also has a shorthand version \d.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^\d+$/</span>; e.test(<span class="string">"4"</span>); <span class="comment">//true e.test("42"); //true e.test("The answer 42"); //false - Hurray</span></span><br></pre></td></tr></table></figure><p>Just two characters denoting numerals. And No, it doesn’t get any shorter than that.</p><p>There are a whole bunch of such special patterns to specify clusters such as numbers (\d), alpha numeric characters (\w), white spaces (\s).</p><h4 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h4><ul><li>[123] The expression within square brackets are a character set<br>Any one of the characters match will pass the test. Just ONE character.</li><li>[0-9]<br>Looks for a single numeric digit between 0 to 9</li><li>[0-5]<br>Looks for a single numeric digit between 0 to 5</li><li>[a-z]<br>Looks for a single letter between a to z</li><li>[A-F]<br>Looks for a single letter between A to F</li><li>[123]+<br>Plus (+) looks for one or more occurrence of the characters within the set This one matches a “23132” sub-string that consists of 1, 2 and 3 within a larger string “abc23132”.</li><li>| Pipe symbol stands for <strong>or</strong></li><li>\d<br>A shorthand for numerals<br>Matches a single numeric digit.</li><li>\D<br>A shorthand for non-numeric characters<br>Anything other than numerals that’ll be matched by \d</li></ul><h3 id="3-Recurrence-Match-to-Find-Duplicates"><a href="#3-Recurrence-Match-to-Find-Duplicates" class="headerlink" title="3. Recurrence Match to Find Duplicates"></a>3. Recurrence Match to Find Duplicates</h3><p>This is the actual problem I was trying to solve. I dove deep into regular expressions, which eventually led to this post.</p><p>You’ve been given a string. Find out if it has been infused with duplicate characters before sunset.</p><p>Here is the solution for duplicate characters appearing immediately after an occurrence:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/(\w)\1/</span>; </span><br><span class="line">e.test(<span class="string">"abc"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"abb"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>The expression does not match any part of the string abc as there are no duplicate characters in sequence. So it returns false.</p><p>But it matches bb part of the string abb and returns true.</p><p>Go ahead, type that on your DevTool console. Look at this!</p><p>Let’s break it down to understandable pieces.</p><h4 id="Backslash-Unleashed"><a href="#Backslash-Unleashed" class="headerlink" title="Backslash \ Unleashed"></a>Backslash <code>\</code> Unleashed</h4><p>I’ve been a little quiet about the backslash that was introduced in the last section. To those who have <strong>been there</strong> and <strong>done that</strong>, it may not have been a surprise. They might have <strong>escaped</strong> the confusion. But if you are new to programming world, you need to know more about backslash.</p><p>In the regular expression language, backslash is special. The backslash alters the meaning of the characters that follow them. Ring a bell?</p><p>What do you call \n when you encounter it in a string? Yes, a new line. We’ve got something similar here.</p><p>In fact, <code>\n</code> is what you use as a pattern if you want to look for a new line. That’s called escaping the usual meaning of n and giving it a whole new attire called new line.</p><ul><li><code>\d</code> A shorthand for numerals<br>Matches a single numeric digit</li><li><code>\D</code> A shorthand for non-numeric characters<br>Anything other than numerals that’ll be matched by \d</li><li><code>\s</code><br>Shorthand for single white space character such as space, new line or tab.</li><li><code>\S</code> Antonym of <code>\s</code><br>anything other than white space</li><li><code>\w</code><br>Shorthand for alpha-numeric character<br>Matches a-z, A-Z, 0–9 and underscore _.</li><li><code>\W</code><br>Antonym of \w</li></ul><h4 id="Recallable-Matches"><a href="#Recallable-Matches" class="headerlink" title="Recallable Matches"></a>Recallable Matches</h4><p>We started this section with the solution for finding duplicate characters. /(\w)\1/ matched “abb”. That shows use of memory and recall within regular expressions.</p><p>Consider the use of brackets in this format (expression). The resulting string that matches the expression within a bracket is remembered for later use.</p><p>\1 remembers and uses the match from first expression that is within brackets. Likewise, \2 from second set of brackets. And so on.</p><p>Let’s translate our expression (\w)\1 to plain English:</p><p>Match any alpha-numeric character on a given string. Remember it as \1. Check if that character appears right next to the first occurrence.</p><h4 id="Extension-1-—-Reverse-Pairs"><a href="#Extension-1-—-Reverse-Pairs" class="headerlink" title="Extension 1 — Reverse Pairs"></a>Extension 1 — Reverse Pairs</h4><p>Let’s say we want to find two characters appearing in reverse order right next to each other. That is like abba. ab is reversed as ba and is right next to each other.</p><p>Here is the expression:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/(\w)(\w)\2\1/</span>; </span><br><span class="line">e.test(<span class="string">"aabb"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"abba"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"abab"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>The first (\w) matches a and remembers it as \1. The second (\w) matches b and remembers it as \2. Then the expression expects \2 to occur first followed by \1. Hence, abba is the only string that matches the expression.</p><h4 id="Extension-2-—-No-duplicates"><a href="#Extension-2-—-No-duplicates" class="headerlink" title="Extension 2 — No duplicates"></a>Extension 2 — No duplicates</h4><p>This time, we are going to look at sequence of characters with no duplicates. No character should be followed by the same character. Plain and simple.</p><p>Here, take a look at the solution:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^(\w)(?!\1)$/</span>; </span><br><span class="line">e.test(<span class="string">"a"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"ab"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"aa"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Not the one we wanted, but close. The middle one shouldn’t be false. But we threw in a few more symbols that need explaining. That means confronting the most powerful musketeer once again.</p><h4 id="Return-of-the-Question-Mark"><a href="#Return-of-the-Question-Mark" class="headerlink" title="Return of the Question Mark"></a>Return of the Question Mark</h4><p>Remember the three musketeers we met earlier. The humble <strong>question mark is actually the most powerful manipulator</strong> that can get other symbols to do his bidding. That is, if you take the backslash for granted.</p><p>A combination of brackets, question mark and exclamation mark (?!), is called a <strong>look ahead</strong>. A negative look ahead to be precise. a(?!b) matches a only if it is <strong>not</strong> followed by b.</p><p>Across JavaScript ecosystem, the exclamation mark means <strong>not</strong>. But its cousin CSS takes a u-turn and !important means it is actually very important and should not be overridden. I almost scrolled past <a href="https://twitter.com/vijayabharathib/status/910772769964548096" target="_blank" rel="noopener">Chen’s tweet</a> thinking it is marked not important. I digress.</p><p>On the other hand, (?=) is a positive <strong>look ahead</strong>. a(?=b) matches a only if it is followed by b.</p><p>We had a solution. (\w)(?!\1) looks for a character without recurrence. <strong>But only for one character.</strong> We need to group it and look for 1 or more occurrences of characters with the use of plus (+). That’s all.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^((\w)(?!\1))+$/</span>; </span><br><span class="line">e.test(<span class="string">"madam"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"maam"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>But it doesn’t seem to be working. If we group the pattern within plain brackets like ((\w)(?!\1)), the \1 does not represent(\w), it represents higher level bracket pair that groups the pattern. So it fails.</p><p>What we need is a <strong>forgetful</strong> grouping option. That’s where the question mark, ?, strikes back. It pairs with a colon, (?:) and wipes out any function of memory that the brackets can bring in.</p><p>One last time:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^(?:(\w)(?!\1))+$/</span>; </span><br><span class="line">e.test(<span class="string">"madam"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"maam"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>This time, the first level of brackets are not remembered, thanks to ?:, hence, \1 remembers the match returned by \w.</p><p>It helps us use the plus + against the overall grouping to find similar pairs of characters start to end, which works like magic.</p><p>In English, “Look for a character. Look ahead to ensure it is not followed by the same character. Do this from start to end for all characters.”</p><h4 id="Review-1"><a href="#Review-1" class="headerlink" title="Review"></a>Review</h4><ul><li>\w represents all the alpha-numeric characters<br>If you capitalize ‘w’ and use \W’, that would mean all characters <strong>other than</strong> alpha-numeric</li><li>( )<br>The expression within a bracket is remembered for later use</li><li>\1 remembers and uses the match from first expression that is within brackets<br> \2 from second set of brackets. And so on.</li><li>a(?!b)<br>A combination of brackets, question mark and exclamation mark (?!), is called a <strong>look ahead</strong> This matches a only if it is <strong>not</strong> followed by b</li><li>a(?=b) The other side of the coin<br>Match a only if it is followed by b. (?:a)<br><strong>Forgetful grouping</strong> Look for a but don’t remember it<br>You can’t use \1 pattern to reuse this match</li></ul><h3 id="4-Alternating-Sequence"><a href="#4-Alternating-Sequence" class="headerlink" title="4. Alternating Sequence"></a>4. Alternating Sequence</h3><p>The usecase is simple. Match a string that uses only two characters. Those two characters should alternate throughout the length of the string. Two sample tests for “abab” and “xyxyx” will do.</p><p>It wasn’t easy. I got it wrong on several attempts. This <a href="https://stackoverflow.com/questions/45504400/regex-match-pattern-of-alternating-characters" target="_blank" rel="noopener">answer</a> directed me down the right street.</p><p>Here is the solution:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^(\S)(?!\1)(\S)(\1\2)*$/</span>; </span><br><span class="line">e.test(<span class="string">"abab"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"$#$#"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"#$%"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"$ $ "</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"xyxyx"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>This is where you say, “I’ve had enough!” and throw in the towel.</p><p>But wait for the Aha moment! You are 3 feet away from the gold ore, not the right time to stop digging.</p><p>Let’s first make sense out of results before we arrive at ‘<strong>how?</strong>’ abab matches. $#$# matches, this is no different from abab.</p><p>#$% fails as there is a third character. $ $ fails though they are pairs, because space is excluded in our pattern.</p><p>All is well except, xyxyx fails, because our pattern doesn’t know how to handle that last x. We’ll get there.</p><p>Let’s take a look at the tools added to our belt. It’ll start to make sense soon.</p><h4 id="One-piece-at-a-time"><a href="#One-piece-at-a-time" class="headerlink" title="One piece at a time"></a>One piece at a time</h4><p>You already know most of the pieces. <code>\S</code> is the opposite of <code>\s</code>. <code>\S</code> looks for non white space characters.</p><p>Now comes the plain English version of <code>/^(\S)(?!\1)(\S)(\1\2)*$/</code>.</p><ul><li>Start from the start /^</li><li>Look for a non-white space character (<code>\S</code>)</li><li>Remember it as \1</li><li>Look ahead and see if the first character is not followed by the same character (?!\1).<br>Remember this is a <strong>negative look ahead</strong>.</li><li>If we are good so far, look for another character (<code>\S</code>)</li><li>Remember it as \2</li><li>Then look for <strong>0 or more pairs of first two matches</strong> (<code>\1\2</code>)*</li><li>Look for such pattern until end of the string $/</li></ul><p>Apply that to our test cases. “abab” and “$#$#” match.</p><h4 id="Tail-End"><a href="#Tail-End" class="headerlink" title="Tail End"></a>Tail End</h4><p>After looking at the solution you may think this does not demand a separate section. But the simplicity of it is elegant. Let’s fix that one failing case xyxyx. As we’ve seen, the last trailing x is the problem. We have a solution for xyxy. All we need is a pattern to say “Look for an optional occurrence of first character”.</p><p>As usual, let’s start with the solution.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e=<span class="regexp">/^(\S)(?!\1)(\S)(\1\2)*\1?$/</span>; e.test(<span class="string">"xyxyx"</span>); <span class="comment">//true e.test("$#$#$"); //true</span></span><br></pre></td></tr></table></figure><p>The question mark strikes again. There is no escaping him. It’s better we make him our ally than our enemy. A question mark ? after a character or pattern means 0 or 1 match for the preceding pattern. It is non-greedy in gobbling up characters.</p><p>In our case, <code>\1?</code> means, 0 or 1 match of the first character remembered through first set of brackets.</p><p>Easy. Relax.</p><h4 id="Review-2"><a href="#Review-2" class="headerlink" title="Review"></a>Review</h4><ul><li><code>\S</code><br>Represents all characters excluding white space such as a space and new lines<br>Note that it is capital S</li><li><code>a*</code><br>The asterisk or star, looks for 0 or more occurrences of the preceding character. In this case, it is 0 or more a<br>Remember plus (+) which looks for 1 or more? Yeah, these guys are cousins.</li><li><code>a(?!b)</code><br>This combination of brackets, question mark and exclamation mark (?!) is called a <strong>look ahead</strong>.<br>This matches a only if it is not followed by b.<br>For example, it matches a in aa, ax, a$ but does not match ab Though it uses bracket, it does not remember the matching character after a.</li><li><code>\s</code><br>Small caps s matches a single white space character such as a space or new line.</li><li><code>a(?=b)</code><br>This matches a that is followed by b.</li><li><code>^ab*$</code><br>You may think this translates to 0 or more occurrences of ab, but it matches a followed by 0 or more b For example: This matches abbb, aand ab, but does not match abab</li><li><code>^(ab)*$</code><br>This matches 0 or more pairs of ab That means it will match empty string “”, aband abab, but not abb</li><li><code>a?</code><br><code>?</code> matches 0 or 1 occurrence of preceding character or pattern<br><code>\1?</code> matches 0 or 1 recurrence of first remembered match</li></ul><h3 id="5-Match-an-email-address"><a href="#5-Match-an-email-address" class="headerlink" title="5. Match an email address"></a>5. Match an email address</h3><h4 id="Warning-for-Production"><a href="#Warning-for-Production" class="headerlink" title="Warning for Production"></a>Warning for Production</h4><p>Regular expressions alone may not help validate emails. Some would even argue that regular expressions should not be used as it can never match 100% of the emails.</p><p>Think about all the fancy domain names popping up. Also consider inclusion of symbols within email addresses, such as dot (.) and plus (+).</p><p>You need to validate email twice. Once on the client side to help users avoid misspelled addresses. Start with a semantic input tag type <code>&lt;input type=&#39;email&#39;&gt;</code>. Some of the browsers automatically validate it without any extra scripting on the front end.</p><p>Validate it once again on the server by actually sending a confirmation email.</p><p>Haven’t you seen one such lately? Just try to subscribe to this <a href="https://www.pineboat.in/" target="_blank" rel="noopener">pineboat</a>. You’ll get an actual email asking you to confirm that it is yours. That confirmation is a solid proof that your email is valid.</p><p>That was smooth sailing, wasn’t it?</p><h4 id="RegEx-for-Email"><a href="#RegEx-for-Email" class="headerlink" title="RegEx for Email"></a>RegEx for Email</h4><p>Now that we added the disclaimer, you’d actually want to see a pattern right? No, search for regular expression for an email address. One such result from <a href="http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html" target="_blank" rel="noopener">perl module</a> goes for more than a page.</p><p>So, I am not even going to attempt it. Such long regular expressions are generated by computers through pattern builders. Not for mere mortals like us.</p><h3 id="6-Match-a-Strong-Password"><a href="#6-Match-a-Strong-Password" class="headerlink" title="6. Match a Strong Password"></a>6. Match a Strong Password</h3><p>If you are a coffee person, this is the right time to get a strong one. Because we are at last section of this post, but the longest one so far.</p><p>It introduces very few new operators and patterns. But it reuses many patterns. As usual, we reserve the shortest optimized one for last.</p><p>The ASCII range is the best part of this post. Because, I learned it while researching for this post.</p><p>Now, the problem. Remember that registration form that took several attempts before you could meet their strong password requirements? Weak, good, strong, and very strong? Yeah, we are going to build that validation.</p><p>The password should:</p><ul><li>have a minimum of 4 characters</li><li>contain lowercase</li><li>contain uppercase</li><li>contain a number</li><li>contain a symbol</li></ul><p>This is a tricky one. Once you start consuming letters, you can’t come back to check if they meet any other condition.There in lies our clue. <strong>We can’t look back, but we can look ahead!</strong></p><h4 id="Length-of-the-string"><a href="#Length-of-the-string" class="headerlink" title="Length of the string"></a>Length of the string</h4><p>Let’s first test if the string password is 4 characters long. Pretty simple. Use .length on the password string. Done, right? No, who needs a simple solution? Let’s spice it up.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//expression with just lookahead</span></span><br><span class="line"><span class="comment">//wouldn't consume any character</span></span><br><span class="line">e1=<span class="regexp">/^(?=.&#123;4,&#125;)$/</span>; </span><br><span class="line">e1.test(<span class="string">"abc"</span>) <span class="comment">//false</span></span><br><span class="line">e1.test(<span class="string">"abcd"</span>) <span class="comment">//false //after lookahead, </span></span><br><span class="line"><span class="comment">//pattern to consume character is needed.</span></span><br><span class="line">e2=<span class="regexp">/^(?=.&#123;4,&#125;).*$/</span>; </span><br><span class="line">e2.test(<span class="string">"abc"</span>) <span class="comment">//false </span></span><br><span class="line">e2.test(<span class="string">"abcd"</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>You may remember (?=) from our previous work on <a href="https://www.pineboat.in/post/regular-expressions-your-ally/#extension-2-no-duplicates" target="_blank" rel="noopener">“no duplicates”</a> That’s a look ahead use<br>It does not consume any character</li><li>The dot (.) is an interesting character<br>It means, <strong>any character</strong>.</li><li>{4,}<br>Stands for at least 4 preceding characters with no maximum limit</li><li>\d{4}<br>Would look for exactly 4 numerals</li><li>\w{4,20}<br>Would look for 4 to 20 alpha-numeric characters</li></ul><p>Let’s translate /^(?=.{4,})$/. “Start from the beginning of the string. Look ahead for at least 4 characters. Don’t remember the match. Come back to the beginning and check if the string ends there.”</p><p>Doesn’t sound right. Does it? At least the last bit.</p><p>Which is why we brought in the variation /^(?=.{4,}).<em>$/. An extra dot and a star. It reads like this, “Start from the beginning. Look ahead for 4 characters. Don’t remember the match. Come back to the beginning. Consume all the characters using .</em> and see if you reach the end of the string.”</p><p>This makes sense now. Doesn’t it?</p><p>Which is why abc fails and abcd passes the pattern.</p><h4 id="At-least-One-Number"><a href="#At-least-One-Number" class="headerlink" title="At least One Number"></a>At least One Number</h4><p>This is going to be easy.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="regexp">/^(?=.*\d+).*$/</span> </span><br><span class="line">e.test(<span class="string">""</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"a"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"8"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"a8b"</span>); <span class="comment">//true </span></span><br><span class="line">e.test(<span class="string">"ab890"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Start from the beginning of the string /^. Look ahead for 0 or more characters ?=.<em>. Check if 1 or more numbers follow \d+. Once it matches, come back to the beginning (because we were in look ahead). Consume all the characters in the string until end of the string .</em>$/.</p><h4 id="At-Least-One-Lowercase-Letter"><a href="#At-Least-One-Lowercase-Letter" class="headerlink" title="At Least One Lowercase Letter"></a>At Least One Lowercase Letter</h4><p>This one follows the same patter as above.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="regexp">/^(?=.*[a-z]+).*$/</span>; </span><br><span class="line">e.test(<span class="string">""</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"A"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"a"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>Translation? Sure. “Start from the… okay.” Instead of \d+, we have [a-z]+ which is a character set of letters from a to z.</p><h4 id="At-least-One-Uppercase-Letter"><a href="#At-least-One-Uppercase-Letter" class="headerlink" title="At least One Uppercase Letter"></a>At least One Uppercase Letter</h4><p>Let’s not overkill. [A-Z] instead of [a-z] from the previous section will do.</p><h4 id="At-least-One-Symbol"><a href="#At-least-One-Symbol" class="headerlink" title="At least One Symbol"></a>At least One Symbol</h4><p>This is going to be challenging. One way to match symbols is to place a list of symbols in a character set. /^(?=.<em>[-+=_)(\</em>&amp;\^%\$#@!~”’:;|}]{[/?.&gt;,&lt;]+).*$/.test(“$”) That’s all the symbols in a character set. Properly escaped where necessary. It’ll take months for me to write it in plain English.</p><p>So to save all of us from eternal pain, here is a simple one:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//considers space as symbol </span></span><br><span class="line"><span class="keyword">let</span> e1; </span><br><span class="line">e1=<span class="regexp">/^(?=.*[^a-zA-Z0-9])[ -~]+$/</span> </span><br><span class="line">e1.test(<span class="string">"_"</span>); <span class="comment">//true </span></span><br><span class="line">e1.test(<span class="string">" "</span>); <span class="comment">//true </span></span><br><span class="line"><span class="comment">//does not take space </span></span><br><span class="line"><span class="keyword">let</span> e2; </span><br><span class="line">e2=<span class="regexp">/^(?=.*[^a-zA-Z0-9])[!-~]+$/</span> </span><br><span class="line">e2.test(<span class="string">" "</span>); <span class="comment">//false </span></span><br><span class="line">e2.test(<span class="string">"_"</span>); <span class="comment">//true </span></span><br><span class="line"><span class="comment">//the underscore exception </span></span><br><span class="line"><span class="keyword">let</span> e3; </span><br><span class="line">e3=<span class="regexp">/^(?=.*[\W])[!-~]+$/</span> </span><br><span class="line">e3.test(<span class="string">"_"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Wait, what’s that ^ coming again from the middle of no where? If you have reached this far, this is where you realize that unassuming innocent ^ that marks start of a string is a double agent. Which means, the end is not too far. He has been exposed.</p><p>Within a character set, ^ negates the character set. That is, [^a-z] means, any character other than a to z.</p><p>[^a-zA-Z0-9] then stands for any character other than lower case alphabets, upper case alphabets, and numerals.</p><p>We could have used \W instead of the long character set. But \W stands for all alpha-numeric characters <strong>including underscore _.</strong> As you can see in the third set of examples above, that will not accept underscore as a valid symbol.</p><h4 id="CharSet-Range"><a href="#CharSet-Range" class="headerlink" title="CharSet Range"></a>CharSet Range</h4><p>The curious case of [!-~]. They stand next to each other in the keyboard, but their ASCII values are diagonally opposite.</p><p>Remember a-z? A-Z? 0–9? These are not constants. They are actually based on the ASCII range of their values.</p><p>The <a href="http://www.asciitable.com/" target="_blank" rel="noopener">ASCII table</a> has 125 characters. zero (0) to 31 are not relevant to us. Space starts from 32 going all the way up to 126 which is tilda(~). The exclamation mark is 33.</p><p>So [!-~] covers all the symbols, letters and numbers we need. The seed for this idea came from <a href="https://stackoverflow.com/questions/8359566/regex-to-match-symbols" target="_blank" rel="noopener">another solution</a> to the symbol problem.</p><h4 id="Assemble-the-Troops"><a href="#Assemble-the-Troops" class="headerlink" title="Assemble the Troops"></a>Assemble the Troops</h4><p>Bringing it all together, we get this nice looking piece of regular expression /^(?=.{5,})(?=.<em>[a-z]+)(?=.</em>\d+)(?=.<em>[A-Z]+)(?=.</em>[^\w])[ -~]+$/.</p><p>That’s starting to haunt and intimidate us. Though we’ve been studying them individually.</p><p>This is where the syntax for dynamically building expression object comes in handy. We are going to build each piece separately and assemble them later.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//start with prefix </span></span><br><span class="line"><span class="keyword">let</span> p = <span class="string">"^"</span>; </span><br><span class="line"><span class="comment">//look ahead  </span></span><br><span class="line"><span class="comment">// min 4 chars </span></span><br><span class="line">p += <span class="string">"(?=.&#123;4,&#125;)"</span>; </span><br><span class="line"><span class="comment">// lower case </span></span><br><span class="line">p += <span class="string">"(?=.*[a-z]+)"</span>; </span><br><span class="line"><span class="comment">// upper case </span></span><br><span class="line">p += <span class="string">"(?=.*[A-Z]+)"</span>; </span><br><span class="line"><span class="comment">// numbers </span></span><br><span class="line">p += <span class="string">"(?=.*\\d+)"</span>; </span><br><span class="line"><span class="comment">// symbols </span></span><br><span class="line">p += <span class="string">"(?=.*[^ a-zA-Z0-9]+)"</span>; </span><br><span class="line"><span class="comment">//end of lookaheads </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//final consumption </span></span><br><span class="line">p += <span class="string">"[ -~]+"</span>;  </span><br><span class="line"><span class="comment">//suffix </span></span><br><span class="line">p += <span class="string">"$"</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">//Construct RegEx </span></span><br><span class="line"><span class="keyword">let</span> e = <span class="keyword">new</span> RegEx(p); </span><br><span class="line"><span class="comment">// tests </span></span><br><span class="line">e.test(<span class="string">"aB0#"</span>); <span class="comment">//true  </span></span><br><span class="line">e.test(<span class="string">""</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"aB0"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"ab0#"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"AB0#"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"aB00"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"aB!!"</span>); <span class="comment">//false </span></span><br><span class="line"><span class="comment">// space is in our control </span></span><br><span class="line">e.test(<span class="string">"aB 0"</span>); <span class="comment">//false </span></span><br><span class="line">e.test(<span class="string">"aB 0!"</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>If your eyes are not tired yet, you’d have noticed two strange syntax in the above code.</p><ul><li>One, we didn’t use /^, instead we used just ^. We didn’t use $/ to end the expression either, instead just $.<br>The reason is that the RegEx constructor automatically adds starting and trailing slashes for us.</li><li>Two, to match numbers we used \d instead of the usual \d. This is because the variable p is just a normal string within double quotes. To insert a backslash, you need to escape the backslash itself.<br>\d resolves to \d within the RegEx constructor</li></ul><p>Apparently, there should be server side validations for passwords too. Think about SQL injection vulnerabilities if your framework or language doesn’t handle it already.</p><h3 id="7-Conclusion"><a href="#7-Conclusion" class="headerlink" title="7. Conclusion"></a>7. Conclusion</h3><p>That brings us to the end of the story. But this is the beginning of a journey.</p><p>We just scratched the pattern matching portion of RegEx with test method. exec method builds on this foundation to return matched sub-strings based on pattern.</p><p>String object has methods such as match, search, replace, and split that widely uses regular expressions.</p><p>Hope this sets you off to explore those capabilities further with a solid understanding on composing patterns for RegEx.</p><h3 id="8-Call-To-Action"><a href="#8-Call-To-Action" class="headerlink" title="8. Call To Action"></a>8. Call To Action</h3><p>No, after all this difficulty we’ve been through, I am not going to ask you to subscribe.</p><p>Just make good software.</p><p>If any code blocks presented here do not work, leave a comment on this <a href="https://github.com/pineboat/pineboat.github.io/issues/3" target="_blank" rel="noopener">github issue</a> I created specially for this post.</p><p>Hope it was useful! Share it if others would benefit.</p><p>You’ve been wonderful. Appreciate your time. This content is far long by recent standards. Thanks for reading.</p><p>Originally published at <a href="https://www.pineboat.in/post/regular-expressions-your-ally/" target="_blank" rel="noopener">www.pineboat.in</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Are you one of those people who stays away from regular expressions because it looks like a foreign language? I was one. Not anymore.&lt;/p&gt;
&lt;p&gt;Think of all those sounds, traffic signs and smells that you can recognize. Regular expressions are no different. It’s like a sign language to analyze strings.&lt;/p&gt;
&lt;p&gt;We are going to get our head around regular expressions today. At least, &lt;strong&gt;regularly&lt;/strong&gt; used expressions.&lt;/p&gt;
&lt;p&gt;Much like any programming language, a regular expression is a succinct language in its own right.&lt;/p&gt;
&lt;p&gt;We will know how to put regular expressions to good use by the end of this article. We will solve simple problems and learn loads in the process.&lt;/p&gt;
&lt;p&gt;Are you willing to invest 30 minutes and come out enlightened in RegEx? Settle down then.&lt;br&gt;
    
    </summary>
    
    
      <category term="Regex" scheme="http://nth-blogs.herokuapp.com/tags/Regex/"/>
    
  </entry>
  
</feed>
