<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Learn and Share</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nthung2112.github.io/"/>
  <updated>2018-05-26T13:12:57.001Z</updated>
  <id>http://nthung2112.github.io/</id>
  
  <author>
    <name>Hung Tan Nguyen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cấu trúc projects và đặt tên components trong React</title>
    <link href="http://nthung2112.github.io/2018/05/Cau-truc-projects-va-dat-ten-components-trong-React.html"/>
    <id>http://nthung2112.github.io/2018/05/Cau-truc-projects-va-dat-ten-components-trong-React.html</id>
    <published>2018-05-26T16:02:00.000Z</published>
    <updated>2018-05-26T13:12:57.001Z</updated>
    
    <content type="html"><![CDATA[<p>Như bạn đã biết, React chỉ là một thư viện nên nó không chỉ rõ cho người dùng cách tổ chức, phân chia cấu trúc thư mục cho dự án của mình. Xét trên một khía cạnh, có thể điều này là tốt vì dev có thể thoải mái thử rất nhiều cách khác nhau để chọn ra phương pháp phù hợp với dự án của mình. Tuy nhiên, nó lại khiến cho những dev mới bắt đầu sử dụng React cảm thấy khó hiểu. Bài viết này sẽ đưa ra một vài phương pháp phân chia folders, files giúp cho ứng dụng React của bạn có thể mở rộng một cách thuận tiện, nhất là đối với những người mới bước chân vào React và không biết phải làm như thế nào cho hợp lý.</p><a id="more"></a><h1 id="Cau-truc-files-va-folders"><a href="#Cau-truc-files-va-folders" class="headerlink" title="Cấu trúc files và folders"></a>Cấu trúc files và folders</h1><p>Một trong những câu hỏi dev thường gặp phải khi bắt đầu code là “Làm thế nào dể phân chia files và folders”. Để thuận tiện thì chúng ta sẽ bắt đầu từ cấu trúc đơn giản nhất mà package <strong>create-react-app</strong> đã tạo ra. Cụ thể là folder <strong>src</strong>. Đây là folder chính chứa source code, vì vậy chúng ta sẽ tập trung vào phần này. Toàn bộ những files, folder khác nằm ngoài vẫn sẽ được giữ nguyên:</p><p><img src="https://cdn-images-1.medium.com/max/800/1*eXN1LlNnuZmosJ7n7EsJ-Q.png" alt=""></p><h2 id="Tach-rieng-thanh-folder-Containers-va-Components"><a href="#Tach-rieng-thanh-folder-Containers-va-Components" class="headerlink" title="Tách riêng thành folder Containers và Components"></a>Tách riêng thành folder Containers và Components</h2><p>Có thể bạn đã thấy trong một vài dự án, dev thường sử dụng hai folders có tên <em>Components</em> và <em>Containers</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├─ components </span><br><span class="line">└─ containers</span><br></pre></td></tr></table></figure><p>Thoạt nhìn thì có vẻ ổn, nhưng cách phân chia như trên còn tồn tại những nhược điểm như sau:</p><ul><li><strong>Định nghĩa chức năng một cách không rõ ràng</strong> - Sử dụng cấu trúc như trên có thể gây nhầm lẫn, hiểu lần về chức năng của mỗi folder <em>Container</em> và <em>Component</em> , có nhiều người sẽ hiểu chức năng của mỗi folder theo ý khác nhau. Có người thì hiểu <em>Containers</em> là các components thực hiện việc xử lý logic (như handle click, button) và lấy dữ liệu từ server, còn components có nghĩa <em>Presentational Component</em>, thực hiện nhiệm vụ hiển thị view cho người dùng. Có người lại sử dụng <em>Containers</em> để chứa những route components (mỗi component là một link route, nếu như bạn sử dụng react-router), còn <em>Components</em> thì chứa những base component để tạo nên các route components kia. Vì thế khi làm việc trong team sẽ gây ra không đồng nhất và các member khó thống nhất trong việc sử dụng hai folder này.</li><li><strong>Components không còn linh động, reusable</strong> - Ngay cả khi bạn đã code ra một components với chức năng đặc thù, sau này bạn vẫn phải sửa lại components đó do những lí do như đổi requirements, thêm chức năng,… khiến cho file chuyển qua chuyển lại giữa 2 folders <strong>components</strong> và <strong>containers</strong>.</li><li><strong>Components trùng tên</strong> - Khi sử dụng react, tên của một component nên có ý nghĩa như chức năng của nó, và quan trọng là không nên có nhiều components trùng tên nhau trong project để tránh gây nhầm lẫn. Cách tổ chức folders như trên sẽ tạo ra 2 components có tên giống nhau, một sử dụng cho <strong>container</strong>, một sử dụng cho <strong>components</strong> (<em>presentational</em> - hiển thị)</li><li><strong>Giảm hiệu suất code</strong> - Bạn sẽ phải thường xuyên navigate giữa 2 folder trên khi viết cho một tính năng, do một tính năng thường sẽ gồm cả 2 loại components Một cách phân chia khác cũng có cấu trúc 2 folder như trên, nhưng phân biệt dựa trên module . Giả sử ứng dụng của bạn có một module User. Trong đó sẽ tách ra thành 2 folder components và containers:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└─ User</span><br><span class="line">    ├─ components </span><br><span class="line">    └─ containers</span><br></pre></td></tr></table></figure><p>Theo hướng tiếp cận trên, dev sẽ không phải gặp khó khăn trong việc navigate giữa các folder khi code. Bạn sẽ không phải kéo lên, kéo xuống để tìm xem components của User ở đâu, khi đang hoàn thiện file trong containers để đối chiếu. Tuy nhiên, cách này sẽ sinh ra một đống folder containers và components nếu như hệ thống của bạn lớn và cót rất nhiều modules.</p><p>Như vậy, việc tách biệt 2 folder <strong>components</strong> và <strong>containers</strong> không hẳn là hợp lý. Thay vì tách riêng ra như vậy, các components sẽ được đặt hết trong folder <strong>components</strong> ngoại trừ những components sử dụng làm <em>screens</em></p><h2 id="Tai-cau-truc-folders-dua-tren-module"><a href="#Tai-cau-truc-folders-dua-tren-module" class="headerlink" title="Tái cấu trúc folders dựa trên module"></a>Tái cấu trúc folders dựa trên module</h2><p>Trong folder <strong>components</strong>, chúng ta sẽ nhóm các files lại theo module hoặc feature/tính năng.</p><p>Với tính năng CRUD user, chúng ta chỉ cần module User, nên folder tree sẽ có dạng như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└─ components</span><br><span class="line">  └─ User</span><br><span class="line">    ├─ Form.jsx</span><br><span class="line">    └─ List.jsx</span><br></pre></td></tr></table></figure><p>Khi component được cấu thành bời nhiều hơn một file (chẳng hạn như phải import nhiều components khác, hay file chỉnh sửa css cho component đó), chúng ta sẽ đưa component này cùng các files liên quan vào một folder có cùng tên. Ví dụ như <strong>Form.jsx</strong> cần thêm <strong>Form.css</strong> để chỉnh style, bạn sẽ có một folder như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└─ components</span><br><span class="line">  └─ User</span><br><span class="line">    ├─ Form</span><br><span class="line">    │ ├─ Form.jsx</span><br><span class="line">    │ └─ Form.css</span><br><span class="line">    └─ List.jsx</span><br></pre></td></tr></table></figure><h3 id="UI-components"><a href="#UI-components" class="headerlink" title="UI components"></a>UI components</h3><p>Ngoài các folder dành cho module hay tính năng trong ứng dụng của bạn, có thể thêm một folder _UI_ (hoặc <em>base</em>/<em>atomic</em>) dùng cho các component dạng UI - là những phần tử nhỏ sử dụng cho UI trong ứng dụng của bạn. Đây là những component giống các thư viện open source, thường được dùng đi dùng lại nhiều lần trong ứng dụng của bạn, không nhất thiết phải là một module lớn và không thực hiện các business logic. Những ví dụ về components dạng này như Button, Checkbox, SelectBox, Modal, DatePicker, BreadCrumb,…</p><h1 id="Dat-ten-cho-components"><a href="#Dat-ten-cho-components" class="headerlink" title="Đặt tên cho components"></a>Đặt tên cho components</h1><p>Ở phần trên chúng ta đã thấy được cách hệ thống files và folder trong ứng dụng, còn bây giờ sẽ tìm hiểu xem đặt tên components ra sao cho phù hợp.</p><p>Như đã đề cập ở trên, tên của components nên rõ ràng và không bị trùng lặp để có thể dễ tìm lại và tránh nhầm lẫn cho những thành viên khác trong team. Ngoài ra, tên components rõ ràng cũng giúp cho việc debug bằng những extension tools trở nên dễ dàng hơn trên trình duyệt (chẳng hạn như React Dev Tools) - vì khi app của bạn gặp lỗi khi đang chạy thì lỗi sẽ hiển thị ở đúng components xảy ra lỗi.</p><p>Để đặt tên components, chúng ta sẽ đặt theo hướng <em>path-based-component-naming</em>, nghĩa là cấu thành bởi đường dẫn từ folder src/components đến file chúng ta tạo component đó. Chẳng hạn, bạn có một file với đường dẫn <strong>src/components/User/List.jsx</strong> thì tên component được sử dụng trong <strong>List.jsx</strong> sẽ được đặt là <strong>UserList</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span></span><br></pre></td></tr></table></figure><p>Nếu một file trong folder trùng tên với tên folder, chúng ta sẽ không cần phải lặp lại cả tên folder lẫn tên file. Chẳng hạn, có một file <strong>src/components/User/Form/Form.jsx</strong> thì thay vì sử dụng <strong>UserFormForm</strong>, chúng ta sẽ đặt là UserForm.</p><p>Việc đặt tên components theo đường dẫn như trên có những ích lợi như sau:</p><ul><li><strong>Việc search file trong text editor/IDE trở nên thuận tiện hơn</strong> - Chỉ cần gõ vào ô search của IDE hay text editor mà bạn sử dụng là có thể tìm đến file một cách nhanh chóng. Hoặc navigate đến file cũng rất thuận tiện:</li></ul><p><img src="https://cdn-images-1.medium.com/max/800/1*DLndSrnMgIklk7tAhzgMWg.png" alt=""></p><ul><li><p><strong>Tránh lặp đi lặp lại tên khi import</strong> Theo cách đặt tên như vậy, bạn sẽ luôn đặt tên file giống với chức năng, nhiệm vụ của nó. Đối với component <strong>form</strong> ở trên, chính xác thì phải là <strong>user form</strong>, nhưng do file đã nằm trong folder <strong>User</strong> nên chúng ta không cần lặp lại từ đó trong tên file của component, mà chỉ cần sử dung <strong>Form.jsx</strong></p><p>Có nhiều trường hợp, dev viết app React và đặt tên file/folder cũng như tên component một cách đầy đủ, bao gồm cả tên module lớn và nhỏ, và dần dần sau này khi app scale lên thì việc đặt tên này sẽ trở nên phức tạp hơn rất nhiều. Thử so sánh hai trường hợp sau đây:</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ScreensUserForm <span class="keyword">from</span> <span class="string">'./screens/User/UserForm'</span>;</span><br><span class="line"><span class="comment">// vs</span></span><br><span class="line"><span class="keyword">import</span> ScreensUserForm <span class="keyword">from</span> <span class="string">'./screens/User/Form'</span>;</span><br></pre></td></tr></table></figure><p>Đối với module nhỏ với ít thành phần như trên thì cách đặt tên thứ hai có vẻ như không tạo nhiều khác biệt lắm, ta có thể thấy cách viết thứ nhất vẫn ổn. Tuy nhiên, nếu như app của bạn scale lên với nhiều thành phần, module, chức năng phức tạp thì việc đặt tên như vậy sẽ trở nenen vô cùng kinh khủng:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MediaPlanViewChannel <span class="keyword">from</span> <span class="string">'/MediaPlan/MediaPlanView/MediaPlanViewChannel.jsx'</span>;</span><br><span class="line"><span class="comment">// vs</span></span><br><span class="line"><span class="keyword">import</span> MediaPlanViewChannel <span class="keyword">from</span> <span class="string">'./MediaPlan/View/Channel'</span>;</span><br></pre></td></tr></table></figure><p>Chưa kể những dòng như thế này còn lặp lại nhiều lần vì phải import nhiều thành phần cùng lúc…. Ví lí do đó, chúng ta nên đặt tên file và folder đúng với chức năng/nhiệm vụ trực tiếp của nó, thay vì thêm vào tên của những module cha. Còn tên component thì nên đặt theo đường dẫn tương đối so với folder src/components.</p><h1 id="Screens-components-Dung-cho-mot-view-page"><a href="#Screens-components-Dung-cho-mot-view-page" class="headerlink" title="Screens components - Dùng cho một view page"></a>Screens components - Dùng cho một view page</h1><p>Ở trên, bài viết có nhắc đến những compoents không được đặt trong folder components, được gọi là <em>screens</em>. Giống như tên gọi của nó, đây là những components tượng trưng cho một <em>màn hình</em> hiển thị trong ứng dụng của bạn Lấy ví dụ đối với tính năng CRUD users, chúng ta sẽ có những màn hình cơ bản nhất bao gồm:</p><ul><li>List users (/users</li><li>Create user (/user)</li><li>Edit user (/users/:id)</li></ul><p>Như vậy, chúng ta có 3 screens khác nhau. Mỗi screen là một component cấu thành lên một page trong ứng dụng react của bạn. Screen component nên là một presentational component và không nên thực hiện xử lý business logic.</p><p>Các screens sẽ nằm trong một folder screens song song với components trong đường dẫn src, vì mỗi component ở trong sẽ đại diện cho route của ứng dụng, thay vì một module nào đó:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">    ├─ components </span><br><span class="line">    └─ screens</span><br><span class="line">      └─ User</span><br><span class="line">        ├─ Form.jsx</span><br><span class="line">        └─ List.jsx</span><br></pre></td></tr></table></figure><p>Nếu ứng dụng của bạn sử dụng react-router, chúng ta sẽ giữ một file Root.jsx trong folder screens và đưa toàn bộ các view route vào trong file này:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Redirect, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ScreensUserForm <span class="keyword">from</span> <span class="string">'./User/Form'</span>;</span><br><span class="line"><span class="keyword">import</span> ScreensUserList <span class="keyword">from</span> <span class="string">'./User/List'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ScreensRoot = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/user/list"</span> component=&#123;ScreensUserList&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/user/create"</span> component=&#123;ScreensUserForm&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/user/:id"</span> component=&#123;ScreensUserForm&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Router&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ScreensRoot;</span><br></pre></td></tr></table></figure><p>Với cách này chúng ta đã đưa toàn bộ screens vào trong một folder có cùng tên với định nghĩa route: user/ -&gt; User/. Folder User chứa màn hình List và màn hinh Form bên trong. Từ đó bạn có thể dễ dàng tìm thấy màn hình nào render route nào bằng cách nhìn vào url.</p><p>Một màn hình có thể sử dụng để render nhiều route, như chúng ta thấy màn hình Form sẽ render 2 route dành cho việc Create và Edit. Chú ý rằng, chúng ta nên thêm prefix Screen khi đặt tên cho các screen, để tránh nhầm lẫn với các component trong folder components.</p><p>Như vậy tên của screen component đặt trong folder src/screens/User/List.jsx nên được đặt là ScreenUserList:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> UserForm <span class="keyword">from</span> <span class="string">'../../components/User/Form/Form'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ScreensUserForm = <span class="function">(<span class="params">&#123; match: &#123; params &#125; &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">      &#123;<span class="string">`<span class="subst">$&#123;!params.id ? <span class="string">'Create'</span> : <span class="string">'Update'</span>&#125;</span>`</span>&#125; User</span><br><span class="line">    &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;UserForm id=&#123;params.id&#125; /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default ScreensUserForm;</span></span><br></pre></td></tr></table></figure><p>Như trong đoạn code trên thì screen component sẽ không xử lý gì liên quan đến state (data) mà chỉ thực hiện render ra component <em>UserForm</em>.</p><p>Cuối cùng thì chúng ta sẽ có được một cấu trúc folder như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├─ components </span><br><span class="line">│  ├─ User</span><br><span class="line">│  │ ├─ Form</span><br><span class="line">│  │ │ ├─ Form.jsx</span><br><span class="line">│  │ │ └─ Form.css</span><br><span class="line">│  │ └─ List.jsx</span><br><span class="line">│  └─ UI </span><br><span class="line">│</span><br><span class="line">└─ screens</span><br><span class="line">  ├─ User</span><br><span class="line">  │ ├─ Form.jsx</span><br><span class="line">  │ └─ List.jsx</span><br><span class="line">  └─ Root.jsx</span><br></pre></td></tr></table></figure><h2 id="Tong-ket"><a href="#Tong-ket" class="headerlink" title="Tổng kết"></a>Tổng kết</h2><p>Tóm tắt lại, chúng ta cần nhớ những điểm sau đây:</p><ul><li><strong>Presentational</strong> và <strong>Container</strong> components được đặt trong folder src/components</li><li>Nhóm các components lại dựa trên module/feature</li><li>Đưa những component chung được sử dụng nhiều lần (UI components) vào trong src/components/UI</li><li>Viết component <strong>screens</strong> (màn hình) thật đơn giản, ít code</li><li>Nhóm các màn hình lại theo route của ứng dụng. Với route /user/list thì screen sẽ nằm trong src/screens/User/List.jsx.</li><li>Components được dặt tên theo đường dẫn tương đối của so với src/components hoặc src - Tên component trong file src/components/User/List.jx sẽ có tên là UserList, tên component trong file src/screens/User/List.jsx sẽ có tên là ScreensUserList.</li><li>Component trong file có cùng tên với folder chứa nó sẽ không lặp lại tên của folder. Ví dụ file src/components/User/List/List.jsx sẽ có component được đặt tên là UserList, chứ <strong>KHÔNG PHẢI</strong> là UserListList</li></ul><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Bài viết đã đưa ra một trong những cách để tổ chức, phân chia cũng như đặt tên cho file, folder và component khi thiết kế ứng dụng bằng React. Đương nhiên, đây chỉ là ý kiến chủ quan, bạn hoàn toàn có thể tự mình thiết lập và đưa ra những pattern mà bạn cảm thấy hợp lý, thuận tiện khi làm việc với React, miễn sao cho trải nghiệm của bản thân là tốt nhất. Xin cảm ơn!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Như bạn đã biết, React chỉ là một thư viện nên nó không chỉ rõ cho người dùng cách tổ chức, phân chia cấu trúc thư mục cho dự án của mình. Xét trên một khía cạnh, có thể điều này là tốt vì dev có thể thoải mái thử rất nhiều cách khác nhau để chọn ra phương pháp phù hợp với dự án của mình. Tuy nhiên, nó lại khiến cho những dev mới bắt đầu sử dụng React cảm thấy khó hiểu. Bài viết này sẽ đưa ra một vài phương pháp phân chia folders, files giúp cho ứng dụng React của bạn có thể mở rộng một cách thuận tiện, nhất là đối với những người mới bước chân vào React và không biết phải làm như thế nào cho hợp lý.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nthung2112.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Gooact: React trong 160 dòng code JavaScript</title>
    <link href="http://nthung2112.github.io/2018/05/Gooact-React-trong-160-dong-code-JavaScript.html"/>
    <id>http://nthung2112.github.io/2018/05/Gooact-React-trong-160-dong-code-JavaScript.html</id>
    <published>2018-05-26T08:13:00.000Z</published>
    <updated>2018-05-26T13:12:23.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lam-the-nao-de-xay-dung-React-cho-rieng-minh-chi-trong-vai-phut"><a href="#Lam-the-nao-de-xay-dung-React-cho-rieng-minh-chi-trong-vai-phut" class="headerlink" title="Làm thế nào để xây dựng React cho riêng mình chỉ trong vài phút."></a>Làm thế nào để xây dựng React cho riêng mình chỉ trong vài phút.</h2><h3 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a><strong>Giới thiệu</strong></h3><p><a href="https://reactjs.org" target="_blank" rel="noopener"><strong>React</strong></a> là một thư viện tuyệt vời - nhiều nhà phát triển ngay lập tức đã yêu thích nó vì tính đơn giản, hiệu suất và cách khai báo làm việc. Nhưng cá nhân tôi có một lý do cụ thể khiến nó trở nên đặc biệt đối với tôi - và đó là cách nó hoạt động bên dưới. Tôi tìm thấy những ý tưởng đứng đằng sau React đơn giản nhưng kỳ lạ thú vị - và tôi tin rằng sự hiểu biết nguyên tắc cốt lõi của nó sẽ giúp bạn viết mã nhanh hơn và an toàn hơn.</p><p>Trong bài viết này, tôi sẽ chỉ cho cho bạn cách viết một bản sao của React đầy đủ chức năng, bao gồm Component API và tự triển khai Virtual DOM. Nó được chia thành bốn phần - mỗi phần là một chủ đề chính:</p><ul><li><strong>Elements</strong>: Trong phần này chúng ta sẽ tìm hiểu cách các khối JSX được xử lý thành phiên bản nhẹ của DOM được gọi là VDOM như thế nào.</li><li><strong>Rendering</strong>: Trong phần này tôi sẽ hướng dẫn bạn cách chuyển đổi VDOM thành DOM thông thường.</li><li><strong>Patching</strong>: Trong phần này tôi sẽ trình bày lý do tại sao thuộc tính “key” quan trọng như thế và cách sử dụng VDOM để nối lại với DOM hiện tại một cách hiệu quả.</li><li><strong>Components:</strong> Phần cuối cùng sẽ cho bạn biết về các thành phần React và quy trình tạo, vòng đời và dựng hình của chúng.</li></ul><p>Mỗi phần sẽ kết thúc bằng một ví dụ có link <strong>CodePen</strong> trực tiếp, vì vậy bạn có thể ngay lập tức kiểm tra tất cả các tiến trình chúng ta đã thực hiện. Bắt đầu nào.</p><h3 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a><strong>Elements</strong></h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*KQcMpRQeOW0sdc0wYrwSrw.png" alt=""></p><p><a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html#elements-describe-the-tree" target="_blank" rel="noopener"><strong>Element</strong></a> là một đối tượng trọng lượng nhẹ của một DOM thực tế. Nó chứa tất cả thông tin quan trọng - như node type, attributes và danh sách children —  vì vậy nó có thể dễ dàng rendered trong tương lai. Thành phần giống như cây của các elements được gọi là VDOM - một ví dụ được hiển thị bên dưới:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"type"</span>: <span class="string">"ul"</span>,</span><br><span class="line">    <span class="string">"props"</span>: &#123;</span><br><span class="line">        <span class="string">"className"</span>: <span class="string">"some-list"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"children"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"li"</span>,</span><br><span class="line">            <span class="string">"props"</span>: &#123;</span><br><span class="line">                <span class="string">"className"</span>: <span class="string">"some-list__item"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"children"</span>: [</span><br><span class="line">                <span class="string">"One"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"li"</span>,</span><br><span class="line">            <span class="string">"props"</span>: &#123;</span><br><span class="line">                <span class="string">"className"</span>: <span class="string">"some-list__item"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"children"</span>: [</span><br><span class="line">                <span class="string">"Two"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thay vì viết object quái dị đó mọi lúc, hầu hết các nhà phát triển React đều sử dụng cú pháp JSX, trông giống như một sự kết hợp gọn gàng giữa mã JavaScript và các thẻ HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/** @jsx createElement */</span><br><span class="line">const list = <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"some-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"some-list__item"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"some-list__item"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>;</span><br></pre></td></tr></table></figure><p>In order to get executed it needs to be transpiled into regular function calls — notice that pragma comment which defines what function must be used:<br>Để được thực hiện, nó cần phải được chuyển thành các gọi hàm thông thường - chú ý comment pragma là phải luôn sử dụng:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = createElement(<span class="string">'ul'</span>, &#123;<span class="attr">className</span>: <span class="string">'some-list'</span>&#125;,</span><br><span class="line">    createElement(<span class="string">'li'</span>, &#123;<span class="attr">className</span>: <span class="string">'some-list__item'</span>&#125;, <span class="string">'One'</span>),</span><br><span class="line">    createElement(<span class="string">'li'</span>, &#123;<span class="attr">className</span>: <span class="string">'some-list__item'</span>&#125;, <span class="string">'Two'</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Cuối cùng, function mong muốn được gọi - và nó được cho là trả về cấu trúc VDOM được mô tả ở trên. Việc triển khai của chúng tôi sẽ ngắn gọn - nhưng mặc dù có vẻ nguyên thủy, nó phục vụ mục đích cần một cách hoàn hảo:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createElement = <span class="function">(<span class="params">type, props, ...children</span>) =&gt;</span> &#123;</span><br><span class="line">    props = props != <span class="literal">null</span> ? props : &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;type, props, children&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>CodePen đầu tiên có sẵn <a href="https://codepen.io/SweetPalma/pen/gzpZNv?editors=0010" target="_blank" rel="noopener"><strong>ở đây</strong></a>— nó chứa phương pháp được mô tả ở trên với một vài cây VDOM do nó tạo ra.</p><h3 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*Wc-kOHkiu41Rc69-cG9KhA.png" alt=""></p><p><a href="https://reactjs.org/docs/rendering-elements.html" target="_blank" rel="noopener"><strong>Rendering</strong></a> là một quá trình biến VDOM thành DOM hiển thị. Nói chung, nó là một thuật toán khá đơn giản mà đi qua cây VDOM và tạo ra phần tử DOM tương ứng cho mỗi node:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> render = <span class="function">(<span class="params">vdom, parent=<span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent) parent.textContent = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> mount = parent ? (<span class="function"><span class="params">el</span> =&gt;</span> parent.appendChild(el)) : (<span class="function"><span class="params">el</span> =&gt;</span> el);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'string'</span> || <span class="keyword">typeof</span> vdom == <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mount(<span class="built_in">document</span>.createTextNode(vdom));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'boolean'</span> || vdom === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mount(<span class="built_in">document</span>.createTextNode(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> vdom.type == <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mount(Component.render(vdom));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> vdom.type == <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> dom = <span class="built_in">document</span>.createElement(vdom.type);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> child <span class="keyword">of</span> [].concat(...vdom.children)) <span class="comment">// flatten</span></span><br><span class="line">            dom.appendChild(render(child));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> vdom.props)</span><br><span class="line">            setAttribute(dom, prop, vdom.props[prop]);</span><br><span class="line">        <span class="keyword">return</span> mount(dom);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid VDOM: <span class="subst">$&#123;vdom&#125;</span>.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setAttribute = <span class="function">(<span class="params">dom, key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value == <span class="string">'function'</span> &amp;&amp; key.startsWith(<span class="string">'on'</span>)) &#123;</span><br><span class="line">        <span class="keyword">const</span> eventType = key.slice(<span class="number">2</span>).toLowerCase();</span><br><span class="line">        dom.__gooactHandlers = dom.__gooactHandlers || &#123;&#125;;</span><br><span class="line">        dom.removeEventListener(eventType, dom.__gooactHandlers[eventType]);</span><br><span class="line">        dom.__gooactHandlers[eventType] = value;</span><br><span class="line">        dom.addEventListener(eventType, dom.__gooactHandlers[eventType]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">'checked'</span> || key == <span class="string">'value'</span> || key == <span class="string">'id'</span>) &#123;</span><br><span class="line">        dom[key] = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key == <span class="string">'key'</span>) &#123;</span><br><span class="line">        dom.__gooactKey = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> value != <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">'function'</span>) &#123;</span><br><span class="line">        dom.setAttribute(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Code ở trên có vẻ trông đáng sợ, nhưng hãy làm cho mọi thứ trở nên ít phức tạp hơn bằng cách tách nó thành các phần nhỏ hơn:</p><ul><li><strong>Custom Attribute Setter</strong>: Các thuộc tính được chuyển đến VDOM không phải lúc nào cũng hợp lệ về DOM - những thứ như trình xử lý sự kiện, key định danh và các giá trị phải được xử lý riêng lẻ.</li><li><strong>Primitive VDOM rendering:</strong> Primitives — như strings, numbers, booleans và nulls — được chuyển thành các node văn bản thuần túy.</li><li><strong>Complex VDOM rendering:</strong> Nodes với tag string được biến thành các phần tử DOM với hiển thị children theo đệ quy.</li><li><strong>Component VDOM rendering</strong>: Nodes với tag function tag được xử lý riêng — không chú ý nhiều đến phần đó, chúng ta sẽ thực hiện nó sau.</li></ul><p>CodePen thứ hai có sẵn <a href="https://codepen.io/SweetPalma/pen/ZoGwWY?editors=0010" target="_blank" rel="noopener"><strong>ở đây</strong></a>— nó thể hiện thuật toán render trong hành động.</p><h3 id="Patching"><a href="#Patching" class="headerlink" title="Patching"></a>Patching</h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*2IcfCputh--ch7rTVLCmcw.png" alt=""></p><p><a href="https://reactjs.org/docs/reconciliation.html" target="_blank" rel="noopener"><strong>Patching</strong></a> là một quá trình hòa hợp DOM hiện có với cây VDOM mới được xây dựng.</p><p>Hãy tưởng tượng bạn có một số VDOM lồng nhau sâu và cập nhật thường xuyên. Khi một cái gì đó thay đổi, ngay cả phần nhỏ nhất - mà phải được hiển thị. Triển khai native sẽ yêu cầu render toàn bộ mỗi lần cập nhật như vậy.</p><ul><li>Xóa các nút DOM hiện có.</li><li>Re-render mọi thứ.</li></ul><p>Đó là lý do thực tế — xây dựng DOM và vẽ lại nó là một hoạt động khá tốn kém. Nhưng chúng ta có thể tối ưu hóa điều này bằng cách viết thuật toán và sẽ yêu cầu ít sửa đổi DOM:</p><ul><li>Xây dựng một VDOM mới.</li><li>Đệ quy so sánh nó với DOM hiện có.</li><li>Tìm các nút đã được thêm, xóa hoặc thay đổi theo bất kỳ cách nào.</li><li>Patch(Vá) chúng lại.</li></ul><p>Nhưng sau đó một vấn đề khác nổi lên — độ phức tạp tính toán. So sánh hai cây có độ phức tạp O(n³) — ví dụ: nếu bạn định patch một ngìn elements — nó sẽ yêu cầu <em>một tỷ</em> so sánh. Điều đó là quá nhìu. Thay vào đó, chúng ta sẽ triển khai một thuật toán độ phức tạp O(n) với hai giả định sau:</p><ul><li>Hai elements của các loại khác nhau sẽ tạo ra những cây khác nhau.</li><li>Nhà phát triển có thể gợi ý các phần tử con nào có thể không đổi qua các lần render khác nhau với prop “key”.</li></ul><p>Trong thực tế, các giả định này có giá trị đối với hầu hết các trường hợp sử dụng thực tế. Bây giờ chúng tôi đã sẵn sàng cho một phần code khác:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> patch = <span class="function">(<span class="params">dom, vdom, parent=dom.parentNode</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> replace = parent ? <span class="function"><span class="params">el</span> =&gt;</span> (parent.replaceChild(el, dom) &amp;&amp; el) : (<span class="function"><span class="params">el</span> =&gt;</span> el);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> vdom.type == <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Component.patch(dom, vdom, parent);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom != <span class="string">'object'</span> &amp;&amp; dom <span class="keyword">instanceof</span> Text) &#123;</span><br><span class="line">        <span class="keyword">return</span> dom.textContent != vdom ? replace(render(vdom)) : dom;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'object'</span> &amp;&amp; dom <span class="keyword">instanceof</span> Text) &#123;</span><br><span class="line">        <span class="keyword">return</span> replace(render(vdom));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'object'</span> &amp;&amp; dom.nodeName != vdom.type.toUpperCase()) &#123;</span><br><span class="line">        <span class="keyword">return</span> replace(render(vdom));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vdom == <span class="string">'object'</span> &amp;&amp; dom.nodeName == vdom.type.toUpperCase()) &#123;</span><br><span class="line">        <span class="keyword">const</span> pool = &#123;&#125;;</span><br><span class="line">        <span class="keyword">const</span> active = <span class="built_in">document</span>.activeElement;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> <span class="built_in">Array</span>.from(dom.childNodes)) &#123;</span><br><span class="line">            <span class="keyword">const</span> child = dom.childNodes[index];</span><br><span class="line">            <span class="keyword">const</span> key = child.__gooactKey || index;</span><br><span class="line">            pool[key] = child;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> vchildren = [].concat(...vdom.children); <span class="comment">// flatten</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> index <span class="keyword">in</span> vchildren) &#123;</span><br><span class="line">            <span class="keyword">const</span> child = vchildren[index];</span><br><span class="line">            <span class="keyword">const</span> key = child.props &amp;&amp; child.props.key || index;</span><br><span class="line">            dom.appendChild(pool[key] ? patch(pool[key], child) : render(child));</span><br><span class="line">            <span class="keyword">delete</span> pool[key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> pool) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pool[key].__gooactInstance)</span><br><span class="line">                pool[key].__gooactInstance.componentWillUnmount();</span><br><span class="line">            pool[key].remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">of</span> dom.attributes) dom.removeAttribute(attr.name);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> vdom.props) setAttribute(dom, prop, vdom.props[prop]);</span><br><span class="line">        active.focus();</span><br><span class="line">        <span class="keyword">return</span> dom;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Hãy điều tra tất cả các kết hợp có thể:</p><ul><li><strong>Primitive VDOM + Text DOM:</strong> So sánh giá trị VDOM với nội dung DOM và thực hiện full render nếu chúng khác nhau.</li><li><strong>Primitive VDOM + Element DOM :</strong> Full render.</li><li><strong>Complex VDOM + Text DOM :</strong> Full render.</li><li><strong>Complex VDOM + Element DOM of different type :</strong> Full render.</li><li><strong>Complex VDOM + Element DOM of same type :</strong> Sự kết hợp thú vị nhất, nơi diễn ra sự hòa hợp của children, xem chi tiết bên dưới.</li><li><strong>Component VDOM + any kind of DOM:</strong> Cũng giống như trong phần trước, được xử lý riêng và sẽ được triển khai sau.</li></ul><p>Như bạn có thể thấy, các nút text và phức tạp nói chung không tương thích và yêu cầu full render — may mắn thay đó là một sự thay đổi hiếm hoi. Nhưng những gì về sự hòa hợp của children đệ quy - nó thực hiện như sau:</p><ul><li>Current active element is memoized — reconciliation may break focus sometimes.</li><li>DOM children are moved into temporary pool under their respective keys — index is used as a key by default.</li><li>VDOM children are paired to the pool DOM nodes by key and recursively patched — or rendered from scratch if pair is not found.</li><li>DOM nodes that left unpaired are removed from document.</li><li>New attributes are applied to final parent DOM.</li><li>Focus is returned back to previously active element.</li></ul><p>CodePen thứ ba có sẵn <a href="https://codepen.io/SweetPalma/pen/rvOWxa?editors=0010" target="_blank" rel="noopener"><strong>ở đây</strong></a> — bao gồm ví dụ nhỏ về list patching.</p><h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*wOrDURrPrNvH3eKeaQuyQQ.png" alt=""></p><p><a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener"><strong>Component</strong></a> về mặt khái niệm tương tự như hàm JavaScript — nó có đầu vào tùy ý được gọi là “props” và trả về tập các elements mô tả những gì sẽ xuất hiện trên màn hình. Nó có thể được định nghĩa là một stateless function hoặc derived class với trạng thái bên trong của riêng và tập các phương thức và các lifecycle hooks. Tôi sẽ ngắn gọn về lý thuyết - tốt hơn hãy xem code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">this</span>.props = props || &#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> render(vdom, parent=<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, vdom.props, &#123;<span class="attr">children</span>: vdom.children&#125;);</span><br><span class="line">        <span class="keyword">if</span> (Component.isPrototypeOf(vdom.type)) &#123;</span><br><span class="line">            <span class="keyword">const</span> instance = <span class="keyword">new</span> (vdom.type)(props);</span><br><span class="line">            instance.componentWillMount();</span><br><span class="line">            instance.base = render(instance.render(), parent);</span><br><span class="line">            instance.base.__gooactInstance = instance;</span><br><span class="line">            instance.base.__gooactKey = vdom.props.key;</span><br><span class="line">            instance.componentDidMount();</span><br><span class="line">            <span class="keyword">return</span> instance.base;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> render(vdom.type(props), parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> patch(dom, vdom, parent=dom.parentNode) &#123;</span><br><span class="line">        <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, vdom.props, &#123;<span class="attr">children</span>: vdom.children&#125;);</span><br><span class="line">        <span class="keyword">if</span> (dom.__gooactInstance &amp;&amp; dom.__gooactInstance.constructor == vdom.type) &#123;</span><br><span class="line">            dom.__gooactInstance.componentWillReceiveProps(props);</span><br><span class="line">            dom.__gooactInstance.props = props;</span><br><span class="line">            <span class="keyword">return</span> patch(dom, dom.__gooactInstance.render());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Component.isPrototypeOf(vdom.type)) &#123;</span><br><span class="line">            <span class="keyword">const</span> ndom = Component.render(vdom);</span><br><span class="line">            <span class="keyword">return</span> parent ? (parent.replaceChild(ndom, dom) &amp;&amp; ndom) : (ndom);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Component.isPrototypeOf(vdom.type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> patch(dom, vdom.type(props));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setState(nextState) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.base &amp;&amp; <span class="keyword">this</span>.shouldComponentUpdate(<span class="keyword">this</span>.props, nextState)) &#123;</span><br><span class="line">            <span class="keyword">const</span> prevState = <span class="keyword">this</span>.state;</span><br><span class="line">            <span class="keyword">this</span>.componentWillUpdate(<span class="keyword">this</span>.props, nextState);</span><br><span class="line">            <span class="keyword">this</span>.state = nextState;</span><br><span class="line">            patch(<span class="keyword">this</span>.base, <span class="keyword">this</span>.render());</span><br><span class="line">            <span class="keyword">this</span>.componentDidUpdate(<span class="keyword">this</span>.props, prevState);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = nextState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="keyword">return</span> nextProps != <span class="keyword">this</span>.props || nextState != <span class="keyword">this</span>.state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Các static methods được gọi internally:</p><ul><li><strong>Render</strong>: Performs initial rendering. Stateless components are called as a regular function — result is displayed immediately. Class components are instantiated and attached to the DOM — and only then are rendered.</li><li><strong>Patching:</strong> Performs further update. Sometimes DOM node already has a component instance attached to it — pass new properties to it and patch differences. Perform full render otherwise.</li></ul><p>Các Instance methods có nghĩa là có thể bị ghi đè hoặc được gọi trong các derived classes do người dùng định nghĩa:</p><ul><li><strong>Constructor:</strong> Handles properties and defines initial state, storing them within itself.</li><li><strong>State modifier:</strong> Handles new state, fires all required lifecycle hooks and initiates patch cycle.</li><li><strong>Lifecycle hooks:</strong> Set of methods that are fired throughout component life — on mount, during updates and just before it gets removed.</li></ul><p>Lưu ý rằng phương thức render bị thiếu — nó được định nghĩa trong các child classes. CodePen cuối cùng có <a href="https://codepen.io/SweetPalma/pen/gzavjB?editors=0010" target="_blank" rel="noopener"><strong>ở đây</strong></a> — với tất cả các code chúng tôi đã thực hiện cho đến đây cùng với một ví dụ to-do đơn giản.</p><h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h3><p>Đó là tất cả của tôi — chúng ta có một bản sao React đầy đủ chức năng ngay bây giờ. Tôi sẽ gọi nó là Gooact — đó sẽ là một món quà nhỏ cho người bạn tốt của tôi. Chúng ta hãy xem xét kỹ hơn các kết quả:</p><ul><li>Gooact có thể xây dựng và patch hiệu quả các cây DOM phức tạp bằng cách sử dụng VDOM làm tham chiếu.</li><li>Gooact hỗ trợ cả hai functional và class components — cùng với việc xử lý chính xác internal state và hooks lifecycle hoàn chỉnh.</li><li>Gooact dùng  transpiled code cung cấp bởi Babel.</li><li>Gooact vừa đủ trong 160 dòng code JavaScript chưa nén.</li></ul><p>Mục đích chính của bài viết này là để chứng minh các nguyên tắc cốt lõi của cấu trúc bên trong React mà không cần phải đi sâu vào các API phụ trợ - đó là lý do tại sao chúng bị thiếu một số thứ sau trong Gooact:</p><ul><li>Gooact không hỗ trợ những thứ như fragments, portals, contexts, references và một số thứ khác đã được giới thiệu trong các phiên bản mới hơn.</li><li>Gooact không triển khai React Fiber do sự phức tạp của nó — nhưng tôi có thể viết một bài về nó trong tương lai.</li><li>Gooact không theo dõi các key trùng lặp và đôi khi có thể gây ra lỗi.</li><li>Gooact thiếu hỗ trợ callbacks thêm cho một số methods.</li></ul><p>Như bạn có thể thấy, đó là một lĩnh vực tuyệt vời cho các tính năng và cải tiến mới - repository có sẵn <a href="https://github.com/sweetpalma/gooact" target="_blank" rel="noopener"><strong>ở đây</strong></a>, do đó, vì vậy đừng ngần ngại fork và thử nghiệm. Bạn thậm chí có thể cài đặt nó bằng cách sử dụng NPM!</p><p>Tôi muốn cảm ơn toàn bộ <a href="https://github.com/facebook/react/blob/master/AUTHORS" target="_blank" rel="noopener"><strong>React Team</strong></a> đã tạo một thư viện tuyệt vời, làm cho cuộc sống của hàng nghìn nhà phát triển trở nên dễ dàng hơn. Đặc biệt cảm ơn đến <a href="https://github.com/developit/preact" target="_blank" rel="noopener"><strong>Preact</strong></a> tác giả chính là <a href="https://twitter.com/_developit" target="_blank" rel="noopener"><strong>Jason Miller</strong></a> — bài viết này đã được lấy cảm hứng từ cách tối giản nó được thực hiện.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*Ok_UbUJOtYxN08pFNHMwMQ.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Lam-the-nao-de-xay-dung-React-cho-rieng-minh-chi-trong-vai-phut&quot;&gt;&lt;a href=&quot;#Lam-the-nao-de-xay-dung-React-cho-rieng-minh-chi-trong-va
      
    
    </summary>
    
    
      <category term="react" scheme="http://nthung2112.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Cơ chế sử dụng Virtual DOM trong React</title>
    <link href="http://nthung2112.github.io/2018/05/Co-che-su-dung-Virtual-DOM-trong-React.html"/>
    <id>http://nthung2112.github.io/2018/05/Co-che-su-dung-Virtual-DOM-trong-React.html</id>
    <published>2018-05-25T15:22:00.000Z</published>
    <updated>2018-05-25T15:35:20.184Z</updated>
    
    <content type="html"><![CDATA[<p>Khi tìm hiểu về ReactJS, chắc hẳn bạn đã nghe tới khái niệm DOM ảo (Virtual DOM). Nó giúp cho hiệu suất làm việc của React cao hơn hẳn so với các thư viện và framework Javascript khác. Nhưng bạn đã bao giờ tìm hiểu DOM ảo là gì và nó hoạt động như thế nào trong React? Hôm nay, chúng ta cùng tìm hiểu về chủ đề này nhé.<br><a id="more"></a></p><h2 id="Virtual-DOM-la-gi"><a href="#Virtual-DOM-la-gi" class="headerlink" title="Virtual DOM là gì?"></a><strong>Virtual DOM là gì?</strong></h2><p>Điều đầu tiên tôi muốn nói ở đây là: Virtual DOM không được phát minh ra bởi React, mà React sử dụng nó. DOM ảo là một bản sao chép trừu tượng của DOM thật (HTML DOM). Bạn có thể tưởng tượng nó giống như một bản thiết kế, chứa các chi tiết cần thiết để cấu hình lên một DOM. Ví dụ, thay vì tạo một thẻ <code>&lt;div&gt;</code> thật chứa các thẻ <code>&lt;ul&gt;</code> bên trong, nó sẽ tạo một div object chứa <code>ul</code> object bên trong. Cụ thể ở trong React sẽ là các <code>React.div</code> và <code>React.ul</code>. Khi tương tác, ta có thể tương tác với các object đó rất nhanh mà không phải động tới DOM thật hoặc thông qua DOM API. Tiếp theo chúng ta sẽ tìm hiểu cụ thể React tương tác với DOM ảo như thế nào nhé</p><h2 id="Virtual-DOM-trong-React"><a href="#Virtual-DOM-trong-React" class="headerlink" title="Virtual DOM trong React"></a><strong>Virtual DOM trong React</strong></h2><p>Trước tiên, đã bao giờ bạn tự hỏi tại sao lại phải tương tác thông qua DOM ảo, sao không render trực tiếp ở DOM thật? Vậy bạn đã thực sự hiểu rõ DOM được tạo và re-render như thế nào mỗi khi các thành phần trong DOM thay đổi?</p><p><img src="https://cdn-images-1.medium.com/max/800/1*ZrzXoRljG5Co5KvEsWJNjA.png" alt=""></p><p>Mỗi khi có sự thay đổi, vì cấu trúc của DOM là <strong>tree structure</strong> , khi muốn thay đổi các element và các thẻ con của nó, nó phải thông qua các <strong>Reflow/Layout</strong>, sau đó các thay đổi đó sẽ được Re-painted, rất mất thời gian. Vì thế, càng nhiều các item phải <strong>reflow/repaint</strong>, web của bạn sẽ càng load chậm. Vậy React đã sử dụng DOM ảo như thế nào? Để một trang lớn như Facebook mà chúng ta dùng hàng ngày có hiệu suất làm việc cao như vậy? Để dễ hình dung, chúng ta sẽ tìm hiểu thông qua một ví dụ nho nhỏ dưới đây nhé.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*QX2kUf7GoCkTNkTWBUfX-g.png" alt=""></p><p>Đó là giao diện của một app cộng hoặc trừ 2 số. Người dùng sẽ nhập vào 2 số vào 2 ô input, sau đó chọn phép toán và in ra kết quả ở phần Output.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">output</span>: <span class="string">''</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> IntegerA, IntegerB, IntegerC;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;h2&gt;using React&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          Input 1:</span></span><br><span class="line"><span class="regexp">          &lt;input type="text" placeholder="Input 1" ref="input1" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          Input 2 :</span></span><br><span class="line"><span class="regexp">          &lt;input type="text" placeholder="Input 2" ref="input2" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button</span></span><br><span class="line"><span class="regexp">            id="add"</span></span><br><span class="line"><span class="regexp">            onClick=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">              IntegerA = parseInt(this.refs.input1.value);</span></span><br><span class="line"><span class="regexp">              IntegerB = parseInt(this.refs.input2.value);</span></span><br><span class="line"><span class="regexp">              IntegerC = IntegerA + IntegerB;</span></span><br><span class="line"><span class="regexp">              this.setState(&#123; output: IntegerC &#125;);</span></span><br><span class="line"><span class="regexp">            &#125;&#125;</span></span><br><span class="line"><span class="regexp">          &gt;</span></span><br><span class="line"><span class="regexp">            Add</span></span><br><span class="line"><span class="regexp">          &lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">          &lt;button</span><br><span class="line">            id=<span class="string">"subtract"</span></span><br><span class="line">            onClick=&#123;() =&gt; &#123;</span><br><span class="line">              IntegerA = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.refs.input1.value);</span><br><span class="line">              IntegerB = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.refs.input2.value);</span><br><span class="line">              IntegerC = IntegerA - IntegerB;</span><br><span class="line">              <span class="keyword">this</span>.setState(&#123; <span class="attr">output</span>: IntegerC &#125;);</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            Subtract</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;hr /&gt;</span><br><span class="line">          &lt;h2&gt;Output: &#123;<span class="keyword">this</span>.state.output&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">import React, &#123; Component &#125; from 'react';</span></span><br><span class="line"><span class="regexp">import Calculator from './</span>Calculator<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default class Layout extends Component &#123;</span></span><br><span class="line"><span class="string">  render() &#123;</span></span><br><span class="line"><span class="string">    return (</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h1&gt;Basic Calculator&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;Calculator /&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>Và đây là DOM thật sau lần load đầu tiên</p><p><img src="https://cdn-images-1.medium.com/max/800/1*UeJO46kqBIm0Z8j9B8G6kw.png" alt="How DOM looks after initial rendering"></p><p>Còn đây là DOM ảo mà React tạo ra tương ứng với DOM thật bên trên. Trong React, nó cũng được gọi là một Component với <strong>tree structure</strong> gồm các Component con bên trong</p><p><img src="https://cdn-images-1.medium.com/max/800/1*WMkI8W__gUagZEVCUN37Pg.png" alt="Component Tree structure build by React"></p><p>Sau đây, chúng ta sẽ cùng thử nhập vào 2 số và click vào button Add và xem React xử lí như thế nào nhé.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input 1: 100</span><br><span class="line">Input 2: 50</span><br><span class="line"></span><br><span class="line">Output mong đợi sẽ là 150.</span><br></pre></td></tr></table></figure><p>Điều gì xảy ra khi ta click vào button Add? Ở ví dụ này, chúng ta set <strong>output</strong> là một <strong>state</strong>, vì thế khi một <strong>output</strong> mới được hiện ra nghĩa là ta đã set cho <strong>State</strong> đó một giá trị mới đó là 150.</p><h3 id="Danh-dau-Component-dirty"><a href="#Danh-dau-Component-dirty" class="headerlink" title="Đánh dấu Component dirty"></a>Đánh dấu Component dirty</h3><p><img src="https://cdn-images-1.medium.com/max/600/1*SBXiC6G3cjT5deW1tR0C4w.png" alt="Calculator component marked Dirty"></p><p>Trong React, khi một Component có một <strong>state</strong> mới được set, React đánh dấu nó như là một <strong>dirty Component</strong>, nghĩa là mỗi khi chúng ta gọi tới function <em>setState()</em> thì Component đó sẽ được đánh dấu là <strong>dirty</strong>. Cụ thể ở đây, khi ta click Add, React sẽ đánh dấu Component <strong>Calculator</strong> như thế nào:</p><ol><li>Tất cả các event khi ta thao tác với DOM, nó được gói trọn trong <strong>React event listener</strong>. Vì thế khi nút Add được click, event đó được gửi tới <strong>React event listener</strong> và sau đó nó sẽ chạy một <em>anonymous function</em>()</li><li>Trong <em>anonymous function()</em>, chúng ta gọi tới function <em>this.setState</em> với một <strong>state</strong> value mới.</li><li>Function <em>this.setState</em>() được chạy, Component <strong>Calculator</strong> được đánh dấu là <strong>dirty</strong>.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ReactUpdates.js  - enqueueUpdate(component) function</span></span><br><span class="line">dirtyComponents.push(component);</span><br></pre></td></tr></table></figure><ol><li>Và hiện tại, Calculator của chúng ta đã được đánh dấu là <strong>dirty</strong>. Cùng xem những gì sẽ diễn ra tiếp theo</li></ol><h3 id="Chay-qua-Component-lifecycle"><a href="#Chay-qua-Component-lifecycle" class="headerlink" title="Chạy qua Component lifecycle"></a>Chạy qua Component lifecycle</h3><p><a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener">Component lifecycle</a> trong React là một loạt các hàm mặc định sẽ được chạy ngay trước, trong và ngay sau quá trình update một Component. Ở ví dụ này, chúng ta không overwrite các hàm đó thì nó sẽ chạy ở các giá trị mặc định.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*HmOs3RG_uYsneZFHnrmYEA.png" alt=""></p><p>Quá trình update Component được diễn ra như sau:</p><ol><li>React sẽ kiểm tra Component đó có được mark <strong>dirty</strong> hay không, sau đó bắt đầu quá trình update.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ReactUpdates.js</span></span><br><span class="line"><span class="keyword">var</span> flushBatchedUpdates = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (dirtyComponents.length || asapEnqueued) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dirtyComponents.length) &#123;</span><br><span class="line">      <span class="keyword">var</span> transaction = ReactUpdatesFlushTransaction.getPooled();</span><br><span class="line">      transaction.perform(runBatchedUpdates, <span class="literal">null</span>, transaction);</span><br></pre></td></tr></table></figure><ol><li>Sau đó, React sẽ kiểm tra xem có <strong>pending state</strong> nào phải được update hay không hoặc có <strong>forceUpdate</strong> nào không</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>._pendingStateQueue !== <span class="literal">null</span> || <span class="keyword">this</span>._pendingForceUpdate) &#123;</span><br><span class="line">      <span class="keyword">this</span>.updateComponent(transaction, <span class="keyword">this</span>._currentElement, </span><br><span class="line">      <span class="keyword">this</span>._currentElement, <span class="keyword">this</span>._context, <span class="keyword">this</span>._context);</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/600/1*UVixYuczWFlNJ7tbM4TAsg.png" alt=""></p><p>Trong ví dụ này của chúng ta, trong Calculator wrapper, <strong>this.pendingStateQueue,</strong> chứa State object với giá trị Output mới 3. React chạy các lifecycle methods. Đầu tiên là <em>componentWillReceiveProps</em>(), tiếp đó là <em>shouldComponentUpdate()</em> (các phương thức này có giá trị mặc định thế nào nếu chúng ta không overwrite nó thì các bạn tự tìm hiểu nhé). Trong trường hợp này, method <em>shouldComponentUpdate()</em> sẽ trả về <em>true</em>, sau đó sẽ chạy <em>componentWillUpdate(), render()</em> và <em>componentDidUpdate()</em>. Thứ quan trọng nhất trong quá trình update ở đấy chính là <em>render()</em>, đó chính là chỗ mà DOM ảo được tạo lại và update DOM ảo để tìm ra sự khác biệt để sau đó cập nhật ở DOM thật, hay nói các khác là tìm ra cụ thể những element thay đổi để update chỉ những element đó trong DOM thật.</p><h3 id="Xay-dung-lai-Component-Update-DOM-ao-tim-su-thay-doi-update-DOM-that"><a href="#Xay-dung-lai-Component-Update-DOM-ao-tim-su-thay-doi-update-DOM-that" class="headerlink" title="Xây dựng lại Component, Update DOM ảo, tìm sự thay đổi, update DOM thật"></a>Xây dựng lại Component, Update DOM ảo, tìm sự thay đổi, update DOM thật</h3><p><img src="https://cdn-images-1.medium.com/max/800/1*9paXIsNMjkuN4iBdpJ-MXg.png" alt=""></p><p>React sẽ kiểm tra các element trước và sau khi được render lại ở lần vừa rồi có giống nhau hay không, sau đó bắt đầu quá trình đồng bộ.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prevRenderedElement = <span class="keyword">this</span>._renderedComponent._currentElement;</span><br><span class="line"> <span class="keyword">var</span> nextRenderedElement = <span class="keyword">this</span>._instance.render(); <span class="comment">//Calculator.render() method is called and the element is build.</span></span><br></pre></td></tr></table></figure><p>Quá trình đồng bộ và update DOM thật như sau: </p><p><img src="https://cdn-images-1.medium.com/max/800/1*chzMjpfd821rcHntjWb8rQ.png" alt=""></p><p>Những điểm màu đỏ nghĩa là quá trình đồng bộ sẽ được lặp lại đối với những thành phần con của nó. Và đây là DOM mà chúng ta nhận được sau quá trình đó :</p><p><img src="https://cdn-images-1.medium.com/max/600/1*l2w9vcsBN7wd2UqZ7qZTHA.png" alt=""></p><p>Trong ví dụ này, chỉ có phần Output bị thay đổi, bạn có thể nhìn thấy phần được đánh dấu flash ở hình dưới, chỉ có phần đó được DOM thật re-painted </p><p><img src="https://cdn-images-1.medium.com/max/800/1*-N2b8UJgqIUtgUfPLWtQQw.png" alt=""></p><p>Và cây component được cập nhật tại DOM thực tế.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*xvjOyXVne-7Y0ch0dRTIdw.png" alt=""></p><h2 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a><strong>Kết luận</strong></h2><p>Qua ví dụ trên mong là bạn có thể hình dung phần nào đó cách thực hoạt động của DOM ảo trong React và tính hữu dụng của nó. Nhờ có DOM ảo, React có thể tìm ra các node bị thay đổi và update ở DOM thật chỉ ở những cái node đó, thật thuận tiện và nhanh gọn phải không nào.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Khi tìm hiểu về ReactJS, chắc hẳn bạn đã nghe tới khái niệm DOM ảo (Virtual DOM). Nó giúp cho hiệu suất làm việc của React cao hơn hẳn so với các thư viện và framework Javascript khác. Nhưng bạn đã bao giờ tìm hiểu DOM ảo là gì và nó hoạt động như thế nào trong React? Hôm nay, chúng ta cùng tìm hiểu về chủ đề này nhé.&lt;br&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nthung2112.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Tìm Hiểu Regular Expression Javascript</title>
    <link href="http://nthung2112.github.io/2018/05/Tim-Hieu-Regular-Expression-Javascript.html"/>
    <id>http://nthung2112.github.io/2018/05/Tim-Hieu-Regular-Expression-Javascript.html</id>
    <published>2018-05-25T14:38:00.000Z</published>
    <updated>2018-05-25T14:47:51.414Z</updated>
    
    <content type="html"><![CDATA[<p>Regular expression hay còn được gọi tắt là Regex hay RegExp, là một cách để biểu diễn khuôn mẫu của string. Đây là một phần của ngôn ngữ lập trình JavaScript, cũng như nhiều ngôn ngữ lập trình khác. Nếu bạn là một lập trình viên và đã từng sử dụng Regular Expression thì bạn chắc hẳn sẽ thấy rằng nó có cú pháp rất kinh khủng và có phần “bí ẩn”. Tuy nhiên, công cụ này lại cực kì mạnh mẽ và hiệu quả khi dùng để xử lý string. Sau đây, chúng ta sẽ cùng tìm hiểu về Regular Expression trong JavaScript.<br><a id="more"></a></p><h2 id="Khoi-tao-Regular-Expression"><a href="#Khoi-tao-Regular-Expression" class="headerlink" title="Khởi tạo Regular Expression"></a>Khởi tạo Regular Expression</h2><p>Có hai cách để tạo ra một Regular Expression là:</p><ul><li>Sử dụng hàm khởi tạo của đối tượng RegExp</li><li>Viết trực tiếp sử dụng cặp dấu “/ /“</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">var</span> re2 = <span class="regexp">/abc/</span>;</span><br></pre></td></tr></table></figure><p>Cả hai cách trên ta đều thu được một Regular Expression biểu diễn một string có dạng: <em>abc</em>.</p><h2 id="Mot-so-phuong-thuc-cua-Regular-Expression"><a href="#Mot-so-phuong-thuc-cua-Regular-Expression" class="headerlink" title="Một số phương thức của Regular Expression"></a>Một số phương thức của Regular Expression</h2><h3 id="Phuong-thuc-Test"><a href="#Phuong-thuc-Test" class="headerlink" title="Phương thức Test"></a>Phương thức Test</h3><p>Đây là phương thức đơn giản nhất dùng để kiểm tra xem một string có chứa khuôn mẫu đã định nghĩa hay không. Nếu có thì kết quả trả về là TRUE và ngược lại thì là FALSE.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/abc/</span>.test(<span class="string">"abcde"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/abc/</span>.test(<span class="string">"12abcde"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/abc/</span>.test(<span class="string">"abxcde"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>Trong ví dụ trên, 2 string “abcde” và “12abcde” đều chứa “abc” nên kết quả trả về là true. String còn lại “abxcde” không chứa “abc” nên kết quả là false.</p><h4 id="Kiem-tra-trung-khop-voi-tap-hop-cac-ki-tu"><a href="#Kiem-tra-trung-khop-voi-tap-hop-cac-ki-tu" class="headerlink" title="Kiểm tra trùng khớp với tập hợp các kí tự"></a>Kiểm tra trùng khớp với tập hợp các kí tự</h4><p>Nếu chỉ kiểm tra như ví dụ trên thì bạn hoàn toàn có thể sử dụng phương thức <em>indexOf</em> của string thay vì sử dụng Regular Expression. Tuy nhiên, với Regular Expression thì bạn có thể kiểm tra những mẫu string phức tạp hơn. <strong>Ví dụ:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0123456789]/</span>.test(<span class="string">"in 1992"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-9]/</span>.test(<span class="string">"in 1992"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-9]/</span>.test(<span class="string">"Hello "</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/[0-5]/</span>.test(<span class="string">"Gold 9999"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><p>Ví dụ 1, 2, 3 kiểm tra xem string có chứa bất kì chữ số nào từ 0 đến 9. Ví dụ cuối cùng kiểm tra xem string có chứa bất kì chữ số nào từ 0 đến 5. JavaScript sử dụng cặp dấu ngoặc vuông [] để biểu thị việc kiểm tra string có chứa bất kì kí tự nào có trong cặp dấu [] hay không. Trong đó, dấu “-“ giữa hai kí tự dùng để chỉ 1 khoảng giữa hai kí tự đó.</p><ul><li>[0-9] là các chữ số từ 0 đến 9</li><li>[a-z] là các chữ cái từ a đến z</li></ul><p>Ngoài ra, JavaScript cung cấp sẵn một số cách biểu diễn một tập hợp các kí tự:</p><ul><li>\d : bất kì chữ số nào từ 0 đến 9</li><li>\w : một chữ cái</li><li>\s : kí tự trắng (dấu cách, tab, dòng mới,…)</li><li>\D : kí tự không phải số</li><li>\W : kí tự không phải chữ cái</li><li>\S : kí tự không phải kí tự trắng</li><li>. : bất kì kí tự nào trừ dòng mới.</li></ul><p>Ví dụ kiểm tra ngày giờ có định dạng: <strong>dd-mm-yyyy hh:mm</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dateTime = <span class="regexp">/\d\d-\d\d-\d\d\d\d \d\d:\d\d/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(dateTime.test(<span class="string">"30-01-2003 15:20"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(dateTime.test(<span class="string">"30-jan-2003 15:20"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h4 id="Dao-nguoc-tap-hop-cac-ki-tu"><a href="#Dao-nguoc-tap-hop-cac-ki-tu" class="headerlink" title="Đảo ngược tập hợp các kí tự"></a>Đảo ngược tập hợp các kí tự</h4><p>Trường hợp bạn muốn kiểm tra một string chứa bất kì kí tự nào không có trong tập hợp đã cho thì bạn có thể sử dụng kí tự “^”. Ví dụ:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> notBinary = <span class="regexp">/[^01]/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(notBinary.test(<span class="string">"1100100010100110"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(notBinary.test(<span class="string">"1100100010200110"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h4 id="Lap-lai-khuon-mau"><a href="#Lap-lai-khuon-mau" class="headerlink" title="Lặp lại khuôn mẫu"></a>Lặp lại khuôn mẫu</h4><p>Trong ví dụ về kiểm tra ngày giờ bên trên, “\d” xuất hiện lặp lại rất nhiều lần. Điều này gây nên sự khó theo dõi. Do đó, JavaScript cung cấp cách thức để biểu diễn sự lặp lại khuôn mẫu:</p><ul><li>“+”: biểu thị phần tử xuất hiện &gt;= 1 lần</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d+'/</span>.test(<span class="string">"'123'"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d+'/</span>.test(<span class="string">"''"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><ul><li>“*”: biểu thị phần tử xuất hiện &gt;= 0 lần (có thể không xuất hiện)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d*'/</span>.test(<span class="string">"'123'"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/'\d*'/</span>.test(<span class="string">"''"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><ul><li>“?”: biểu thị phần tử xuất hiện 0 hoặc 1 lần</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> neighbor = <span class="regexp">/neighbou?r/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(neighbor.test(<span class="string">"neighbour"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(neighbor.test(<span class="string">"neighbor"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(neighbor.test(<span class="string">"neighbouur"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><ul><li>{n}: biểu thị phần tử xuất hiện đúng n lần</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;4&#125;/</span>.test(<span class="string">"1234"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;4&#125;/</span>.test(<span class="string">"12345"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;4&#125;/</span>.test(<span class="string">"123"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><ul><li>{x,y}: biểu thị phần tử xuất hiện từ x đến y lần</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,4&#125;/</span>.test(<span class="string">"12345"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,4&#125;/</span>.test(<span class="string">"1234"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,4&#125;/</span>.test(<span class="string">"123"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,4&#125;/</span>.test(<span class="string">"12"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,4&#125;/</span>.test(<span class="string">"1"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><ul><li>{x, }: biểu thị phần tử xuất hiện &gt;= x lần</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,&#125;/</span>.test(<span class="string">"12"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,&#125;/</span>.test(<span class="string">"1234"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d&#123;2,&#125;/</span>.test(<span class="string">"1"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h4 id="Nhom-cac-phan-tu"><a href="#Nhom-cac-phan-tu" class="headerlink" title="Nhóm các phần tử"></a>Nhóm các phần tử</h4><p>Trong nhiều trường hợp bạn muốn lặp lại cả một nhóm các phần tử. Khi đó, bạn phải nhóm các phần tử đó lại sử dụng cặp dấu ngoặc đơn “( )”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cartoonCrying = <span class="regexp">/boo+(hoo+)+/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(cartoonCrying.test(<span class="string">"Boohoooohoohooo"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h4 id="Lua-chon-khuon-mau"><a href="#Lua-chon-khuon-mau" class="headerlink" title="Lựa chọn khuôn mẫu"></a>Lựa chọn khuôn mẫu</h4><p>Trường hợp bạn có nhiều khuôn mẫu và bạn cần kiểm tra xem string đưa ra chứa một trong các khuôn mẫu đó thì bạn có thể viết các Regular Expression tương ứng để kiểm tra. Hoặc sử dụng kí tự (|) để biểu diễn “hoặc”:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animalCount = <span class="regexp">/\d+ (pig|cow|chicken)s?/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(animalCount.test(<span class="string">"15 pigs"</span>));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(animalCount.test(<span class="string">"15 pigchickens"</span>));</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="Phuong-thuc-Exec"><a href="#Phuong-thuc-Exec" class="headerlink" title="Phương thức Exec"></a>Phương thức Exec</h3><p>Nếu như phương thức <strong>test</strong> chỉ kiểm tra xem có tồn tại khuôn mẫu hay không thì phương thức <strong>exec</strong> sẽ trả về một đối tượng chứa thông tin thành phần trùng khớp với khuôn mẫu, ngược lại thì trả về null.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> match = <span class="regexp">/\d+/</span>.exec(<span class="string">"one two 100 200"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(match);</span><br><span class="line"><span class="comment">// =&gt; ["100", index: 8, input: "one two 100 200"]</span></span><br><span class="line"><span class="built_in">console</span>.log(match.index);</span><br><span class="line"><span class="comment">// =&gt; 8</span></span><br></pre></td></tr></table></figure><p>Ví dụ trên trả về thành phần thoả mãn khuôn mẫu đầu tiên là: “100”. <em>Index</em> là vị trí đầu tiên của string thoả mãn khuôn mẫu. Khi Regular Expression chứa group với cặp dấu ngoặc đơn thì phần tử đầu tiên trong kết quả sẽ là toàn bộ thành phần trùng khớp, thành phần tiếp theo là phần trùng khớp với group đầu tiên, thành phần tiếp theo là phần trùng khớp với group thứ 2,…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quotedText = <span class="regexp">/'([^']*)'/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(quotedText.exec(<span class="string">"she said 'hello'"</span>));</span><br><span class="line"><span class="comment">// =&gt; ["'hello'", "hello", index: 9, input: "she said 'hello'"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/bad(ly)?/</span>.exec(<span class="string">"bad"</span>));</span><br><span class="line"><span class="comment">// =&gt; ["bad", undefined, index: 0, input: "bad"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(\d)+/</span>.exec(<span class="string">"123"</span>));</span><br><span class="line"><span class="comment">// =&gt; ["123", "3", index: 0, input: "123"]</span></span><br></pre></td></tr></table></figure><h4 id="Trich-xuat-du-lieu-tu-string"><a href="#Trich-xuat-du-lieu-tu-string" class="headerlink" title="Trích xuất dữ liệu từ string"></a>Trích xuất dữ liệu từ string</h4><p>Phương thức này đặc biệt hữu ích khi bạn muốn lấy thông tin ra từ string. Ví dụ sau đưa ra một string biểu diễn ngày, tháng, năm. Sau đó chúng ta sẽ trích xuất ra thông tin về ngày, tháng và năm ở trong đó:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDate</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dateTime = <span class="regexp">/(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)-(\d&#123;4&#125;)/</span>;</span><br><span class="line">  <span class="keyword">var</span> match = dateTime.exec(string);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    day : match[<span class="number">1</span>],</span><br><span class="line">    month : match[<span class="number">2</span>],</span><br><span class="line">    year: match[<span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = findDate(<span class="string">"30-1-2003"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// =&gt; Object &#123;day: "30", month: "1", year: "2003"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Ranh-gioi-cua-string"><a href="#Ranh-gioi-cua-string" class="headerlink" title="Ranh giới của string"></a>Ranh giới của string</h4><p>Trong ví dụ trên, hàm findDate vẫn tìm ra kết quả nếu như string là “30-1-200300” hay “1130-1-2003”,… Đây là trường hợp không mong muốn. Regular Expression JavaScript cung cấp 2 cách để giải quyết vấn đề này:</p><ul><li>Sử dụng kí tự biểu diễn bắt đầu (^) và kết thúc ($$ string</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDate</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dateTime = <span class="regexp">/^(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)-(\d&#123;4&#125;)$/</span>;</span><br><span class="line">  <span class="keyword">var</span> match = dateTime.exec(string);</span><br><span class="line">  <span class="keyword">if</span>(!match) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    day : match[<span class="number">1</span>],</span><br><span class="line">    month : match[<span class="number">2</span>],</span><br><span class="line">    year: match[<span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = findDate(<span class="string">"30-1-2003"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="comment">// =&gt; Object &#123;day: "30", month: "1", year: "2003"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = findDate(<span class="string">"0030-1-200300"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// =&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = findDate(<span class="string">"Hello 30-1-2003 Haha"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj3);</span><br><span class="line"><span class="comment">// =&gt; null</span></span><br></pre></td></tr></table></figure><ul><li>Sử dụng kí tự biên (\b)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDate</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dateTime = <span class="regexp">/\b(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)-(\d&#123;4&#125;)\b/</span>;</span><br><span class="line">  <span class="keyword">var</span> match = dateTime.exec(string);</span><br><span class="line">  <span class="keyword">if</span>(!match) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    day : match[<span class="number">1</span>],</span><br><span class="line">    month : match[<span class="number">2</span>],</span><br><span class="line">    year: match[<span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = findDate(<span class="string">"30-1-2003"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="comment">// =&gt; Object &#123;day: "30", month: "1", year: "2003"&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = findDate(<span class="string">"0030-1-200300"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// =&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = findDate(<span class="string">"Hello 30-1-2003 Haha"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj3);</span><br><span class="line"><span class="comment">// =&gt; Object &#123;day: "30", month: "1", year: "2003"&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Tao-doi-tuong-RegExp-mot-cach-linh-dong"><a href="#Tao-doi-tuong-RegExp-mot-cach-linh-dong" class="headerlink" title="Tạo đối tượng RegExp một cách linh động"></a>Tạo đối tượng RegExp một cách linh động</h2><p>Trong nhiều trường hợp, bạn muốn tạo ra một Regular Expression với nội dung chưa được biết trước. Bạn có thể sử dụng hàm khởi tạo của RegExp theo cách sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"lampv"</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"LamPV is a suspicious character."</span>;</span><br><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\b("</span> + name + <span class="string">")\\b"</span>, <span class="string">"gi"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(text.replace(regexp, <span class="string">"_$1_"</span>));</span><br><span class="line"><span class="comment">// =&gt; _LamPV_ is a suspicious character.</span></span><br></pre></td></tr></table></figure><p>Trong đó:</p><ul><li>tham số g: chỉ ra rằng khuôn mẫu áp dụng Global, nghĩa là nó áp dụng cho tất cả thành phần trùng khớp.</li><li>tham số i: chỉ ra rằng khuôn mẫu không phân biệt chữ hoa và chữ thường.</li></ul><p>Ngoài ra, ở đây tôi có sử dụng phương thức <em>replace</em> của <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">string</a> - dùng để thay thế tất cả những thành phần trùng khớp với khuôn mẫu với “_$1_”. Ở đây $$ chính là nội dung của group thứ nhất.</p><h2 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h2><p>Trên đây là một số kiến thức cơ bản về Regular Expression. Hy vọng qua bài viết này bạn phần nào hiểu và biết cách sử dụng công cụ hiệu quả này trong công việc lập trình của mình, đặc biệt là lập trình JavaScript. Tóm tắt một số khuôn mẫu cơ bản của Regular Expression:</p><ul><li>/abc/ : chuỗi các kí tự <em>abc</em></li><li>/[abc]: bất kỳ kí tự nào thuộc tập hợp a, b, c</li><li>/[^abc]: bất kỳ kí tự nào không thuộc tập a, b, c</li><li>/[0-9]/: bất kỳ kí tự nào thuộc đoạn từ 0 đến 9</li><li>/x+/: thành phần x xuất hiện &gt;= 1 lần</li><li>/x*/: thành phần x xuất hiện &gt;= 0 lần (có thể không xuất hiện)</li><li>/x?/: thành phần x xuất hiện 0 hoặc 1 lần</li><li>/x{2, 4}/: thành phần x xuất hiện từ 2 đến 4 lần</li><li>/(abc)/: cụm <em>abc</em></li><li>/a|b|c/: bất kì pattern nào trong 3 loại a, b, c</li><li>/\d/: chữ số từ 0 đến 9</li><li>/\w/: chữ cái</li><li>/\s/: kí tự trắng (dấu cách, tab, dòng mới,…)</li><li>/./ : bất kỳ kí tự nào trừ dòng mới</li><li>/\b/: ranh giới từ</li><li>/^/: bắt đầu string</li><li>/$$: kết thúc string</li></ul><h2 id="Tham-khao"><a href="#Tham-khao" class="headerlink" title="Tham khảo"></a>Tham khảo</h2><ul><li><a href="http://eloquentjavascript.net/09_regexp.html" target="_blank" rel="noopener">http://eloquentjavascript.net/09_regexp.html</a></li><li>Bài thực hành của tôi: <a href="https://github.com/completejavascript/practical-javascript/blob/master/regular_expression/regexp_golf_completejavascript.com.js" target="_blank" rel="noopener">Regexp Golf</a>, <a href="https://github.com/completejavascript/practical-javascript/blob/master/regular_expression/quoting_style_completejavascript.com.js" target="_blank" rel="noopener">Quoting style</a>, <a href="https://github.com/completejavascript/practical-javascript/blob/master/regular_expression/numbers_again_completejavascript.com.js" target="_blank" rel="noopener">Numbers again</a>.</li><li><a href="http://phamvanlam.com/xac-thuc-ma-mau-rgb-va-ma-mau-hex-su-dung-regex-trong-javascript/" target="_blank" rel="noopener">Xác thực mã màu RGB và mã màu HEX sử dụng Regex trong Javascript</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Regular expression hay còn được gọi tắt là Regex hay RegExp, là một cách để biểu diễn khuôn mẫu của string. Đây là một phần của ngôn ngữ lập trình JavaScript, cũng như nhiều ngôn ngữ lập trình khác. Nếu bạn là một lập trình viên và đã từng sử dụng Regular Expression thì bạn chắc hẳn sẽ thấy rằng nó có cú pháp rất kinh khủng và có phần “bí ẩn”. Tuy nhiên, công cụ này lại cực kì mạnh mẽ và hiệu quả khi dùng để xử lý string. Sau đây, chúng ta sẽ cùng tìm hiểu về Regular Expression trong JavaScript.&lt;br&gt;
    
    </summary>
    
    
      <category term="regex" scheme="http://nthung2112.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Giới thiệu về Composing Software</title>
    <link href="http://nthung2112.github.io/2018/05/Gioi-thieu-ve-Composing-Software.html"/>
    <id>http://nthung2112.github.io/2018/05/Gioi-thieu-ve-Composing-Software.html</id>
    <published>2018-05-22T01:09:00.000Z</published>
    <updated>2018-05-25T15:58:41.743Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Ghi chú: Đây là phần giới thiệu về loạt bài “Composing Software” về việc học các kỹ năng functional programming và compositional software trong JavaScript ES6+ từ đầu. Hãy theo dõi còn rất nhiều thứ khác nữa!<br><a href="https://medium.com/javascript-scene/the-rise-and-fall-and-rise-of-functional-programming-composable-software-c2d91b424c8c" target="_blank" rel="noopener"><em>Bài viết Kế tiếp &gt;</em></a><br><a id="more"></a><br>Composition: “Hành động kết hợp các parts hoặc elements để tạo thành một tổng thể.”</p></blockquote><p>Trong lớp học lập trình đầu tiên của tôi, tôi đã nói rằng phát triển phần mềm là  “hành động phá vỡ một vấn đề phức tạp thành các vấn đề nhỏ hơn, và soạn các giải pháp đơn giản để tạo thành một giải pháp hoàn chỉnh cho vấn đề phức tạp.”</p><p>Một trong những hối tiếc lớn nhất của tôi trong cuộc sống là tôi đã không hiểu ý nghĩa của bài học đó từ sớm. Tôi đã học được bản chất của thiết kế phần mềm quá muộn trong cuộc sống.</p><p>Tôi đã phỏng vấn hàng trăm developers. Những gì tôi đã học được từ những buổi đó là Tôi không đơn độc. Rất ít developers phần mềm làm việc mà có nắm bắt tốt về bản chất của phát triển phần mềm. Họ không nhận thức được các công cụ quan trọng nhất chúng ta có thể có để xử lý hoặc làm thế nào để đưa chúng vào sử dụng cho tốt. 100% đã đấu tranh để trả lời một hoặc cả hai câu hỏi quan trọng nhất trong lĩnh vực phát triển phần mềm:</p><ul><li>What is function composition?</li><li>What is object composition?</li></ul><p>Vấn đề là bạn không thể tránh được ‘composition’ chỉ vì bạn không biết về nó. Bạn vẫn làm điều đó - nhưng bạn làm điều đó rất tệ. Bạn viết mã với nhiều lỗi hơn và làm cho các developers khác khó hiểu hơn. Đây là một vấn đề lớn. Các ảnh hưởng ấy tốn nhất nhiều chi phí. Chúng tôi dành nhiều thời gian hơn để duy trì phần mềm hơn là chúng tôi tạo ra nó từ đầu và các lỗi của chúng tôi tác động đến hàng tỷ người trên khắp thế giới.</p><p>Cả thế giới chạy trên phần mềm ngày nay. Mỗi chiếc xe mới là một siêu máy tính mini trên bánh xe, và các vấn đề với thiết kế phần mềm gây ra tai nạn thực sự và chi phí cuộc sống thực của con người. Vào năm 2013, Ban giám khảo đã tìm thấy nhóm phát triển phần mềm của Toyota có tội <a href="http://www.safetyresearch.net/blog/articles/toyota-unintended-acceleration-and-big-bowl-%E2%80%9Cspaghetti%E2%80%9D-code" target="_blank" rel="noopener">“Liều lĩnh không để ý”</a> sau khi một cuộc điều tra tai nạn cho thấy spaghetti code với 10000 biến global.</p><p><a href="https://www.technologyreview.com/s/607875/should-the-government-keep-stockpiling-software-bugs/" target="_blank" rel="noopener">Hackers và governments stockpile bugs</a> để theo dõi mọi người, ăn cắp thẻ tín dụng, khai thác tài nguyên máy tính để khởi chạy các cuộc tấn công từ chối dịch vụ phân tán (DDoS), crack mật khẩu và thậm chí <a href="https://www.technologyreview.com/s/604138/the-fbi-shut-down-a-huge-botnet-but-there-are-plenty-more-left/" target="_blank" rel="noopener">điều khiển cuộc bầu cử</a>.</p><p>Chúng ta phải làm tốt hơn.</p><h3 id="You-Compose-Software-Every-Day"><a href="#You-Compose-Software-Every-Day" class="headerlink" title="You Compose Software Every Day"></a>You Compose Software Every Day</h3><p>Nếu bạn là nhà phát triển phần mềm, bạn lập trình các chức năng và cấu trúc dữ liệu mỗi ngày, cho dù bạn có biết hay không. Bạn có thể làm điều đó một cách có ý thức (và tốt hơn), hoặc bạn có thể làm điều đó một cách vô tình, with duct-tape and crazy glue.</p><p>Quá trình phát triển phần mềm là chia nhỏ các vấn đề lớn thành các vấn đề nhỏ hơn, xây dựng các thành phần giải quyết những vấn đề nhỏ hơn, sau đó kết hợp các thành phần lại với nhau để tạo thành một ứng dụng hoàn chỉnh.</p><h3 id="Composing-Functions"><a href="#Composing-Functions" class="headerlink" title="Composing Functions"></a>Composing Functions</h3><p>Function composition là quá trình áp dụng một function là output của function khác. Trong đại số, có hai hàm số, <code>f</code> và <code>g</code>, <code>(f ∘ g)(x) = f(g(x))</code>. Vòng tròn là toán tử kết hợp. Nó thường được phát âm “kết hợp với” hoặc là “theo sau”. Bạn có thể nói như “f <em>kết hợp với</em> g bằng f of g of x”, or “f <em>theo sau</em> g bằng f of g of x”. Chúng ta nói f <em>theo sau</em> g bởi vì g is giá trị đầu, sau đó output của nó được chuyển thành đối số f.</p><p>Mỗi lần bạn viết code như thế này, nó là composing functions:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> doStuff = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> afterG = g(x);</span><br><span class="line">  <span class="keyword">const</span> afterF = f(afterG);</span><br><span class="line">  <span class="keyword">return</span> afterF;</span><br><span class="line">&#125;;</span><br><span class="line">doStuff(<span class="number">20</span>); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>Mỗi khi bạn viết một chuỗi promise, nó là composing functions:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> wait = <span class="function"><span class="params">time</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">  (resolve, reject) =&gt; setTimeout(</span><br><span class="line">    resolve,</span><br><span class="line">    time</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line">wait(<span class="number">300</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">20</span>)</span><br><span class="line">  .then(g)</span><br><span class="line">  .then(f)</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)) <span class="comment">// 42</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>Tương tự như vậy, mỗi khi bạn thực hiện các gọi các chuỗi phương thức mảng, các hàm lodash, observables (RxJS, etc…) nó là composing functions. Nếu là một chuỗi, thì nó là composing. Nếu bạn chuyển một giá trị trả về vào những functions khác, nó cũng là composing. Nếu bạn gọi hai hàm theo trình tự, nó là composing nếu sử dụng dữ liệu hàm này làm dữ liệu đầu vào cho hàm kia.</p><blockquote><p>Nếu là một chuỗi, thì nó là composing.</p></blockquote><p>Khi bạn viết một functions có chủ ý, bạn sẽ làm tốt hơn.</p><p>Composing functions có chủ ý, chúng ta có thể cải thiện hàm doStuff() thành 1 dòng đơn giản:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> doStuffBetter = <span class="function"><span class="params">x</span> =&gt;</span> f(g(x));</span><br><span class="line">doStuffBetter(<span class="number">20</span>); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>Một trong những phản đối chung về kiểu này là khó để debug. Ví dụ, chúng ta sẽ viết function composition bằng cách nào?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doStuff = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> afterG = g(x);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`after g: <span class="subst">$&#123; afterG &#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> afterF = f(afterG);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`after f: <span class="subst">$&#123; afterF &#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> afterF;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">doStuff(<span class="number">20</span>); <span class="comment">// =&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">"after g: 21"</span></span><br><span class="line"><span class="comment">"after f: 42"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Đầu tiên, hãy trừu tượng rằng “after f”, “after g” và viết vào một tiện ích nhỏ gọi là trace():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> trace = <span class="function"><span class="params">label</span> =&gt;</span> value =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; label &#125;</span>: <span class="subst">$&#123; value &#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Now we can use it like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doStuff = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> afterG = g(x);</span><br><span class="line">  trace(<span class="string">'after g'</span>)(afterG);</span><br><span class="line">  <span class="keyword">const</span> afterF = f(afterG);</span><br><span class="line">  trace(<span class="string">'after f'</span>)(afterF);</span><br><span class="line">  <span class="keyword">return</span> afterF;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">doStuff(<span class="number">20</span>); <span class="comment">// =&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">"after g: 21"</span></span><br><span class="line"><span class="comment">"after f: 42"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Thư viện functional programming phổ biến như Lodash và Ramda bao gồm các tiện ích để thực hiện function composition dễ hơn. Bạn có thể viết lại hàm trên như thế này:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pipe <span class="keyword">from</span> <span class="string">'lodash/fp/flow'</span>;</span><br><span class="line"><span class="keyword">const</span> doStuffBetter = pipe(</span><br><span class="line">  g,</span><br><span class="line">  trace(<span class="string">'after g'</span>),</span><br><span class="line">  f,</span><br><span class="line">  trace(<span class="string">'after f'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">doStuffBetter(<span class="number">20</span>); <span class="comment">// =&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">"after g: 21"</span></span><br><span class="line"><span class="comment">"after f: 42"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>If you want to try this code without importing something, you can define pipe like this:<br>Nếu bạn muốn thử code này mà không cần nhập gì, bạn có thể xác định pipe như thế này:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pipe(...fns: [...Function]) =&gt; x =&gt; y</span></span><br><span class="line"><span class="keyword">const</span> pipe = <span class="function">(<span class="params">...fns</span>) =&gt;</span> x =&gt; fns.reduce(<span class="function">(<span class="params">y, f</span>) =&gt;</span> f(y), x);</span><br></pre></td></tr></table></figure><p>Đừng lo lắng nếu bạn chưa thể theo dõi cách hoạt động. Sau đó, chúng tôi sẽ khám phá function composition chi tiết hơn. In fact, it’s so essential, you’ll see it defined and demonstrated many times throughout this text. The point is to help you become so familiar with it that its definition and usage becomes automatic. Be one with the composition.</p><p>pipe() creates a pipeline of functions, passing the output of one function to the input of another. When you use pipe() (and its twin, compose()) You don’t need intermediary variables. Writing functions without mention of the arguments is called <strong>point-free style.</strong> To do it, you’ll call a function that returns the new function, rather than declaring the function explicitly. That means you won’t need the function keyword or the arrow syntax (=&gt;).</p><p>Point-free style can be taken too far, but a little bit here and there is great because those intermediary variables add unnecessary complexity to your functions.</p><p>There are several benefits to reduced complexity:</p><h4 id="Working-Memory"><a href="#Working-Memory" class="headerlink" title="Working Memory"></a>Working Memory</h4><p>Bộ não con người trung bình chỉ có một vài tài nguyên được chia sẻ cho lượng tử rời rạc trong bộ nhớ làm việc <a href="http://www.nature.com/neuro/journal/v17/n3/fig_tab/nn.3655_F2.html" target="_blank" rel="noopener">working memory</a>, và mỗi biến có khả năng tiêu thụ một trong những lượng tử đó. As you add more variables, our ability to accurately recall the meaning of each variable is diminished. Working memory models typically involve 4–7 discrete quanta. Above those numbers, error rates dramatically increase.</p><p>Using the pipe form, we eliminated 3 variables — freeing up almost half of our available working memory for other things. That reduces our cognitive load significantly. Software developers tend to be better at chunking data into working memory than the average person, but not so much more as to weaken the importance of conservation.</p><h4 id="Signal-to-Noise-Ratio"><a href="#Signal-to-Noise-Ratio" class="headerlink" title="Signal to Noise Ratio"></a>Signal to Noise Ratio</h4><p>Concise code also improves the signal-to-noise ratio of your code. It’s like listening to a radio — when the radio is not tuned properly to the station, you get a lot of interfering noise, and it’s harder to hear the music. When you tune it to the correct station, the noise goes away, and you get a stronger musical signal.</p><p>Code is the same way. More concise code expression leads to enhanced comprehension. Some code gives us useful information, and some code just takes up space. If you can reduce the amount of code you use without reducing the meaning that gets transmitted, you’ll make the code easier to parse and understand for other people who need to read it.</p><h4 id="Surface-Area-for-Bugs"><a href="#Surface-Area-for-Bugs" class="headerlink" title="Surface Area for Bugs"></a>Surface Area for Bugs</h4><p>Take a look at the before and after functions. It looks like the function went on a diet and lost a ton of weight. That’s important because extra code means extra surface area for bugs to hide in, which means more bugs will hide in it.</p><blockquote><p><em>Less code = less surface area for bugs = fewer bugs.</em></p></blockquote><h3 id="Composing-Objects"><a href="#Composing-Objects" class="headerlink" title="Composing Objects"></a>Composing Objects</h3><blockquote><p>“Favor object composition over class inheritance” the Gang of Four, <a href="https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=as_li_ss_tl?ie=UTF8&amp;qid=1494993475&amp;sr=8-1&amp;keywords=design+patterns&amp;linkCode=ll1&amp;tag=eejs-20&amp;linkId=6c553f16325f3939e5abadd4ee04e8b4" target="_blank" rel="noopener">“Design Patterns: Elements of Reusable Object Oriented Software”</a></p></blockquote><blockquote><p>“In computer science, a composite data type or compound data type is any data type which can be constructed in a program using the programming language’s primitive data types and other composite types. […] The act of constructing a composite type is known as composition.” ~ Wikipedia</p></blockquote><p>These are primitives:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="string">'Claude'</span>;</span><br><span class="line"><span class="keyword">const</span> lastName = <span class="string">'Debussy'</span>;</span><br></pre></td></tr></table></figure><p>And this is a composite:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullName = &#123;</span><br><span class="line">  firstName,</span><br><span class="line">  lastName</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Likewise, all Arrays, Sets, Maps, WeakMaps, TypedArrays, etc… are composite datatypes. Any time you build any non-primitive data structure, you’re performing some kind of object composition.</p><p>Note that the Gang of Four defines a pattern called the <strong>composite pattern</strong> which is a specific type of recursive object composition which allows you to treat individual components and aggregated composites identically. Some developers get confused, thinking that the composite pattern is <em>the only form of object composition.</em> Don’t get confused. There are many different kinds of object composition.</p><p>The Gang of Four continues, “you’ll see object composition applied again and again in design patterns”, and then they catalog three kinds of object compositional relationships, including <strong>delegation</strong> (as used in the state, strategy, and visitor patterns), <strong>acquaintance</strong> (when an object knows about another object by reference, usually passed as a parameter: a uses-a relationship, e.g., a network request handler might be passed a reference to a logger to log the request — the request handler <em>uses</em> a logger), and <strong>aggregation</strong> (when child objects form part of a parent object: a has-a relationship, e.g., DOM children are component elements in a DOM node — A DOM node <em>has</em> children).</p><p>Class inheritance can be used to construct composite objects, but it’s a restrictive and brittle way to do it. When the Gang of Four says “favor object composition over class inheritance”, they’re advising you to use flexible approaches to composite object building, rather than the rigid, tightly-coupled approach of class inheritance.</p><p>We’ll use a more general definition of object composition from <a href="https://www.amazon.com/Categorical-Methods-Computer-Science-Topology/dp/0387517227/ref=as_li_ss_tl?ie=UTF8&amp;qid=1495077930&amp;sr=8-3&amp;keywords=Categorical+Methods+in+Computer+Science:+With+Aspects+from+Topology&amp;linkCode=ll1&amp;tag=eejs-20&amp;linkId=095afed5272832b74357f63b41410cb7" target="_blank" rel="noopener">“Categorical Methods in Computer Science: With Aspects from Topology”</a> (1989):</p><blockquote><p>“Composite objects are formed by putting objects together such that each of the latter is ‘part of’ the former.”</p></blockquote><p>Another good reference is “Reliable Software Through Composite Design”, Glenford J Myers, 1975. Both books are long out of print, but you can still find sellers on Amazon or eBay if you’d like to explore the subject of object composition in more technical depth.</p><p><em>Class inheritance is just one kind of composite object construction.</em> All classes produce composite objects, but not all composite objects are produced by classes or class inheritance. “Favor object composition over class inheritance” means that you should form composite objects from small component parts, rather than inheriting all properties from an ancestor in a class hierarchy. The latter causes a large variety of well-known problems in object oriented design:</p><ul><li><strong>The tight coupling problem:</strong> Because child classes are dependent on the implementation of the parent class, class inheritance is the tightest coupling available in object oriented design.</li><li><strong>The fragile base class problem:</strong> Due to tight coupling, changes to the base class can potentially break a large number of descendant classes — potentially in code managed by third parties. The author could break code they’re not aware of.</li><li><strong>The inflexible hierarchy problem:</strong> With single ancestor taxonomies, given enough time and evolution, all class taxonomies are eventually wrong for new use-cases.</li><li><strong>The duplication by necessity problem:</strong> Due to inflexible hierarchies, new use cases are often implemented by duplication, rather than extension, leading to similar classes which are unexpectedly divergent. Once duplication sets in, it’s not obvious which class new classes should descend from, or why.</li><li><strong>The gorilla/banana problem:</strong> “…the problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.” ~ Joe Armstrong, <a href="http://www.amazon.com/gp/product/1430219483?ie=UTF8&amp;camp=213733&amp;creative=393185&amp;creativeASIN=1430219483&amp;linkCode=shr&amp;tag=eejs-20&amp;linkId=3MNWRRZU3C4Q4BDN" target="_blank" rel="noopener">“Coders at Work”</a></li></ul><p>The most common form of object composition in JavaScript is known as <strong>object concatenation</strong> (aka mixin composition). It works like ice-cream. You start with an object (like vanilla ice-cream), and then mix in the features you want. Add some nuts, caramel, chocolate swirl, and you wind up with nutty caramel chocolate swirl ice cream.</p><p>Building composites with class inheritance:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="string">'a'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (options) &#123;</span><br><span class="line">    <span class="keyword">super</span>(options);</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="string">'b'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myBar = <span class="keyword">new</span> Bar(); <span class="comment">// &#123;a: 'a', b: 'b'&#125;</span></span><br></pre></td></tr></table></figure><p>Building composites with mixin composition:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  a: <span class="string">'a'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  b: <span class="string">'b'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> c = &#123;...a, ...b&#125;; <span class="comment">// &#123;a: 'a', b: 'b'&#125;</span></span><br></pre></td></tr></table></figure><p>We’ll explore other styles of object composition in more depth later. For now, your understanding should be:</p><ol><li>There’s more than one way to do it.</li><li>Some ways are better than others.</li><li>You want to select the simplest, most flexible solution for the task at hand.</li></ol><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>This isn’t about functional programming (FP) vs object-oriented programming (OOP), or one language vs another. Components can take the form of functions, data structures, classes, etc… Different programming languages tend to afford different atomic elements for components. Java affords classes, Haskell affords functions, etc… But no matter what language and what paradigm you favor, you can’t get away from composing functions and data structures. In the end, that’s what it all boils down to.</p><p>We’ll talk a lot about functional programming, because functions are the simplest things to compose in JavaScript, and the functional programming community has invested a lot of time and effort formalizing function composition techniques.</p><p>What we won’t do is say that functional programming is better than object-oriented programming, or that you must choose one over the other. OOP vs FP is a false dichotomy. Every real Javascript application I’ve seen in recent years mixes FP and OOP extensively.</p><p>We’ll use object composition to produce datatypes for functional programming, and functional programming to produce objects for OOP.</p><p><em>No matter how you write software, you should compose it well.</em></p><blockquote><p>The essence of software development is composition.</p></blockquote><p>A software developer who doesn’t understand composition is like a home builder who doesn’t know about bolts or nails. Building software without awareness of composition is like a home builder putting walls together with duct tape and crazy glue.</p><p>It’s time to simplify, and the best way to simplify is to get to the essence. The trouble is, almost nobody in the industry has a good handle on the essentials. We as an industry have failed you, the software developer. It’s our responsibility as an industry to train developers better. We must improve. We need to take responsibility. Everything runs on software today, from the economy to medical equipment. There is literally no corner of human life on this planet that is not impacted by the quality of our software. We need to know what we’re doing.</p><p>It’s time to learn how to compose software.</p><p><a href="https://medium.com/javascript-scene/the-rise-and-fall-and-rise-of-functional-programming-composable-software-c2d91b424c8c" target="_blank" rel="noopener">Continued in “The Rise and Fall and Rise of Functional Programming”</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Ghi chú: Đây là phần giới thiệu về loạt bài “Composing Software” về việc học các kỹ năng functional programming và compositional software trong JavaScript ES6+ từ đầu. Hãy theo dõi còn rất nhiều thứ khác nữa!&lt;br&gt;&lt;a href=&quot;https://medium.com/javascript-scene/the-rise-and-fall-and-rise-of-functional-programming-composable-software-c2d91b424c8c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;em&gt;Bài viết Kế tiếp &amp;gt;&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nthung2112.github.io/tags/javascript/"/>
    
      <category term="hof" scheme="http://nthung2112.github.io/tags/hof/"/>
    
  </entry>
  
  <entry>
    <title>Sử dụng ký pháp BEM trong CSS</title>
    <link href="http://nthung2112.github.io/2018/05/Su-dung-ky-phap-BEM-trong-CSS.html"/>
    <id>http://nthung2112.github.io/2018/05/Su-dung-ky-phap-BEM-trong-CSS.html</id>
    <published>2018-05-20T09:05:00.000Z</published>
    <updated>2018-05-20T09:16:00.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ky-phap-BEM-la-gi"><a href="#Ky-phap-BEM-la-gi" class="headerlink" title="Ký pháp BEM là gì"></a>Ký pháp BEM là gì</h2><p>BEM viết tắt của Blocks, Elements, Modifiers, là một phương pháp đặt tên class cho HTML và CSS. Được phát triển <a href="https://en.bem.info" target="_blank" rel="noopener">tại Yandex</a> giúp lập trình viên hiểu rõ hơn mối quan hệ giữa HTML và CSS trong dự án front end.<br><a id="more"></a><br>Ví dụ sau đây sẽ minh hoạ cách sử dụng ký pháp BEM:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Một Block (khối) độc lập */</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Element (phần tử) con, phụ thuộc vào Block ở trên */</span></span><br><span class="line"><span class="selector-class">.btn__price</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Modifier (bộ điều chỉnh) thay đổi trạng thái của Block */</span></span><br><span class="line"><span class="selector-class">.btn--orange</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.btn--big</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Với cách đặt tên class này, ta có <strong>Block</strong> sẽ đại diện cho một component, và trong ví dụ ở đây, là một button <code>.btn</code>. Block cũng sẽ đóng vai trò là một <em>parent</em> mà trong nó sẽ có một hoặc nhiều hơn <strong>Element</strong> con liên quan. Tên class cho Element và mối quan hệ của nó với Block sẽ được diễn tả bằng tên của Block, tiếp theo là <em>hai gạch dưới</em>, và cuối cùng là tên của Element <code>.btn__price</code>. Thành phần thứ ba của BEM là các <strong>Modifier</strong> mà chúng sẽ giúp điều chỉnh các trạng thái hoặc phái sinh khác của Block / Element. Tên của Modifier sẽ được nối với tên Block / Element phía trước bởi <em>02 gạch ngang</em> <code>.btn--orange</code>.</p><p>Trong HTML, ký pháp BEM sẽ được dùng như sau:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn--big btn--orange"</span> <span class="attr">href</span>=<span class="string">"http://int3ractive.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn__price"</span>&gt;</span>$9.99<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn__text"</span>&gt;</span>Subscribe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe src="https://codepen.io/css-tricks/embed/226a65c8f7d64615aabd45048d1d3b6d" width="100%" height="300" frameborder="0" allowfullscreen></iframe><p>Ấn tượng đầu tiên với bạn có thể là tên class quá xấu và mất thời gian hơn so với việc tạo riêng một class mới cho một kiểu button mới. Tuy nhiên, ký pháp BEM sẽ mang lại nhiều lợi ích mà tôi sẽ phân tích tiếp theo sau đây:</p><h2 id="Tai-sao-su-dung-ky-phap-BEM"><a href="#Tai-sao-su-dung-ky-phap-BEM" class="headerlink" title="Tại sao sử dụng ký pháp BEM"></a>Tại sao sử dụng ký pháp BEM</h2><p>Trước tiên, ký pháp BEM giúp người mới tham gia dự án dễ dàng phát hiện ra các trạng thái và các đối tượng con của một component đã được viết sẵn. Điều này giúp tránh cho họ phải viết lại những kiểu CSS đã có sẵn và hạn chế việc viết thừa code hoặc trùng kiểu CSS, điều mà rất hay xảy ra trong dự án lớn có nhiều người tham gia.</p><p>Thứ hai, chỉ cần đọc HTML, bạn vẫn có thể nhanh chóng nắm được các thành phần phụ thuộc lẫn nhau. Trong ví dụ trên, bạn dễ dàng nhìn thấy <code>.btn__price</code> phụ thuộc vào <code>.btn</code> mặc dù bạn chưa biết vai trò cụ thể của nó ngay lập tức.</p><p>Thứ ba, với ký pháp BEM, mọi định nghĩa chỉ có một cấp class và không lồng cấp. Điều này giúp cho độ ưu tiên (specificity) chung của hệ thống CSS thấp. Đây là một lợi thế vì sau này bạn không phải “chiến đấu” với specificity của những thuộc tính đã có sẵn (VD: siêu lồng cấp <code>.a .b .c .d .e {...}</code>) cũng như vận dụng những kỹ thuật không hay để thay thế được style (chẳng hạn <code>!important</code> hay inline CSS).</p><p>Quy luật thác nước cascading của CSS là con dao hai lưỡi: nó giúp dễ dàng định nghĩa những thuộc tính và kiểu chung trên những selector tổng quát mà không cần phải khai báo lặp lại trên từng phần tử, nhưng nếu không nắm được tầm ảnh hưởng, lập trình viên CSS rất dễ gây ra những tác động phụ đến các đối tượng không liên quan khi chỉnh sửa trên những class có sẵn hoặc thậm chí viết mới. Với ký pháp BEM, lập trình viên sẽ tự tin hơn khi bắt tay chỉnh sửa hoặc viết thêm style vì đã biết rõ tầm ảnh hưởng của selector mà mình đang viết ra.</p><p>Tóm lại, ký pháp BEM, nếu áp dụng triệt để, sẽ giúp cải thiện sự phối hợp giữa các thành viên trong nhóm. Ngoài ra, nó buộc người viết CSS phải đầu tư suy nghĩ về việc xây dựng những component độc lập và tái sử dụng được (phù hợp với tiêu chí của <a href="https://github.com/stubbornella/oocss/wiki" target="_blank" rel="noopener">OOCSS</a>).</p><h2 id="Su-dung-BEM-voi-SASS"><a href="#Su-dung-BEM-voi-SASS" class="headerlink" title="Sử dụng BEM với SASS"></a>Sử dụng BEM với SASS</h2><p>Với phiên bản SASS mới nhất hiện nay, việc viết theo ký pháp BEM trong SCSS dễ dàng và thuận tiện hơn bao giờ hết.</p><p>Bạn vẫn sẽ sử dụng cách viết lồng để cô lập khối component và kết hợp với biểu tượng <em>parent</em> <code>&amp;</code> của SASS để đặt tên cho Element và Modifier mà không phải đánh lại tên của Block. VD:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line"></span><br><span class="line">    &amp;__element &#123;&#125;</span><br><span class="line"></span><br><span class="line">    &amp;--mod &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mặc dù viết lồng cấp, khi được biên dịch thành CSS, chúng vẫn được trải phẳng thành một cấp class theo đúng tinh thần của BEM:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block__element</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block--mod</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Nếu bạn sử dụng LibSass (nhanh hơn rất nhiều lần bản gốc Ruby) để biên dịch SASS, thì hãy đảm bảo các công cụ wrapper được cập nhật các phiên bản tương đương hoặc mới hơn như sau: node-sass <a href="https://github.com/sass/node-sass/releases/tag/v3.4.0" target="_blank" rel="noopener">3.4.0</a>, gulp-sass <a href="https://github.com/dlmanning/gulp-sass/releases/tag/v2.1.0" target="_blank" rel="noopener">2.1.0</a> (nếu sử dụng <a href="https://github.com/gulpjs/gulp" target="_blank" rel="noopener">GulpJS</a>) và grunt-sass <a href="https://github.com/sindresorhus/grunt-sass/releases/tag/v1.1.0" target="_blank" rel="noopener">1.1.0</a> (nếu sử dụng <a href="https://github.com/gruntjs/grunt" target="_blank" rel="noopener">GruntJS</a>)</p><p>Thế còn LESS? Vì tôi không sử dụng LESS nên sẽ không đề cập ở đây. Bạn có thể giúp bổ sung hướng dẫn cho LESS nếu nó có cú pháp trợ giúp tương đương.</p><h2 id="Cac-y-kien-khong-dong-tinh"><a href="#Cac-y-kien-khong-dong-tinh" class="headerlink" title="Các ý kiến không đồng tình"></a>Các ý kiến không đồng tình</h2><p>Vẫn có một số ý kiến hoài nghi và không đồng tình với phương pháp đặt tên này.</p><h3 id="Ten-class-qua-xau"><a href="#Ten-class-qua-xau" class="headerlink" title="Tên class quá xấu"></a>Tên class quá xấu</h3><p>Đồng ý với bạn rằng BEM trông kỳ quặc, tuy nhiên khả năng mà nó đem lại vô cùng lớn và sẽ hoàn toàn xoá mờ hạn chế về mặt “ngoại hình” của nó.</p><p>Ngoài ra BEM đòi hỏi phải gõ nhiều chữ hơn và chiếm nhiều byte ký tự hơn, tuy nhiên với việc sử dụng SASS như trên và việc gzip file đã trở thành tiêu chuẩn như hiện nay, những điều đó không còn là vấn đề so với lợi ích mà BEM mang lại.</p><h3 id="Descendant-selector-van-giai-quyet-duoc-van-de-nhu-truoc-gio"><a href="#Descendant-selector-van-giai-quyet-duoc-van-de-nhu-truoc-gio" class="headerlink" title="Descendant selector vẫn giải quyết được vấn đề như trước giờ"></a>Descendant selector vẫn giải quyết được vấn đề như trước giờ</h3><p>Có một <a href="https://twitter.com/samuelfine/status/575645771334291456" target="_blank" rel="noopener">chỉ trích</a> dành cho BEM thế này: Thay vì viết</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-search</span>        &#123;&#125;</span><br><span class="line"><span class="selector-class">.site-search__field</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.site-search--full</span>  &#123;&#125;</span><br></pre></td></tr></table></figure><p>Họ đặt vấn đề rằng tại sao không viết như thế này:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-search</span>        &#123;&#125;</span><br><span class="line"><span class="selector-class">.site-search</span> <span class="selector-tag">input</span>  &#123;&#125;</span><br><span class="line"><span class="selector-class">.site-search</span><span class="selector-class">.full</span>   &#123;&#125;</span><br></pre></td></tr></table></figure><p>Rõ ràng cả hai cách viết đều có thể giúp hiện thực được component cụ thể này và cách thứ hai có vẻ “gọn gàng” hơn. Tuy nhiên khi CSS của toàn bộ dự án trở nên lớn và phức tạp hơn, thì rất khó tránh khỏi các kiểu được định nghĩa chồng chéo lên nhau ngoài tầm kiểm soát.</p><p>Thử tưởng tượng <code>.site-search</code> cũng nằm trong một container tên <code>.main</code> và những <code>input</code> bên trong <code>.main</code> cần được style với <code>.main input</code>. Như vậy, <code>input</code> bên trong <code>.site-search</code> sẽ bị điều chỉnh một cách không mong muốn.</p><p>Tương tự, nếu như <code>.full</code> trong ví dụ trên hoặc một tên phổ biến như <code>.label</code> được dùng như modifier, thì sẽ có rủi ro (rất cao) là một ngày nào đó một lập trình viên khác định nghĩa một class global trùng tên và sẽ làm hỏng style của element kia.</p><p>Ngoài ra, khi bạn đọc trong ngữ cảnh HTML, bạn sẽ khó thấy được quan hệ ràng buộc giữa <code>input</code> và <code>.full</code> với block <code>.site-search</code>.</p><h3 id="“Toi-don-gian-la-khong-thich-ky-phap-nay”"><a href="#“Toi-don-gian-la-khong-thich-ky-phap-nay”" class="headerlink" title="“Tôi đơn giản là không thích ký pháp này”"></a>“Tôi đơn giản là không thích ký pháp này”</h3><p>Một số người khi nhìn thấy cách đặt tên BEM đã ngay lập tức bác bỏ nó. Họ không thích BEM, đó là quyền của họ, tuy nhiên sẽ là vô lý nếu phản bác việc cần có một số quy tắc đặt tên để dễ dàng nắm bắt và quản lý CSS trong dự án trung và lớn.</p><p>Hơn nữa, bạn hoàn toàn có thể nghĩ ra cho mình một cách đặt tên khác cho hợp sở thích, nhưng vẫn dựa trên nguyên tắc của BEM đã đề ra. Là kết quả đúc kết từ những kiến trúc CSS lớn và phức tạp trước đây, đề xuất của BEM không phải vô tình lại có một số điểm chung với các phương pháp quản lý CSS khác như SMACSS hay OOCSS. Lấy ví dụ khái niệm module của SMACSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Ví dụ một module */</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Modifier của một module */</span></span><br><span class="line"><span class="selector-class">.btn-primary</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Btn Module với State */</span></span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-class">.is-collapsed</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>Trong các phương pháp quản lý CSS vừa kể trên thì chỉ có BEM là làm rõ được mối quan hệ với các thành phần con bên trong.</p><p>Tóm lại, mỗi phương pháp đều có ưu nhược điểm. Quan trọng là cả team phải có phương pháp tiếp cận khoa học và áp dụng triệt để thì kiến trúc CSS của cả dự án mới vững và dễ bảo trì.</p><h2 id="Cau-hoi-thuong-gap"><a href="#Cau-hoi-thuong-gap" class="headerlink" title="Câu hỏi thường gặp:"></a>Câu hỏi thường gặp:</h2><p>❓<strong>Hỏi:</strong> Element có modifier hay không?<br>💬️ <strong>Đáp:</strong> Có. Element có thể có modifier riêng của nó. Ví dụ:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.accordion__copy--open</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>❓<strong>Hỏi:</strong> Có cần phải đặt tên class cho tất cả element (thẻ HTML) trong block hay không?<br>💬️ <strong>Đáp:</strong> Không cần thiết, chỉ những element cần có style riêng được viết trong CSS. Tuy nhiên cũng không nên lạm dụng những thẻ wrapper (phổ biến nhất là DIV) một cách vô tội vạ và không có chức năng vai trò cụ thể nào. Như vậy việc đặt tên element con cũng khiến bạn phải suy nghĩ một tag nào đó có thật sự cần thiết thêm vào trong block hay không.</p><p>❓<strong>Hỏi:</strong> Bên trong element con <code>foo</code> có một tag đóng vai trò một element con <code>bar</code> khác của block, vậy việc đặt tên class cho element <code>bar</code> này như thế nào? Có nên đặt là <code>.block__foo__bar</code>?<br>💬️ <strong>Đáp:</strong> Vẫn đặt bằng tên block và hai gạch dưới rồi đến tên element <code>.block__bar</code>, không chen giữa bằng <code>foo__</code>. Nói tóm lại, tên của element chỉ cần thể hiện quan hệ phụ thuộc với block, không cần phải chỉ rõ sự lồng bên trong nhau của các element con. (Xem thêm ví dụ trong câu hỏi tiếp theo)</p><p>❓<strong>Hỏi:</strong> Một thẻ HTML có thể là element của 2 block khác nhau không?<br>💬️ <strong>Đáp:</strong> Hoàn toàn có thể. Hãy xem ví dụ sau:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn--big btn--orange"</span> <span class="attr">href</span>=<span class="string">"http://int3ractive.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn__price"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon--dollar-sign btn__icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>9.99<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn__text"</span>&gt;</span>Subscribe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Button có biểu tượng dollar-sign là một block <code>.icon</code>. Có thể trong block <code>.btn</code>, biểu tượng dollar-sign cần được style riêng, nên cần có một cái tên xác định rõ vai trò và style cho element này là <code>.btn__icon</code>. Nếu block <code>.icon.icon--dollar-sign</code> được dùng ở một ngữ cảnh khác, thì rõ ràng nó không cần class <code>.btn__icon</code> nữa vì tên class đã chỉ rõ sự ràng buộc với block <code>.btn</code> và chỉ được thêm vào khi ở bên trong nó.</p><p>❓<strong>Hỏi:</strong> Một element con có thể đóng vai trò là block của riêng nó không? Có thể xây dựng chuỗi component phụ thuộc nhau như <code>.a__b__c</code> không?<br>💬️ <strong>Đáp:</strong> Câu hỏi này thật sự ngoài tầm hiểu biết và kinh nghiệm của tôi. Có thể có những hoàn cảnh đặt biệt như vậy. Tuy nhiên, theo tôi, nếu có cũng không nên quá 2 cấp, tức là element con chỉ đặt đến <code>.a__b__c</code> là tối đa. Điều này là để sự phụ thuộc không quá sâu, làm giảm khả năng dùng lại của block (portability) và sự linh hoạt của các đối tượng CSS theo tinh thần OOCSS. Xem ví dụ bên dưới.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* block list */</span></span><br><span class="line"><span class="selector-class">.list</span> &#123; &#125;</span><br><span class="line"><span class="comment">/* item là con của list */</span></span><br><span class="line"><span class="selector-class">.list__item</span> &#123; &#125;</span><br><span class="line"><span class="comment">/* link là con của block list__item, để phân biệt với list__link</span></span><br><span class="line"><span class="comment">hoặc chỉ rõ mối quan hệ phụ thuộc giữa item và link*/</span></span><br><span class="line"><span class="selector-class">.list__item__link</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="Sai-lam-hay-mac-phai-khi-su-dung-BEM"><a href="#Sai-lam-hay-mac-phai-khi-su-dung-BEM" class="headerlink" title="Sai lầm hay mắc phải khi sử dụng BEM:"></a>Sai lầm hay mắc phải khi sử dụng BEM:</h2><p>Tôi xin hẹn lại về vấn đề này trong một bài viết khác, khi mà bản thân đã ứng dụng nhiều và quan sát được những ví dụ thực tiễn hơn để tổng hợp những sai lầm hay mắc phải do ảnh hưởng từ phương pháp cũ cũng như cách hiểu chưa đúng về phương pháp BEM này.</p><p>Xem thêm:</p><ul><li>Bài viết <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" rel="noopener">giới thiệu BEM của CSSWizadry</a></li><li>Bài viết <a href="http://www.smashingmagazine.com/2012/04/a-new-front-end-methodology-bem/" target="_blank" rel="noopener">giới thiệu BEM của Smashing Magazine</a></li><li><a href="http://webuniverse.io/css-organization-naming-conventions-and-safe-extend-without-preprocessors/" target="_blank" rel="noopener">Sử dụng BEM và @extend của SASS</a></li><li>Bài viết <a href="https://medium.com/fed-or-dead/battling-bem-5-common-problems-and-how-to-avoid-them-5bbd23dee319" target="_blank" rel="noopener">5 sai lầm phổ biến với BEM</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ky-phap-BEM-la-gi&quot;&gt;&lt;a href=&quot;#Ky-phap-BEM-la-gi&quot; class=&quot;headerlink&quot; title=&quot;Ký pháp BEM là gì&quot;&gt;&lt;/a&gt;Ký pháp BEM là gì&lt;/h2&gt;&lt;p&gt;BEM viết tắt của Blocks, Elements, Modifiers, là một phương pháp đặt tên class cho HTML và CSS. Được phát triển &lt;a href=&quot;https://en.bem.info&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tại Yandex&lt;/a&gt; giúp lập trình viên hiểu rõ hơn mối quan hệ giữa HTML và CSS trong dự án front end.&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://nthung2112.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Giới thiệu Progressive Web App</title>
    <link href="http://nthung2112.github.io/2018/05/Gioi-thieu-Progressive-Web-App.html"/>
    <id>http://nthung2112.github.io/2018/05/Gioi-thieu-Progressive-Web-App.html</id>
    <published>2018-05-18T00:30:00.000Z</published>
    <updated>2018-05-18T00:43:05.756Z</updated>
    
    <content type="html"><![CDATA[<p><strong>P</strong>rogressive Web App (PWA) là một dạng ứng dụng web (web app) mới đang thu hút rất nhiều sự quan tâm từ các nhà phát triển web khắp thế giới đặc biệt là các doanh nghiệp hoạt động trực tuyến, tuy nhiên nó vẫn còn khá mới mẻ tại Việt Nam.<br><a id="more"></a><br>Đã có nhiều bài viết liên quan đến PWA dành cho <a href="https://addyosmani.com/blog/getting-started-with-progressive-web-apps/" target="_blank" rel="noopener">lập</a> <a href="https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/" target="_blank" rel="noopener">trình</a> <a href="https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/" target="_blank" rel="noopener">viên</a>, cho nên trong bài viết này tôi sẽ cố gắng giải thích PWA để người dùng Web phổ thông vẫn có thể hiểu.</p><h2 id="Progressive-Web-App-la-gi"><a href="#Progressive-Web-App-la-gi" class="headerlink" title="Progressive Web App là gì?"></a>Progressive Web App là gì?</h2><p><strong>PWA là ứng dụng web được viết để tận dụng những tính năng mới nhất của trình duyệt Web trên máy tính để bàn (desktop) lẫn điện thoại thông minh, nhưng đồng thời vẫn chạy được trên những trình duyệt và thiết bị cũ hơn. PWA lấy phương pháp <a href="https://www.youtube.com/watch?v=5oUSzo1oRv0" target="_blank" rel="noopener">Cải Tiến Tăng Dần (Progressive Enhancement)</a> làm cốt lõi (nên mới có chữ Progressive).</strong></p><p>Đối với những trình duyệt và thiết bị cũ, PWA hoạt động như một mobile website thông thường. Nhưng với những trình duyệt trên thiết bị di động mới nhất, PWA hoạt động như một <em>mobile app</em>[^1] thực thụ.</p><p>Những tác giả của khái niệm PWA (đến từ nhóm phát triển trình duyệt Chrome) đã đưa ra những đặc tính cần có của một PWA như sau:</p><ul><li><strong>Progressive</strong> - Chạy được trên <em>mọi</em> (nên hiểu: tuyệt đại đa số) thiết bị, do được phát triển với phương pháp Cải Tiến Tăng Dần.</li><li><strong>Responsive</strong> - Có thiết kế <em>giao diện tùy ứng</em> (responsive design), hiển thị và sử dụng được trên mobile, tablet, laptop hay bất kỳ cỡ màn hình nào trong tương lai.</li><li><strong>Connectivity independent</strong> - PWA vẫn có thể hoạt động tốt với điều kiện kết nối mạng chập chờn hoặc mất hẳn (offline).</li><li><strong>App-like</strong> - Có giao diện và trải nghiệm như mobile app thực thụ.</li><li><strong>Fresh</strong> - Dù nó hoạt động như mobile app, nhưng tính năng và giao diện luôn được cập nhật tức thời nhờ nền tảng Web (không cần người dùng update từ Apple App Store hay Google Play - gọi chung là app store).</li><li><strong>Safe</strong> - PWA phải được tải thông qua giao thức TLS (hay nôm na là HTTPS), để đảm bảo việc trao đổi dữ liệu không bị bên thứ ba can thiệp.</li><li><strong>Discoverable</strong> - Thông qua file khai báo chuẩn (được thống nhất bởi tổ chức W3C), mà các PWA dễ dàng được các cỗ máy tìm kiếm đánh dấu và thông báo cho người dùng.</li><li><strong>Re-engageable</strong> - PWA cho phép việc tái tiếp cận người dùng dễ dàng hơn nhờ những tính năng đặc biệt như là push notification (thông báo chủ động).</li><li><strong>Installable</strong> - PWA cho phép người dùng dễ dàng lưu lại web app trên điện thoại (thường là trên màn hình home screen) mà không cần phải vào app store</li><li><strong>Linkable</strong> - Dễ dàng share app chỉ với đường link và không cần người nhận phải cài đặt phức tạp chỉ để xem được nội dung bạn muốn share.</li></ul><h2 id="Nhung-diem-khac-biet-cua-Progressive-Web-App"><a href="#Nhung-diem-khac-biet-cua-Progressive-Web-App" class="headerlink" title="Những điểm khác biệt của Progressive Web App?"></a>Những điểm khác biệt của Progressive Web App?</h2><p>Trước tiên cần hiểu rằng, sự tiến hóa của mobile web app cần sự hợp tác của rất nhiều bên liên quan trong đó có các nhà phát triển trình duyệt, hệ điều hành di động, và cả những chuyên gia về ngôn ngữ lập trình cho Web. Sự tiến hóa của mobile web thường đi cùng với sự phát triển và chuẩn hóa của nền tảng Web do tổ chức <strong>W3C</strong>[^2] chịu trách nhiệm.</p><p>Khi tôi tư vấn và phát triển app cho khách hàng, rất nhiều lần doanh nghiệp từ chối lựa chọn giải pháp web app hoặc hybrid app với lý do chính là <em>“HTML5 không nhanh bằng native”</em>. Tuy nhiên điều này không còn đúng tại thời điểm hiện tại.</p><p>Nhờ những cải tiến của phần cứng thiết bị, hệ điều hành di động, trình duyệt, và nhất là đặc tả Web trong vài năm gần đây mà web app đã thêm những khả năng không thua kém native app như:</p><ul><li>Giao diện tương tác mượt mà hơn, đặt biệt là hỗ trợ đồ họa 3D, animation từ phần cứng (hardware accelerated)</li><li>Khả năng chơi video, audio thông qua trình duyệt mobile đã hoàn thiện và định dạng gần như đã thống nhất.</li><li>Bàn phím ảo thích ứng với trường nhập web form khác nhau: email, URL, telephone…</li><li>Có khả năng truy xuất các sensor và bộ phận đa phương tiện của thiết bị: định vị GPS, con quay hồi chuyển, trạng thái pin, network, camera, microphone…</li><li>Cơ sở dữ liệu (CSDL) tại trình duyệt cho phép tìm kiếm và truy cập nhanh lượng dữ liệu lớn và cho phép người dùng trở lại trang web app nhanh hơn.</li><li>Đặc tả mới về CSS cho phép designer và front end developer tạo giao diện tùy ứng (responsive design) và giao diện giống app dễ dàng hơn.</li></ul><p>Dù vậy, web app vẫn còn một số hạn chế so với native app. Chúng ta hãy xem PWA đã được bổ sung những khả năng gì để có thể xóa dần khoảng cách giữa web và native:</p><h2 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h2><p>Được giới thiệu chính thức <a href="https://en.wikipedia.org/wiki/Progressive_Web_Apps" target="_blank" rel="noopener">từ 2015</a>, PWA đã trải qua thời gian thử nghiệm và trưởng thành đủ lâu để giờ đây chúng ta có thể khẳng định PWA chính là tương lai của Web và Web App.</p><p>PWA đóng góp thêm một giải pháp ứng dụng di động nhiều hứa hẹn, giải phóng doanh nghiệp khỏi sự lệ thuộc vào app store, những hạn chế của native app. Và nếu được thiết kế hợp lý, PWA sẽ là giải pháp hợp nhất cho “mọi nền tảng” từ desktop đến mobile.</p><hr><h4 id="Ghi-chu"><a href="#Ghi-chu" class="headerlink" title="Ghi chú:"></a>Ghi chú:</h4><p>[^1]: Xin tóm tắt lại một số thuật ngữ về <strong>“app”</strong> trên thiết bị di động:</p><ul><li>Mobile app hoặc native app: (ở Việt Nam thường gọi tắt là “app”) là ứng dụng được cài đặt từ app store, được viết bằng ngôn ngữ lập trình dành riêng cho từng hệ điều hành di động khác nhau.</li><li>(Mobile) web app: là website chạy trên trình duyệt của smart phone nhưng có trải nghiệm giống app và thường trao đổi nhiều dữ liệu giữa người dùng và website.</li><li>Hybrid app: là ứng dụng được cài đặt từ app store, tuy nhiên được viết bằng cùng ngôn ngữ lập trình với web app. Dù hybrid app có thể cài được trên nhiều HĐH khác nhau nhưng nó chỉ cần được viết cùng một bộ mã nguồn với một ít điều chỉnh riêng cho mỗi loại HĐH mà nó hỗ trợ.</li></ul><p>[^2]: Tổ chức World Wide Web Consortium có trách nhiệm chuẩn hóa các đặc tả về Web và khuyến khích các trình duyệt khác nhau phải tuân theo để các website hoạt động một cách đồng nhất bất kể trình duyệt dùng để hiển thị.</p><p>[^3]: URL là đường link đến một trang web bất kỳ</p><p>[^4]: Các trình duyệt phổ biến nhất bao gồm: Chrome, Firefox, Safari, MS Edge, Opera, Samsung Internet, UC Browser. Tại Việt Nam, trình duyệt phổ biến thứ 2 sau Chrome là CocCoc. Tuy nhiên CocCoc cũng là một trình duyệt biến thể từ mã nguồn mở của Chrome nên những tính năng của PWA cũng sẽ được hỗ trợ.</p><p>[^5]: Người dùng sẽ vẫn nhận được push notification cho dù họ không lưu app về home screen chỉ cần họ đã bấm đồng ý nhận push notification. Việc yêu cầu gửi push notification cần thận trọng và chỉ thực hiện khi người dùng đã thể hiện sự quan tâm đến dịch vụ của bạn. (Nếu không khả năng người dùng từ chối nhận push notification là rất cao)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;rogressive Web App (PWA) là một dạng ứng dụng web (web app) mới đang thu hút rất nhiều sự quan tâm từ các nhà phát triển web khắp thế giới đặc biệt là các doanh nghiệp hoạt động trực tuyến, tuy nhiên nó vẫn còn khá mới mẻ tại Việt Nam.&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nthung2112.github.io/tags/javascript/"/>
    
      <category term="pwa" scheme="http://nthung2112.github.io/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>Giới thiệu về redux saga</title>
    <link href="http://nthung2112.github.io/2018/04/Gioi-thieu-ve-redux-saga.html"/>
    <id>http://nthung2112.github.io/2018/04/Gioi-thieu-ve-redux-saga.html</id>
    <published>2018-04-30T11:37:00.000Z</published>
    <updated>2018-04-30T11:52:22.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Saga-la-gi"><a href="#Redux-Saga-la-gi" class="headerlink" title="Redux-Saga là gì?"></a>Redux-Saga là gì?</h1><p>Redux-Saga là một thư viện redux middleware, giúp quản lý những side effect trong ứng dụng redux trở nên đơn giản hơn. Bằng việc sử dụng tối đa tính năng <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*" target="_blank" rel="noopener">Generators</a> <code>(function*)</code> của ES6, nó cho phép ta viết async code nhìn giống như là synchronos.</p><a id="more"></a><p>Saga không chỉ tồn tại trong thế giới javascript, nó còn được coi là 1 pattern. Bạn có thể xem qua về saga pattern bằng clip này: <a href="https://youtu.be/xDuwrtwYHu8" target="_blank" rel="noopener">https://youtu.be/xDuwrtwYHu8</a></p><p>Một cách nhìn nhanh chóng thì Saga pattern là cách để quản lý những long transaction với những side effect hoặc các nguy cơ tiềm ẩn. Với mỗi transaction thành công, chúng ta đều cần có counter-transaction để revert transaction đó về trạng thái ban đầu nếu gặp trục trặc. Tham khảo thêm về saga pattern với bài viết của Roman Liutikov : <a href="https://medium.com/@roman01la/confusion-about-saga-pattern-bbaac56e622" target="_blank" rel="noopener">Confusion about Saga pattern</a></p><h1 id="Side-effect-la-gi"><a href="#Side-effect-la-gi" class="headerlink" title="Side effect là gì??"></a>Side effect là gì??</h1><p>Ta đã biết tất cả những xử lý ở REDUCER đều phải là synchronous và pure tức chỉ là xử lý đồng bộ. Nhưng trong ứng dụng thực tế thì cần nhiều hơn vậy ví dụ như asynchronous (thực hiện một số việc như gọi một hàm AJAX để fetch dữ liệu về nhưng cần đợi kết quả chứ kết quả không trả về ngay được) hoặc là impure (thực hiện lưu, đọc dữ liệu ra bên ngoài như lưu dữ liệu ra ổ cứng hay đọc cookie từ trình duyệt… đều cần đợi kết quả). Những việc như thế trong lập trình hàm gọi nó là side effects.</p><h1 id="Generator-function-la-gi"><a href="#Generator-function-la-gi" class="headerlink" title="Generator function là gì??"></a>Generator function là gì??</h1><p>Khác với function bình thường là thực thi và trả về kết quả, thì Generator function có thể thực thi, tạm dừng trả về kết quả và thực thi bằng tiếp. Từ khóa để làm được việc đấy là “YIELD”. Generator được đưa ra cách đây mấy chục năm nhưng đến ES2015 mới được bổ sung, các ngôn ngữ khác đã được bổ sung tính năng này như C#, PHP, Ruby, C++, R…</p><h1 id="Redux-Saga-hoat-dong-nhu-the-nao"><a href="#Redux-Saga-hoat-dong-nhu-the-nao" class="headerlink" title="Redux-Saga hoạt động như thế nào??"></a>Redux-Saga hoạt động như thế nào??</h1><p>Đối với logic của saga, ta cung cấp một hàm cho saga, chính hàm này là hàm đứng ra xem xét các action trước khi vào store, nếu là action quan tâm thì nó sẽ thực thi hàm sẽ được thực thi, nếu bạn biết khái niệm hook thì hàm cung cấp cho saga chính là hàm hook. Điều đặc biệt của hàm hook này nó là một generator function, trong generator function này có yield và mỗi khi yield ta sẽ trả về một plain object. Object trả về đó được gọi Effect object. effect object này đơn giản chỉ là một object bình thường nhưng chứa thông tin đặc biệt dùng để chỉ dẫn middleware của Redux thực thi các hoạt động khác ví dụ như gọi một hàm async khác hay put một action tới store. Để tạo ra effect object đề cập ở trên thì ta gọi hàm từ thư viện của saga là redux-saga/effects.</p><p><img src="https://i.stack.imgur.com/iCi6Y.png" alt=""></p><h1 id="Tai-sao-toi-phai-su-dung-Saga"><a href="#Tai-sao-toi-phai-su-dung-Saga" class="headerlink" title="Tại sao tôi phải sử dụng Saga??"></a>Tại sao tôi phải sử dụng Saga??</h1><p>Khi bắt đầu tìm tòi về redux, bạn hay tìm thấy các bài hướng dẫn sử dụng <a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="noopener">redux-thunk</a> hoặc <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener">redux-saga</a> để quản lý các async action. Vậy tại sao bạn lại được khuyên sử dụng redux-saga ?</p><p>Trích dẫn trong document của redux-saga:</p><blockquote><p>Contrary to redux thunk, you don’t end up in callback hell, you can test your asynchronous flows easily and your actions stay pure. _Tạm dịch: trái với redux thunk, bạn không cần phải phát dồ lên với các callback trong mỗi action, đến với saga đi, bạn có thể test các async action với một quy trình dễ dàng mà không làm hư các action đó !</p></blockquote><h4 id="So-sanh-saga-va-thunk"><a href="#So-sanh-saga-va-thunk" class="headerlink" title="So sánh saga và thunk:"></a>So sánh saga và thunk:</h4><ol><li><p>redux-thunk</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  API_BUTTON_CLICK,</span><br><span class="line">  API_BUTTON_CLICK_SUCCESS,</span><br><span class="line">  API_BUTTON_CLICK_ERROR,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./actions/consts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getDataFromAPI &#125; <span class="keyword">from</span> <span class="string">'./api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataStarted = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: API_BUTTON_CLICK &#125;);</span><br><span class="line"><span class="keyword">const</span> getDataSuccess = <span class="function"><span class="params">data</span> =&gt;</span> (&#123; <span class="attr">type</span>: API_BUTTON_CLICK_SUCCESS, <span class="attr">payload</span>: data &#125;)</span><br><span class="line"><span class="keyword">const</span> getDataError = <span class="function"><span class="params">message</span> =&gt;</span> (&#123; <span class="attr">type</span>: API_BUTTON_CLICK_ERROR. payload: message &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDataFromAPI = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(getDataStarted());</span><br><span class="line"></span><br><span class="line">    getDataFromAPI()</span><br><span class="line">      .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(getUserSuccess(data));</span><br><span class="line">      &#125;).fail(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(getDataError(err.message));</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Ở đây ta có một action creator getDataFromAPI() bắt đầu async progress như sau:</p><ul><li>Đầu tiên bắn ra action cho phép store biết rằng chuẩn bị 1 API request ( dispatch(getDataStarted())</li><li>Tiếp theo thực hiện API request trả về một Promise</li><li>Cuối cùng bắn ra success action nếu request thành công hoặc error action nếu có lỗi</li></ul></li><li><p>redux-saga</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  API_BUTTON_CLICK,</span><br><span class="line">  API_BUTTON_CLICK_SUCCESS,</span><br><span class="line">  API_BUTTON_CLICK_ERROR,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./actions/consts'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getDataFromAPI &#125; <span class="keyword">from</span> <span class="string">'./api'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">apiSideEffect</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">yield</span> call(getDataFromAPI);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: API_BUTTON_CLICK_SUCCESS, <span class="attr">payload</span>: data &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: API_BUTTON_CLICK_ERROR, <span class="attr">payload</span>: e.message &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the 'watcher' - on every 'API_BUTTON_CLICK' action, run our side effect</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">apiSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeEvery(API_BUTTON_CLICK, apiSideEffect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cùng một process, nhưng cách implement khác nhau hoàn toàn.</p><ul><li>put thay cho dispatch</li><li>function cuối (apiSaga()) giúp theo dõi tổng thể toàn bộ các action (ở đây có API_BUTTON_CLICK)</li><li>Với cách gọi của redux-saga, chúng ta có thể get data từ bất kì async function nào (promise, …)</li></ul></li><li><h6 id="Nhan-xet"><a href="#Nhan-xet" class="headerlink" title="Nhận xét"></a>Nhận xét</h6><p>Cả 2 cách implement đều dễ đọc, tuy nhiên đối với redux-thunk , bạn phải đối đầu với một tá các promise, các callback nếu có, rất mất thời gian cho người maintain đọc và tìm code. Với redux-saga , đơn giản bạn chỉ cần track theo try/catch block để theo dõi dòng code, bên cạnh đó còn có hàm giúp bạn track các action một cách dễ dàng.</p></li></ol><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Ở bài viết này mình đề cập đến 2 điểm nhấn chính của redux-saga là giữ cho action pure synchronos theo chuẩn redux và loại bỏ hoàn toàn callback theo javascript truyền thống. Bài viết tiếp theo mình sẽ đề cập nốt key point cuối cùng của saga là <strong>easy to test</strong>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-Saga-la-gi&quot;&gt;&lt;a href=&quot;#Redux-Saga-la-gi&quot; class=&quot;headerlink&quot; title=&quot;Redux-Saga là gì?&quot;&gt;&lt;/a&gt;Redux-Saga là gì?&lt;/h1&gt;&lt;p&gt;Redux-Saga là một thư viện redux middleware, giúp quản lý những side effect trong ứng dụng redux trở nên đơn giản hơn. Bằng việc sử dụng tối đa tính năng &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Generators&lt;/a&gt; &lt;code&gt;(function*)&lt;/code&gt; của ES6, nó cho phép ta viết async code nhìn giống như là synchronos.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nthung2112.github.io/tags/react/"/>
    
      <category term="redux" scheme="http://nthung2112.github.io/tags/redux/"/>
    
      <category term="saga" scheme="http://nthung2112.github.io/tags/saga/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in React</title>
    <link href="http://nthung2112.github.io/2018/04/Thinking-in-React.html"/>
    <id>http://nthung2112.github.io/2018/04/Thinking-in-React.html</id>
    <published>2018-04-30T09:47:00.000Z</published>
    <updated>2018-04-30T10:03:55.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.</p></blockquote><p>Một trong những phần quan trọng nhất của React là cách nó tạo ra cách nghĩ của bạn về các ứng dụng mà bạn xây dựng. Trong tài liệu này, chúng tôi sẽ hướng dẫn bạn cách để xây dựng một ứng dụng tìm kiếm sản phẩm trong table với React.</p><a id="more"></a><h1 id="Bat-dau"><a href="#Bat-dau" class="headerlink" title="Bắt đầu"></a>Bắt đầu</h1><p>Giả dụ bạn đã có sẵn một JSON API và giao diện đã sẵn sàng gọi đến nó. Cụ thể như ảnh sau: </p><p><img src="https://reactjs.org/static/thinking-in-react-mock-1071fbcc9eed01fddc115b41e193ec11-4dd91.png" alt=""></p><p>Dữ liệu trả về có dạng như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Sporting Goods"</span>, <span class="attr">price</span>: <span class="string">"$49.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"Football"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Sporting Goods"</span>, <span class="attr">price</span>: <span class="string">"$9.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"Baseball"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Sporting Goods"</span>, <span class="attr">price</span>: <span class="string">"$29.99"</span>, <span class="attr">stocked</span>: <span class="literal">false</span>, <span class="attr">name</span>: <span class="string">"Basketball"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Electronics"</span>, <span class="attr">price</span>: <span class="string">"$99.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"iPod Touch"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Electronics"</span>, <span class="attr">price</span>: <span class="string">"$399.99"</span>, <span class="attr">stocked</span>: <span class="literal">false</span>, <span class="attr">name</span>: <span class="string">"iPhone 5"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">category</span>: <span class="string">"Electronics"</span>, <span class="attr">price</span>: <span class="string">"$199.99"</span>, <span class="attr">stocked</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">"Nexus 7"</span>&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="Buoc-1-Chia-UI-thanh-component-theo-bac"><a href="#Buoc-1-Chia-UI-thanh-component-theo-bac" class="headerlink" title="Bước 1: Chia UI thành component theo bậc"></a>Bước 1: Chia UI thành component theo bậc</h2><p>Việc đầu tiên bạn sẽ phải vẽ các hộp xung quanh mỗi component ( và subcomponent ) và đặt tên cho chúng. Nhưng bạn phân vân không biết khi nào nên tạo ra component? Đối với component, một kĩ thuật được sử dụng rộng rãi để design component là sử dụng <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">nguyên tắc đơn nhiệm</a>. Khi các component được sinh ra quá nhiều, bạn hãy tách chúng ra thành nhiều subcomponent. Đối với việc thuường xuyên hiển thị dữ liệu JSON, bạn nên đảm bảo về tính đúng đắn của model, liệu rằng nó sẽ được map chính xác với UI ( các component ) của bạn? Bởi vì UI và các model luôn phải dính liền với cấu trúc của thông tin, có nghĩa là công việc phân chia UI sang component là không đáng kể. Cứ chia ra thành các component và hiển thị chính xác từng mẩu dữ liệu của bạn là ổn.</p><p><img src="https://reactjs.org/static/thinking-in-react-components-eb8bda25806a89ebdc838813bdfa3601-82965.png" alt=""></p><p>Đối với dữ liệu trong ảnh, bạn sẽ nghĩ đến 5 component tương ứng với mỗi màu phải không? Sau đây là chi tiết cho từng component đó:</p><ol><li><strong>FilterableProductTable (cam)</strong>: chứa toàn bộ ví dụ</li><li><strong>SearchBar (xanh)</strong>: nhận dữ liệu từ người dùng</li><li><strong>ProductTable (xanh lá cây)</strong>: hiển thị và lọc dữ liệu dựa trên user input</li><li><strong>ProductCategoryRow (lam)</strong>: hiển thị tiêu đề cho mỗi category</li><li><strong>ProductRow (đỏ)</strong>: mỗi hàng là 1 sản phẩm</li></ol><p>Nếu bạn nhìn vào ProductTable , bạn sẽ thấy có header (bao gồm nhãn “Name” và “Price”) không phải là chính component của nó. Đây là vấn đề của việc tinh chỉnh. Ví dụ, chúng ta để phần header thuộc component ProductTable vì nó là một phần của việc render ra dữ liệu, đó là trách nhiệm của ProductTable. Tuy nhiên, nếu header này khi được sử dụng một cách phức tạp (như là tương tác với sắp xếp), nó sẽ phải tạo thêm một component riêng cho header gọi là ProductTableHeader chẳng hạn. Tóm lại, bạn nên phân chia cấu trúc của component và các subcomponent như sau:</p><ul><li>FilterableProductTable<ul><li>SearchBar</li><li>ProductTable<ul><li>ProductCategoryRow</li><li>ProductRow</li></ul></li></ul></li></ul><h2 id="Buoc-2-Xac-dinh-muc-toi-thieu-nhung-hoan-chinh"><a href="#Buoc-2-Xac-dinh-muc-toi-thieu-nhung-hoan-chinh" class="headerlink" title="Bước 2: Xác định mức tối thiểu (nhưng hoàn chỉnh)"></a>Bước 2: Xác định mức tối thiểu (nhưng hoàn chỉnh)</h2><p>Để UI của bạn tương tác tốt, bạn cần xác định các thay đổi đến dữ liệu thuộc tầng dưới (underlying data model) . Hãy sử dụng <strong>state</strong> của React.</p><p>Đầu tiên bạn nên nghĩ đến việc tối giản các mutable state. Chìa khóa thành công ở đây là <strong>DRY:</strong> <em><strong>Don’t Repeat Yourself</strong></em> . Ví dụ với ứng dụng TODO, bạn chỉ cần giữ mảng các TODO item, không cần đến các state khác như để đếm số lượng. Thay vào đó, khi bạn muốn đếm số lượng của TODO item, đơn giản là lấy ra length của TODO item array.</p><p>Cụ thể với dữ liệu mẫu trong bài viết này, chúng ta có:</p><ul><li>Nguyên mẫu danh sách sản phẩm</li><li>Text tìm kiếm mà user nhập vào</li><li>Value của checkbox</li><li>Danh sách đã lọc sản phẩm</li></ul><p>Hãy suy nghĩ về việc bạn nên để cái nào là state, trong thời gian suy nghĩ, hãy đọc các câu hỏi dưới về luồng data:</p><ol><li>Có thể pass từ parent component thông qua props không? Nếu có, state là không cần thiết.</li><li>Nó có giữ nguyên trạng thái dữ liệu suốt không? Nếu có, state không thể sử dụng được.</li><li>Bạn có đoán được data dựa vào bất kì state hay props nào trong component không? Nếu có, chỗ này càng không phải chỗ cho state.</li></ol><p>Danh sách sản phẩm nguyên bản được pass thông qua props. Text tìm kiếm và checkbox dường như sẽ thích hợp với state vì nó có thể được thay đổi bất kì lúc nào bởi người dùng. Vậy cuối cùng, danh sách lọc sản phẩm cũng không thể nào là state bởi vì chúng có thể được tính toán thông qua list sản phẩm ban đầu dựa vào search text và checkbox.</p><p>Tóm lại, bạn nên sử dụng state cho:</p><ul><li>Search text mà user nhập vào</li><li>Giá trị của checkbox khi user sử dụng</li></ul><h2 id="Buoc-4-Xac-dinh-noi-sinh-song-cua-state"><a href="#Buoc-4-Xac-dinh-noi-sinh-song-cua-state" class="headerlink" title="Bước 4: Xác định nơi sinh sống của state"></a>Bước 4: Xác định nơi sinh sống của state</h2><p>Hãy nhớ rằng, React là luồng dữ liệu một chiều, phụ thuộc theo luồng của các cấp component. Bạn không thể đoán ngay được component này sẽ có những state gì. <strong>Đây là việc chiếm nhiều thời gian và công sức nhất dành cho người mới tìm hiểu về react</strong>, hãy nhớ: đừng vội khẳng định state A thuộc component A. Để hình dung ra một cách rõ ràng, hãy theo các bước sau:</p><ul><li>Phân loại mỗi component sẽ render ra những gì dựa vào state đó.</li><li>Tìm thử trong component cha</li><li>Nếu component cha không có, tìm tiếp ở component cao hơn component cha đó</li><li>Nếu bạn không tìm ra được component đang giữ state, thử tạo một conponent mới để giữ state đó và thêm nó ở đâu đó trong cấp thư mục cao hơn thư mục chứa component cha.</li></ul><p>Ví dụ cụ thể:</p><ul><li>ProductTable cần filter sản phẩm dựa vào state và SearchBar cần phải hiển thị text được nhập và state của checkbox.</li><li>Component cha sẽ là FilterableProductTable</li><li>Tất nhiên theo lẽ tự nhiên, search text và giá trị của checkbox sẽ được lưu ở trong FilterableProductTable.</li></ul><h2 id="Buoc-5-Them-luong-du-lieu"><a href="#Buoc-5-Them-luong-du-lieu" class="headerlink" title="Bước 5: Thêm luồng dữ liệu"></a>Bước 5: Thêm luồng dữ liệu</h2><p>…</p><p>Và đây là kết quả </p><iframe src="//codepen.io/gaearon/embed/LzWZvb/?height=600" width="100%" height="600" frameborder="0" allowfullscreen></iframe><h2 id="Ket"><a href="#Ket" class="headerlink" title="Kết"></a>Kết</h2><p>Hy vọng rằng, bài viết này cho bạn ý tưởng làm thế nào để suy nghĩ về việc xây dựng các component với React. Mặc dù có thể khiến bạn gõ nhiều code hơn, hãy nhớ rằng code được đọc nhiều hơn nó được viết. Khi bạn bắt đầu xây dựng các thư viện component lớn, bạn sẽ đánh giá cao sự rõ ràng và tính mô đun, và với việc tái sử dụng code, các dòng code của bạn sẽ bắt đầu co lại.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;React is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Một trong những phần quan trọng nhất của React là cách nó tạo ra cách nghĩ của bạn về các ứng dụng mà bạn xây dựng. Trong tài liệu này, chúng tôi sẽ hướng dẫn bạn cách để xây dựng một ứng dụng tìm kiếm sản phẩm trong table với React.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nthung2112.github.io/tags/react/"/>
    
      <category term="javascript" scheme="http://nthung2112.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Tổng hợp các cheat sheets tốt nhất của front-end</title>
    <link href="http://nthung2112.github.io/2018/04/Tong-hop-cac-cheat-sheets-tot-nhat-cua-front-end.html"/>
    <id>http://nthung2112.github.io/2018/04/Tong-hop-cac-cheat-sheets-tot-nhat-cua-front-end.html</id>
    <published>2018-04-30T08:36:00.000Z</published>
    <updated>2018-04-30T11:52:12.794Z</updated>
    
    <content type="html"><![CDATA[<p>Chúng ta không thể nhớ thuộc lòng tất cả các API. Đây là lúc chúng ta cần các trang cheat sheets này! Dưới đây là các bản cheat sheets tốt nhất mà tôi đã thu thập được.</p><a id="more"></a><h3 id="Javascript-ES2015-features"><a href="#Javascript-ES2015-features" class="headerlink" title="Javascript ES2015 features"></a><a href="https://devhints.io/es6" target="_blank" rel="noopener">Javascript ES2015 features</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*l90SMm_aR9UD8m9QDu3kKA.png" alt="https://devhints.io/es6"></p><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a><a href="http://overapi.com/javascript" target="_blank" rel="noopener">Javascript</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*sqkshvsmr7hN4Ab2A7GJzg.png" alt="http://overapi.com/javascript"></p><h3 id="Javascript-Regular-expression"><a href="#Javascript-Regular-expression" class="headerlink" title="Javascript Regular expression"></a><a href="https://www.debuggex.com/cheatsheet/regex/javascript" target="_blank" rel="noopener">Javascript Regular expression</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*jHRyyzwj9z11ouDkY9dK9Q.png" alt="https://www.debuggex.com/cheatsheet/regex/javascript"></p><h3 id="React"><a href="#React" class="headerlink" title="React"></a><a href="https://devhints.io/react" target="_blank" rel="noopener">React</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*VhtpckI6V0tckQa3uM9MbA.png" alt="https://devhints.io/react"></p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a><a href="https://github.com/linkmesrl/react-journey-2016/blob/master/resources/egghead-redux-cheat-sheet-3-2-1.pdf" target="_blank" rel="noopener">Redux</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*KJQ-XK2yK-903OXHCRQpLw.png" alt="https://github.com/linkmesrl/react-journey-2016/blob/master/resources/egghead-redux-cheat-sheet-3-2-1.pdf"></p><h3 id="Vuejs"><a href="#Vuejs" class="headerlink" title="Vuejs"></a><a href="https://vuejs-tips.github.io/cheatsheet/" target="_blank" rel="noopener">Vuejs</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*xKmyDitGEXGg1J9FBpbqHw.png" alt="https://vuejs-tips.github.io/cheatsheet/"></p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a><a href="https://vuejs-tips.github.io/vuex-cheatsheet/" target="_blank" rel="noopener">Vuex</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*M-UIS7PPmvh_HuZVTqarzA.png" alt="https://vuejs-tips.github.io/vuex-cheatsheet/"></p><h3 id="Angular-4"><a href="#Angular-4" class="headerlink" title="Angular 4"></a><a href="https://angular.io/guide/cheatsheet" target="_blank" rel="noopener">Angular 4</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*tx7-kHpoRsiEyp9ch3yMhw.png" alt="https://angular.io/guide/cheatsheet"></p><h3 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a><a href="https://yoksel.github.io/flex-cheatsheet/" target="_blank" rel="noopener">Flexbox</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*q8xJa81twW6J-U_URHOJvQ.png" alt="https://yoksel.github.io/flex-cheatsheet/"></p><h3 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a><a href="https://devhints.io/sass" target="_blank" rel="noopener">SCSS</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*OlBKGGkX-lYD4Hv_3jzq0A.png" alt="https://devhints.io/sass"></p><h3 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a><a href="https://devhints.io/stylus" target="_blank" rel="noopener">Stylus</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*KzGNbC0CdMdUQjF_8LWy6g.png" alt="https://devhints.io/stylus"></p><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a><a href="https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png" target="_blank" rel="noopener">GraphQL</a></h3><p><img src="https://cdn-images-1.medium.com/max/2000/1*PBnThNh1zzpCJq_70ExyRA.png" alt="https://raw.githubusercontent.com/sogko/graphql-shorthand-notation-cheat-sheet/master/graphql-shorthand-notation-cheat-sheet.png"></p><p>Missing your favorite cheatsheet? Please let me know in the comments!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Chúng ta không thể nhớ thuộc lòng tất cả các API. Đây là lúc chúng ta cần các trang cheat sheets này! Dưới đây là các bản cheat sheets tốt nhất mà tôi đã thu thập được.&lt;/p&gt;
    
    </summary>
    
    
      <category term="cheat sheets" scheme="http://nthung2112.github.io/tags/cheat-sheets/"/>
    
  </entry>
  
  <entry>
    <title>Tất cả những gì bạn cần biết về CSS-in-JS</title>
    <link href="http://nthung2112.github.io/2018/04/Tat-ca-nhung-gi-ban-can-biet-ve-CSS-in-JS.html"/>
    <id>http://nthung2112.github.io/2018/04/Tat-ca-nhung-gi-ban-can-biet-ve-CSS-in-JS.html</id>
    <published>2018-04-30T08:19:00.000Z</published>
    <updated>2018-04-30T08:31:39.212Z</updated>
    
    <content type="html"><![CDATA[<p>TL;DR:<strong>Thinking in components — </strong>No longer do you have to maintain bunch of style-sheets. CSS-in-JS abstracts the CSS model to the component level, rather than the document level (modularity).</p><a id="more"></a><h4 id="Styled-React-Component-Example"><a href="#Styled-React-Component-Example" class="headerlink" title="Styled React Component Example"></a>Styled React Component Example</h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*DFwkvCRyz9K0Mbl59r2hMg.png" alt=""></p><hr><p>You probably heard terms like <a href="http://cssinjs.org/?v=v9.1.0" target="_blank" rel="noopener"><strong>CSS-in-JS</strong></a>, <a href="https://www.styled-components.com" target="_blank" rel="noopener"><strong>Styled Components</strong></a>, <a href="https://github.com/FormidableLabs/radium" target="_blank" rel="noopener"><strong><em>Radium</em></strong></a>, <a href="https://github.com/Khan/aphrodite" target="_blank" rel="noopener"><strong>Aphrodite</strong></a> and you’re left there hanging <strong>“why is this a thing? — </strong>I’m perfectly happy with <strong>CSS-in-CSS</strong> (<strong><em>CSS</em> in <em>.css</em></strong>).<strong>”</strong></p><p>I’m here to shine some light on why this is a thing and hopefully we will least understand the concept and understand why it’s a thing. With that said — please feel free to use CSS-in-CSS — on no terms are you obligated to use CSS-in-JS. <strong>Whatever works best for you and makes you happy is hands down the best solution, always-always!</strong></p><p>CSS-in-JS is a delicate and controversial topic — I’m advocating having an open mind and weighing if this makes sense to you — ask yourself <strong>“will it improve my workflow?” —**</strong>in the end — that’s the only thing that matters — use tools that make you happier and more productive!**</p><p>I’ve always felt awkward having to maintain a huge folder of stylesheets. I would like to try different approaches. I’ve seen many people asking if there are new styling ideas. CSS-in-JS is so far the best concept.</p><p>Let’s give CSS-in-JS a shot.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*bsbmmLcGl2kSJSuKW-JFqw.png" alt="Small-To-Medium size project CSS"></p><hr><h3 id="What-is-CSS-in-JS"><a href="#What-is-CSS-in-JS" class="headerlink" title="What is CSS-in-JS?"></a>What is CSS-in-JS?</h3><blockquote><p><a href="https://medium.com/@oleg008/jss-is-css-d7d41400b635" target="_blank" rel="noopener">JSS is a more powerful abstraction</a> over CSS. It uses JavaScript as a language to describe styles in a declarative and maintainable way. It is a <a href="http://cssinjs.org/performance" target="_blank" rel="noopener">high performance</a> JS to CSS compiler which works at runtime and server-side. This core library is low level and framework agnostic. It is about 6KB (minified and gzipped) and is extensible via <a href="http://cssinjs.org/plugins" target="_blank" rel="noopener">plugins</a> API. —<a href="http://cssinjs.org/" target="_blank" rel="noopener"> source</a></p></blockquote><p>Keep in mind <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style" target="_blank" rel="noopener"><strong>Inline styles</strong></a> <strong>and CSS-in-JS are not the same!</strong> They’re different — Quick demonstration time!</p><h3 id="How-Inline-Styles-Works"><a href="#How-Inline-Styles-Works" class="headerlink" title="How Inline Styles Works"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style" target="_blank" rel="noopener">How Inline Styles Works</a></h3><script src="//gist.github.com/5812bd9006c91b9eb0fe08e3678d88c8.js"></script><p>In the browser this will get attached to the DOM node like so:</p><script src="//gist.github.com/02b07c1daa4816eb2a51eb8d1b494f3e.js"></script><h3 id="How-CSS-in-JS-works"><a href="#How-CSS-in-JS-works" class="headerlink" title="How CSS-in-JS works"></a>How CSS-in-JS works</h3><script src="//gist.github.com/769908d4e065b363258d9ae733febac2.js"></script><p>In the browser this will gets attached to the DOM like so:</p><script src="//gist.github.com/e76c2883a81a11ee16f4b12906572e2a.js"></script><h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h3><p>See the slight difference? CSS-in-JS attached a <code>&lt;style&gt;</code> tag on top of the DOM while inline styles just attached the properties to the DOM node.</p><p><strong><em>Why does this matter?</em></strong></p><p><strong>Not all CSS features can be aliased with JavaScript event handlers </strong>, many pseudo selectors (like :disabled, :before, :nth-child) aren’t possible, styling the html and body tags isn’t supported etc.</p><p><strong>With CSS-in-JS</strong>, you have all the power of CSS at your fingertips. Since actual CSS is generated, you can use every media query and pseudo selector you can think of. Some libraries (like jss, styled-components) even add support for neat, non-CSS-native features like nesting!</p><p><a href="https://mxstbr.blog/2016/11/inline-styles-vs-css-in-js/" target="_blank" rel="noopener"><strong>Brilliant article going in depth on how they’re different.</strong></a></p><p>“Just write the darn CSS in CSS and be done with it.”</p><p>Yes — while that’s the case for how it’s been done for a long-long time — <strong>the challenge is modern web is written in components not pages.</strong></p><p><strong>CSS was never actually made for component based approaches</strong>. CSS-in-JS solves exactly this problem. Shout-out to <a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a> for solving this problem beautifully even tho Vues styles have no access to components state.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*jk3SeXoIgOfymKO-8JO23A.gif" alt="Here’s Bob Ross painting rocks to cool down the tension 😄"></p><h3 id="What-are-the-benefits-of-using-CSS-in-JS"><a href="#What-are-the-benefits-of-using-CSS-in-JS" class="headerlink" title="What are the benefits of using CSS-in-JS?"></a>What are the benefits of using CSS-in-JS?</h3><ul><li><strong>Thinking in components — </strong>No longer do you have to maintain bunch of style-sheets. CSS-in-JS abstracts the CSS model to the component level, rather than the document level (modularity).</li><li>CSS-in-JS <strong>leverages the full power of the JavaScript ecosystem</strong> to <em>enhance</em> CSS.</li><li>“<strong>True rules isolation</strong>” — Scoped selectors are not enough. CSS has properties which are inherited automatically from the parent element, if not explicitly defined. Thanks to <a href="http://cssinjs.org/jss-isolate" target="_blank" rel="noopener">jss-isolate</a> plugin, JSS rules will not inherit properties.</li><li><strong>Scoped selectors </strong>— CSS has just one global namespace. It is impossible to avoid selector collisions in non-trivial applications. Naming conventions like BEM might help within one project, but will not when integrating third-party code. JSS generates unique class names by default when it compiles JSON representation to CSS.</li><li><strong>Vendor Prefixing</strong> —The CSS rules are automatically vendor prefixed, so you don’t have to think about it.</li><li><strong>Code sharing </strong>— Easily share constants and functions between JS and CSS.</li><li><strong>Only the styles which are currently</strong> in use on your screen are also in the DOM (<a href="https://github.com/cssinjs/react-jss" target="_blank" rel="noopener">react-jss</a>).</li><li><a href="https://en.wikipedia.org/wiki/Dead_code_elimination" target="_blank" rel="noopener"><strong>Dead code elimination</strong></a></li><li><strong>Unit tests</strong> for CSS!</li></ul><h3 id="What-are-the-drawbacks-of-using-CSS-in-JS"><a href="#What-are-the-drawbacks-of-using-CSS-in-JS" class="headerlink" title="What are the drawbacks of using CSS-in-JS?"></a>What are the drawbacks of using CSS-in-JS?</h3><ul><li><strong>Learning curve</strong>.</li><li><strong>New dependencies.</strong></li><li><strong>Harder for newer teammates to adapt to the code-base</strong>. People who are new to front-end have to learn “more” things.</li><li><strong>Challenging</strong> the status quo. (not necessarily a con)</li></ul><p>The pros out-weight the cons heavily — let’s give CSS-in-JS a shot! <strong>Nothing to lose!</strong></p><hr><h3 id="Most-popular-CSS-in-JS-libaries"><a href="#Most-popular-CSS-in-JS-libaries" class="headerlink" title="Most popular CSS-in-JS libaries"></a>Most popular CSS-in-JS libaries</h3><p><em>Will provide a quick hello world example for all the popular CSS-in-JS libraries— help yourself to choose which one you like the most based on the syntax.</em></p><p><img src="https://cdn-images-1.medium.com/max/2000/1*xXIXJeI3l6_k-rXg6cqNjw.png" alt="NPM trends"></p><h4 id="Styled-Components"><a href="#Styled-Components" class="headerlink" title="Styled Components"></a><a href="https://www.styled-components.com/" target="_blank" rel="noopener">Styled Components</a></h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*QvSrt0RgwuOKYlLHLjkDQw.png" alt=""></p><script src="//gist.github.com/5888c4756651dfef1e1015b822d09b27.js"></script><h3 id="JSS-React"><a href="#JSS-React" class="headerlink" title="JSS-React"></a><a href="https://github.com/cssinjs/react-jss" target="_blank" rel="noopener">JSS-React</a></h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*z7kPKLW6meQuC5sznIYnkQ.png" alt=""></p><script src="//gist.github.com/c90a6455e9dd7dce7b579b06d2e61413.js"></script><h3 id="glamorous"><a href="#glamorous" class="headerlink" title="glamorous"></a><a href="https://glamorous.rocks/" target="_blank" rel="noopener">glamorous</a></h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*tWuxJKAhaod4WNsm3MkMgQ.png" alt=""></p><script src="//gist.github.com/47c1dc52980ed0197db2ceb5ebbb9ac0.js"></script><h4 id="Radium-caveat-uses-inline-styles"><a href="#Radium-caveat-uses-inline-styles" class="headerlink" title="Radium (caveat: uses inline styles)"></a><a href="http://formidable.com/open-source/radium/" target="_blank" rel="noopener">Radium</a> (caveat: uses inline styles)</h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*UsS6OxCfH6r7JLWx-wNeIQ.png" alt=""></p><script src="//gist.github.com/14b38638841f6c0539127ad52358d099.js"></script><p>Note: Radium uses <a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841" target="_blank" rel="noopener">decorators</a>!</p><h4 id="Aphrodite"><a href="#Aphrodite" class="headerlink" title="Aphrodite"></a><a href="https://github.com/Khan/aphrodite" target="_blank" rel="noopener">Aphrodite</a></h4><script src="//gist.github.com/f7d862549b680f766e68751e0f3f77d1.js"></script><h4 id="Stylotron"><a href="#Stylotron" class="headerlink" title="Stylotron"></a><a href="https://github.com/rtsao/styletron" target="_blank" rel="noopener">Stylotron</a></h4><p><img src="https://cdn-images-1.medium.com/max/1600/1*a0c0iulx7pZFScn0fsAn0w.png" alt=""></p><script src="//gist.github.com/9919c99b28ca4a063a3245efc1e4dddd.js"></script><p>These are really simple examples which demonstrate the core functionality. All of the libraries have much more functionality included — for example, <strong>theming</strong>, <strong>dynamic props</strong>, <strong>server side rendering</strong> and much more!</p><p><a href="https://medium.com/object-partners/css-in-js-benefits-drawback-and-tooling-80286b03f9aa" target="_blank" rel="noopener">Excellent post</a> going in depth about all of the features CSS-in-JS enables.</p><p><a href="https://github.com/tuchk4/awesome-css-in-js" target="_blank" rel="noopener"><strong>Here’s the full list — go and give all the libraries a quick try!</strong></a></p><p>Hate it or love it — <strong>CSS-in-JS deserves a chance!</strong></p><h4 id="Convinced-CSS-in-JS-is-not-for-me-There’s-another-option-—-CSS-Modules"><a href="#Convinced-CSS-in-JS-is-not-for-me-There’s-another-option-—-CSS-Modules" class="headerlink" title="Convinced CSS-in-JS is not for me? There’s another option — CSS Modules!"></a><a href="https://glenmaddern.com/articles/css-modules" target="_blank" rel="noopener">Convinced CSS-in-JS is not for me? There’s another option — CSS Modules!</a></h4><p>Thanks for reading!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TL;DR:&lt;strong&gt;Thinking in components — &lt;/strong&gt;No longer do you have to maintain bunch of style-sheets. CSS-in-JS abstracts the CSS model to the component level, rather than the document level (modularity).&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://nthung2112.github.io/tags/javascript/"/>
    
      <category term="css" scheme="http://nthung2112.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Hiểu sâu về React Higher Order Components</title>
    <link href="http://nthung2112.github.io/2018/04/Hieu-sau-ve-React-Higher-Order-Components.html"/>
    <id>http://nthung2112.github.io/2018/04/Hieu-sau-ve-React-Higher-Order-Components.html</id>
    <published>2018-04-30T08:08:00.000Z</published>
    <updated>2018-04-30T08:31:59.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h1><p>Chắc hẳn rất nhiều người trong chúng ta đã và đang sử dụng React, và tất nhiên là kèm theo hằng tá thư viện đi kèm hỗ trợ nó (lol) Và chắc hẳn bạn đã từng gặp thư viện yêu cầu bạn viết một đoạn code kiểu này để thư viện có thể hoạt động:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Component); </span><br><span class="line"><span class="comment">// Kết nối Component với Store của Redux bằng thư viện react-redux</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>Hoặc là thế này</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Radium = <span class="built_in">require</span>(<span class="string">'radium'</span>);</span><br><span class="line">@Radium</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Radium thư viện hỗ trợ inline style cho React element</span></span><br></pre></td></tr></table></figure><p>Và boom Component của chúng ta nhận được props, styles và thậm chí là render ra một view khác </p><p><img src="https://viblo.asia/uploads/8dd3d81c-5fc7-431b-867c-e96a511abb83.gif" alt=""> </p><p>Các bạn đã bao giờ tự hỏi <code>connect()</code> <code>@Radium</code> kia là gì, tại sao lại viết như vậy. Vâng trong bài viết này chúng ta sẽ cùng tìm hiểu về một khái niệm nâng cao trong React - <strong>Higher-Order Components.</strong> </p><p><img src="https://viblo.asia/uploads/d0174b65-4df5-4a89-8b4d-01a14fc0c757.gif" alt=""></p><h1 id="Higher-Order-Components-In-a-Nutshell"><a href="#Higher-Order-Components-In-a-Nutshell" class="headerlink" title="Higher-Order Components In a Nutshell"></a>Higher-Order Components In a Nutshell</h1><h2 id="What-are-Higher-Order-Components-HoCs"><a href="#What-are-Higher-Order-Components-HoCs" class="headerlink" title="What are Higher-Order Components (HoCs)?"></a>What are Higher-Order Components (HoCs)?</h2><p>Về bản chất, HoC không phải là một phần của React API, nó là một pattern xuất hiện từ những thành phần đặc tính của React. Thường được implement như một function, mà về cơ bản, là một class factory (vâng, là một class factory!)</p><blockquote><p>Higher Order Component (HoC) là một function nhận vào một component và trả về một component mới. EnhancedComponent = higherOrderComponent(WrappedComponent);</p></blockquote><h2 id="What-can-I-do-with-HOCs"><a href="#What-can-I-do-with-HOCs" class="headerlink" title="What can I do with HOCs?"></a>What can I do with HOCs?</h2><p>Ở cấp độ cao, HoC cho phép chúng ta:</p><ul><li>Code reuse, logic và tự động trừu tượng hóa (bootstrap abstraction)</li><li>Chiếm quyền render (Render Highjacking)</li><li>Trừu tượng hóa (abstraction) và điều khiển (manipulation) State</li><li>Điều khiển Props</li></ul><p>Chúng ta sẽ xem chi tiết về những mục này, nhưng trước tiên, chúng ta sẽ học cách implement HoCs bởi vì việc implement cho chúng ta thấy những điều có thể và hạn chế mà chúng ta thực sự có thể làm với HoC.</p><h1 id="HOC-factory-implementations"><a href="#HOC-factory-implementations" class="headerlink" title="HOC factory implementations"></a>HOC factory implementations</h1><p>Có 2 cách implement HoCs thường thấy trong React: <strong>Props Proxy (PP)</strong> và <strong>Inheritance Inversion (II)</strong>. Cả 2 cách cho phép các cách khác nhau để thao tác với WrappedComponent.</p><p>Trước khi bắt đầu chúng ta cần một project</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create-react-app learnHOC</span><br><span class="line">cd learnHOC/src/</span><br><span class="line">touch HOC.js</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="Props-Proxy"><a href="#Props-Proxy" class="headerlink" title="Props Proxy"></a>Props Proxy</h2><p>Props Proxy (PP) được implement thông thường theo cách sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">PP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Phần quan trọng nhất ở đây là method render của HoC trả về một React Element của kiểu WrappedComponent. Chúng ta cũng truyền props mà HoC nhận được, vì thế phương pháp này mới có tên Props Proxy.</p><h3 id="What-can-be-done-with-Props-Proxy"><a href="#What-can-be-done-with-Props-Proxy" class="headerlink" title="What can be done with Props Proxy?"></a>What can be done with Props Proxy?</h3><ul><li>Điều khiển props</li><li>Truy cập instance thông qua Refs</li><li>Trừu tượng hóa (Abstracting) State</li><li>Bao WrappedComponent với elements khác</li></ul><h4 id="Dieu-khien-props"><a href="#Dieu-khien-props" class="headerlink" title="Điều khiển props"></a>Điều khiển props</h4><p>Chúng ta có thể đọc, thêm, sửa đổi và xóa props được truyền cho WrappedComponent.</p><p>Nhưng cẩn thận với việc xóa hay sửa đổi các prop quan trọng, chúng ta nên đặt namespace cho HoC props để nó không phá vỡ WrappedComponent.</p><p>Ví dụ: Thêm mới props.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">PP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">        newProps: <span class="string">'something news'</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">module.exports = &#123;</span></span><br><span class="line"><span class="xml">    pP</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Sửa lại file App một chút</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;pP&#125; <span class="keyword">from</span> <span class="string">'./HoC'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">'App'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.props);</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pP(App);</span><br></pre></td></tr></table></figure><p>Và ở console chúng ta có kết quả <img src="https://viblo.asia/uploads/48e1c152-e99c-48a3-9074-b6be4df55b6a.png" alt=""></p><h4 id="Truy-cap-instance-thong-qua-Refs"><a href="#Truy-cap-instance-thong-qua-Refs" class="headerlink" title="Truy cập instance thông qua Refs"></a>Truy cập instance thông qua Refs</h4><p>Chúng ta có thể truy cập this (instance của WrappedComponent) với ref, nhưng chúng ta sẽ cần một quá trình render đầy đủ của WrappedComponent để ref có thể được tính toán. Điều này có nghĩa là chúng ta cần trả về WrappedComponent element từ method render của HoC, để React có thể làm quá trình đối chiếu (reconciliation process) và chúng ta sẽ có ref đến WrappedComponent instance.</p><p>Ví dụ: Chúng ta sẽ tìm hiểu làm thế nào để truy cập instance methods và instance của chính WrappedComponent thông qua refs</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refsPP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">RefsPP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    proc(wrappedComponentInstance) &#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'refs Proc'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(wrappedComponentInstance);</span><br><span class="line">      wrappedComponentInstance.test();</span><br><span class="line">      <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.props, &#123;<span class="attr">ref</span>: <span class="keyword">this</span>.proc.bind(<span class="keyword">this</span>)&#125;)</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">module.exports = &#123;</span></span><br><span class="line"><span class="xml">    pP,</span></span><br><span class="line"><span class="xml">    refsPP</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Sửa file App một chút</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;pP, refsPP&#125; <span class="keyword">from</span> <span class="string">'./HoC'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  test() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call Test'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  .....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> refsPP(App);</span><br></pre></td></tr></table></figure><p>Và ở console chúng ta có kết quả <img src="https://viblo.asia/uploads/ff5e3971-58bf-406c-ae1b-ff012e790bee.png" alt=""> Khi WrappedComponent được render xong thì ref callback sẽ được thực thi, và chúng ta sẽ có ref đến WrappedComponent instance. Điều này có thể được sử dụng để đọc/thêm các props và gọi các instance method.</p><h4 id="Truu-tuong-hoa-Abstracting-State"><a href="#Truu-tuong-hoa-Abstracting-State" class="headerlink" title="Trừu tượng hóa (Abstracting) State"></a>Trừu tượng hóa (Abstracting) State</h4><p>Chúng ta có thể trừu tượng hóa state bằng cách cung cấp props và callbacks cho WrappedComponent, tương tự như <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="noopener">Container Components làm với Presentational components</a>. Ví dụ: Chúng ta sẽ thực hiện trừu tượng hóa state để kiểm soát input</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">statePP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">StatePP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props)</span><br><span class="line">      <span class="keyword">this</span>.state = &#123; <span class="attr">fields</span>: &#123;&#125; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getField(fieldName) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.state.fields[fieldName]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.state.fields[fieldName] = &#123;</span><br><span class="line">          value: <span class="string">''</span>,</span><br><span class="line">          onChange: <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.state.fields[fieldName].value = event.target.value</span><br><span class="line">            <span class="keyword">this</span>.forceUpdate()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        value: <span class="keyword">this</span>.state.fields[fieldName].value,</span><br><span class="line">        onChange: <span class="keyword">this</span>.state.fields[fieldName].onChange</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.props, &#123;</span><br><span class="line">        fields: <span class="keyword">this</span>.getField.bind(<span class="keyword">this</span>),</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Sửa file App một chút</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;pP, refsPP, statePP&#125; <span class="keyword">from</span> <span class="string">'./HoC'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  test() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call Test'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">'App'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'name'</span>, <span class="keyword">this</span>.props.fields(<span class="string">'name'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'email'</span>, <span class="keyword">this</span>.props.fields(<span class="string">'email'</span>));</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        ....</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">          &lt;label&gt;Automatically controlled input!<span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">          &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Name"</span> &#123;...this.props.fields(<span class="string">'name'</span>)&#125;/&gt;</span><br><span class="line">          &lt;input type=<span class="string">"email"</span> placeholder=<span class="string">"Email"</span> &#123;...this.props.fields(<span class="string">'email'</span>)&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Và chúng ta có kết quả <img src="https://viblo.asia/uploads/ea2e3283-f7ba-4b7e-a282-cc3a504b3324.png" alt=""></p><p>Việc trừu tượng hóa state có nhiều ứng dụng, và được sử dụng khá nhiều trong việc giải quyết các vấn đề mà Stateless component gặp phải như không có ref chẳng hạn.</p><h4 id="Bao-WrappedComponent-voi-elements-khac"><a href="#Bao-WrappedComponent-voi-elements-khac" class="headerlink" title="Bao WrappedComponent với elements khác"></a>Bao WrappedComponent với elements khác</h4><p>Chúng ta có thể bao WrappedComponent với component hoặc element khác để styling, layout hoặc mục đích khác. Cách sử dụng cơ bản có thể hoàn thành bởi Parent Components nhưng chúng ta có nhiều sự linh hoạt hơn với HoCs như đã mô tả ở trên.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elmWrapPP</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ElmWrapPP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div style=&#123;&#123;<span class="attr">display</span>: <span class="string">'block'</span>&#125;&#125;&gt;</span><br><span class="line">          &lt;WrappedComponent &#123;...this.props&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Inheritance-Inversion"><a href="#Inheritance-Inversion" class="headerlink" title="Inheritance Inversion"></a>Inheritance Inversion</h2><p>Inheritance Inversion (II) thường được implement như sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iiHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Như các bạn thấy, HOC trả về class (Enhancer) kế thừa (extends) WrappedComponent. Phương pháp này gọi là Inheritance Inversion là do thay vì WrappedComponent mở rộng (kế thừa) Enhancer class nào đó, nó lại được mở rộng (kế thừa) bởi Enhancer. Theo cách này, mối quan hệ giữa chúng dường như bị đảo ngược.</p><p>II cho phép HoC truy cập vào WrappedComponent instance thông qua this, điều này có nghĩa là <strong>HoC có quyền truy cập state, props, component lifecycle hooks và cả phương thức render.</strong></p><p>Chúng ta sẽ không đi sau vào chi tiết chúng ta có thể làm gì với component lifecycle hooks, đó không phải là những gì cụ thể HoC làm, nó là React. Nhưng lưu ý rằng chúng ta hoàn toàn có thể tạo ra lifecycle hooks mới cho WrappedComponent. Và nhớ răng luôn gọi <em>super.[lifecycleHook]</em> để không phá vỡ WrappedComponent.</p><h4 id="Qua-trinh-doi-chieu-Reconciliation-process"><a href="#Qua-trinh-doi-chieu-Reconciliation-process" class="headerlink" title="Quá trình đối chiếu (Reconciliation process)"></a>Quá trình đối chiếu (Reconciliation process)</h4><p>Trước khi bắt đầu chúng ta cần tóm tát vài lý thuyết.</p><p>React Elements mô tả những gì sẽ hiển thị khi React chạy quá trình đối chiếu của nó.</p><p>React Elements có thể có 2 loại: String và Function. String Type React Element (STRE) đại diện các DOM node và Function Type React Element (FTRE) đại diện các Component được tạo ra bằng cách mở rộng React.Component. Đọc thêm tại <a href="https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">post</a>.</p><p>FTRE sẽ được phân giải ra thành cây STRE trong quá trình đối chiếu của React (kết quả cuối cùng luôn là các DOM Element).</p><p>Điều này rất quan trọng và nó có nghĩa là:</p><blockquote><p>Inheritance Inversion High Order Components không đảm bảo là đã giải quyết được toàn bộ cây con. Điều này sẽ được chứng thực khi học Render Highjacking.</p></blockquote><h3 id="What-can-you-do-with-Inheritance-Inversion"><a href="#What-can-you-do-with-Inheritance-Inversion" class="headerlink" title="What can you do with Inheritance Inversion?"></a>What can you do with Inheritance Inversion?</h3><ul><li>Chiếm quyền render (Render Highjacking)</li><li>Điều khiển state (Manipulating state)</li></ul><h4 id="Render-Highjacking"><a href="#Render-Highjacking" class="headerlink" title="Render Highjacking"></a>Render Highjacking</h4><p>Phương pháp này gọi là Render Highjacking bởi vì HoC kiểm soát render output của WrappedComponent và chúng ta có thể làm bất kì điều gì với nó.</p><p>Trong Render Highjacking chúng ta có thể</p><ul><li>Đọc, thêm, sửa, xóa props trong bất kì React Elements nào xuất ra bởi render.</li><li>Đọc và sửa đổi React elements tree xuất ra bởi render.</li><li>Hiển thị elements tree theo điều kiện.</li><li>Bao element tree cho mục đích styling (giống như đã nói ở PP)\</li></ul><p><em>Note: render đề cấp đến WrappedComponent.render</em></p><blockquote><p>Chúng ta không thể chỉnh sửa hoặc tạo props của WrappedComponent instace, bởi vì một React Component không thể chỉnh sửa props mà nó nhận được, nhưng chúng ta có thể thay đổi các props của các element xuất ra từ phương thức render.</p></blockquote><p>Như chúng ta đã nói ở trên, II HoCs không đảm bảo toàn bộ cây con được giải quyết, điều này hàm ý một số giới hạn với kỹ thuật Render Highjacking. Quy tắc chung là với Render Highjacking chúng ta có thể thao tác với element tree mà WrappedComponent.render xuất ra không nhiều hơn cũng không ít hơn. Nếu Element tree đó có chưa một <em><a href="https://facebook.github.io/react/docs/components-and-props.html#functional-and-class-components" target="_blank" rel="noopener">Function Type React Component</a></em> thì chúng ta sẽ không thể thao tác được với các con của Component đó. (Do chúng được hoãn lại bởi quá trình đối chiếu của React cho đến khi nó thực sự được render)</p><ul><li>Ví dụ 1: <strong>Render có điều kiện</strong> HOC sẽ render chính xác những gì mà WrappedComponent sẽ render trừ khi this.props.loggedIn = false. (Giả định là HoC sẽ nhận được loggedIn prop).</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rHII</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.loggedIn) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Not loggedIn<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Và tất nhiên App của chúng ta không có props loggedIn (Lười quá (lol) ) nên kết quả sẽ là <img src="https://viblo.asia/uploads/2ab60c9f-0e2b-4a5f-8f02-6bd187c6a718.png" alt=""></p><ul><li>Ví dụ 2: <strong>Sửa đổi React Element tree</strong> xuất ra bởi render.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HOC.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">treeII</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Enhancer</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render()</span><br><span class="line">      <span class="keyword">let</span> newProps = &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> newChilds = elementsTree.props.children.map(<span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child.type === <span class="string">'input'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> childNewProps = &#123;<span class="attr">value</span>: <span class="string">'may the force be with you'</span>&#125;;</span><br><span class="line">            <span class="keyword">var</span> childProps = <span class="built_in">Object</span>.assign(&#123;&#125;, child.props, childNewProps)</span><br><span class="line">            <span class="keyword">return</span> React.cloneElement(child, childProps, child.props.children);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, elementsTree.props, newProps)</span><br><span class="line">      <span class="keyword">const</span> newElementsTree = React.cloneElement(elementsTree, props, newChilds)</span><br><span class="line">      <span class="keyword">return</span> newElementsTree</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-comment"</span>&gt;<span class="comment">// App.js&lt;/span&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-class"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hljs-keyword"</span>&gt;</span>class<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-title"</span>&gt;App&lt;<span class="regexp">/span&gt; &lt;span class="hljs-keyword"&gt;extends&lt;/</span>span&gt; <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hljs-title"</span>&gt;</span>Component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"hljs-keyword"</span>&gt;<span class="keyword">return</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">          &lt;h2&gt;Welcome to React&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;p className=<span class="string">"App-intro"</span> ref=<span class="string">"appIntro"</span>&gt;</span><br><span class="line">          To get started, edit &lt;code&gt;src/App.js&lt;<span class="regexp">/code&gt; and save to reload.</span></span><br><span class="line"><span class="regexp">        &lt;/</span>p&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> placeholder=<span class="string">"Name"</span>/&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"> export default treeII(App);</span></span><br></pre></td></tr></table></figure><p>Trong ví dụ trên, nếu output render bởi WrappedComponent có chứa element con có type là `input’ thì HoC sẽ thay đổi value của nó thành ‘may the force be with you’.</p><p>Chúng ta có thể làm mọi thứ ở đây, chúng ta có thể duyệt qua toàn bộ các phần tử của element tree và thay đổi bất kì props của bất kì element nào trong tree. Và đây chính xác là những gì <a href="https://github.com/FormidableLabs/radium" target="_blank" rel="noopener">Radium</a> thực hiện.</p><blockquote><p>Note: Chúng ta không thể Render Highjack với Props Proxy. Mặc dù vẫn có thể truy cập vào phương thức render thông qua WrappedComponent.prototype.render, chúng ta sẽ cần phải mô phỏng WrappedComponent instance và các props của nó, và có khả năng là phải tự xử lý component lifecycle thay vì để React làm nó. Trong thực nghiệm của tôi, nó không có giá trị nhiều lắm và nếu chúng ta muốn Render Highjacking chúng ta nên sử dụng II thay vì PP. Hãy nhớ rằng React xử lý các component instances nội bộ và cách duy nhất để chúng ta thao tác với instances là thông qua refs.</p></blockquote><h4 id="Manipulating-state"><a href="#Manipulating-state" class="headerlink" title="Manipulating state"></a>Manipulating state</h4><p>HOC có thể đọc, chỉnh sửa và xóa state của WrappedComponent instance, và chúng ta cũng có thể thêm state nếu cần. Hãy nhớ rằng chúng ta đang làm rối state của WrappedComponent, điều có thể dẫn chúng ta đến việc hủy hoại mọi thứ. Hầu hết các HOC nên được giới hạn để đọc hoặc thêm state, và sau đó được đặt tên (namespace) để không làm rối state của WrappedComponent.</p><p>Ví dụ: Debugging bằng cách truy cập props và state của WrappedComponent</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IIHOCDEBUGGER</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">II</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;h2&gt;HOC Debugger Component&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">          &lt;p&gt;Props&lt;/</span>p&gt; <span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;JSON.stringify(this.props, null, 2)&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line">          &lt;p&gt;State&lt;<span class="regexp">/p&gt;&lt;pre&gt;&#123;JSON.stringify(this.state, null, 2)&#125;&lt;/</span>pre&gt;</span><br><span class="line">          &#123;<span class="keyword">super</span>.render()&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>HOC này sẽ bao WrappedComponent với element khác đồng thời hiện các props và state của WrappedComponent.</p><h2 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h2><p>Khi bao một component với HOC chúng ta đánh mất tên của WrappedComponent, điều này sẽ ảnh hưởng đến chúng ta trong quá trình dev và debugging.</p><p>Mọi người thường làm là tùy chỉnh tên của HOC bằng cách lấy tên của WrappedComponent và đặt trước một cái gì đó. Dưới đây trích từ React-Redux:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HOC.displayName = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> ... </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> displayName = <span class="string">`HOC(<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Function getDisplayName được định nghĩa như sau</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDisplayName</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> WrappedComponent.displayName || </span><br><span class="line">         WrappedComponent.name || </span><br><span class="line">         ‘Component’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chúng ta thực sự không phải viết lại nó vì thư viện <a href="https://github.com/acdlite/recompose" target="_blank" rel="noopener">recompose</a> đã cung cấp function này rồi.</p><h2 id="Phu-luc"><a href="#Phu-luc" class="headerlink" title="Phụ lục"></a>Phụ lục</h2><h3 id="HOC-and-parameters"><a href="#HOC-and-parameters" class="headerlink" title="HOC and parameters"></a>HOC and parameters</h3><p>Đôi khi rất hữu ích khi sử dụng các parameters cho HOCs. Điều này ẩn trong những ví dụ bên trên và nên được phát triển tự nhiên đến Javascript developers trung gian, nhưng vì lợi ích làm cho bài viết đầy đủ, chúng ta sẽ lướt qua nó một cách nhanh chóng.</p><p>Ví dụ: HOC parameters với Props Proxy thông thường. Điều quan trọng là HOCFactoryFactory function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HOCFactoryFactory</span>(<span class="params">...params</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// do something with params</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">HOCFactory</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Và chúng ta có thể sử dụng như thế này</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HOCFactoryFactory(params)(WrappedComponent)</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">@HOCFatoryFactory(params)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappedComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="Difference-with-Parent-Components"><a href="#Difference-with-Parent-Components" class="headerlink" title="Difference with Parent Components"></a>Difference with Parent Components</h3><p>Như đã nói ở phần ‘Bao WrappedComponent với elements khác’, ở một số cách cơ bản cảu HOC ta có thể hoàn thành với Parent Component. Vậy điểm khác biệt giữ HOC và Parent Component là gì?</p><blockquote><p>Parent Components là React Components có vài components con. React có APIs để truy cập và thao tác với component con.</p></blockquote><p>Ví dụ:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render((&lt;Parent&gt;&#123;children&#125;&lt;/</span>Parent&gt; ),  mountNode);</span><br></pre></td></tr></table></figure><p>Giờ chúng ta sẽ duyệt qua xem Parent Components có và không thể làm gì khi so sánh với HOCs và thêm vài thông tin quan trọng:</p><ul><li>Có thể Render Highjacking tương tự như với II HOC</li><li>Có thể điều khiển inner props tương tự như với II HOC</li><li>Có thể trừu tượng hóa state, nhưng có nhược điểm. Chúng ta sẽ không thể truy cập state của Parent Component từ bên ngoài trừ khi chúng ta tạo hooks cho nó. Điều này hạn chế tính hữu ích của nó.</li><li>Bao các elements với elements khác. Đây có thể là trường hợp duy nhất Parent component làm tốt hơn HOC. Nhưng tất nhiên là HOC cũng làm đc.</li><li>Thao tác với child component gặp một số vấn đề. Ví dụ nếu childrent không chỉ có 1 root element (nhiều hơn 1 first level childrent), thì chúng ta phải thêm 1 element để bao tất cả children lại, mà điều này có thể gây rườm ra cho markup của chúng ta. Trong HOCs 1 top level children root được đảm bảo bởi React/JSX.</li><li>Parent Components có thể được sử dụng tự do trong Elements tree, chúng không bị hạn chế 1 Component 1 lần như HOC.</li></ul><p>Nói chung, nếu chúng ta có thể làm được nó với Parent Components thì chúng ta nên làm nó, bởi vì Parent Components ít “hack não” hơn HOCs, nhưng như những điều đã nói, với State nó kém linh hoạt hơn so với HoCs.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Hi vọng là sau khi đọc bài này, mọi người sẽ hiểu hơn một chút về React HOCs. Chúng thực sự có ý nghĩa và đã được chứng minh khá tốt trong nhiều thư viện khác nhau. React mang lại rất nhiều sự đổi mới và những thư viện như Radium, React-Redux, React-Router trong số rất nhiều thư viện khác là những bằng chứng về điều đó.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Gioi-thieu&quot;&gt;&lt;a href=&quot;#Gioi-thieu&quot; class=&quot;headerlink&quot; title=&quot;Giới thiệu&quot;&gt;&lt;/a&gt;Giới thiệu&lt;/h1&gt;&lt;p&gt;Chắc hẳn rất nhiều người trong chúng ta đã và đang sử dụng React, và tất nhiên là kèm theo hằng tá thư viện đi kèm hỗ trợ nó (lol) Và chắc hẳn bạn đã từng gặp thư viện yêu cầu bạn viết một đoạn code kiểu này để thư viện có thể hoạt động:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; connect &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; connect(mapStateToProps, mapDispatchToProps)(Component); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Kết nối Component với Store của Redux bằng thư viện react-redux&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://nthung2112.github.io/tags/react/"/>
    
      <category term="javascript" scheme="http://nthung2112.github.io/tags/javascript/"/>
    
      <category term="hoc" scheme="http://nthung2112.github.io/tags/hoc/"/>
    
  </entry>
  
  <entry>
    <title>Cách phân nhánh và chia việc trong nhóm với Git</title>
    <link href="http://nthung2112.github.io/2018/04/Cach-phan-nhanh-va-chia-viec-trong-nhom-voi-Git.html"/>
    <id>http://nthung2112.github.io/2018/04/Cach-phan-nhanh-va-chia-viec-trong-nhom-voi-Git.html</id>
    <published>2018-04-26T14:50:00.000Z</published>
    <updated>2018-04-30T08:06:42.792Z</updated>
    
    <content type="html"><![CDATA[<p>Bạn vốn làm việc một mình một cõi, “thầu nguyên con” dự án. Dù phải code sấp mặt nhưng cuộc đời vẫn thật êm xuôi: tốc độ thần thánh 500 dòng/giờ, commit code mới pặc pặc vào master, cuối ngày chỉ việc git push, tắt máy, rồi dắt gấu đi nhậu (hoặc lội suối băng đèo về nhà thay tã cho con).</p><p>Ngờ đâu sếp (hoặc co-founder) xót thương bạn vất vả, bèn tuyển ngay 2 em đào nhí vào trợ giúp. Và mọi chuyện bắt đầu phức tạp từ đây: code trong team bị chồng chéo và xung đột liên tục, branch master đang thẳng thớm đẹp xinh bỗng phân nhánh như điên, tốc độ code của bạn giảm trong khi tốc độ chửi thề ngày một tăng nhanh. Bạn không còn thời giờ dắt gấu đi nhậu, cũng không thể lội kịp về nhà thay tã cho con nữa. Cuộc đời bế tắc.</p><a id="more"></a><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524414315/git-merge-hell-smaller_lxhizg.png" alt="Nhìn hình này bạn có thấy quen không (nguồn: Xebia.com)?"></p><p>Thôi đừng vội lật bàn quýnh cả sếp lẫn đào. Hãy thử làm theo một số quy ước sau đây, đảm bảo team dev nho nhỏ xinh xinh của bạn sẽ không còn “giẫm chân” nhau nữa. Công việc xuôi buồm mát mái, tình đồng nghiệp sẽ lại thương mến thương nè.</p><h3 id="Vay-van-de-chinh-o-day-la-gi"><a href="#Vay-van-de-chinh-o-day-la-gi" class="headerlink" title="Vậy, vấn đề chính ở đây là gì?"></a>Vậy, vấn đề chính ở đây là gì?</h3><p>Không có gì nghiêm trọng cả, chỉ là chúng ta chưa có một quy ước phân chia nhánh (branch) hợp lý thôi. So với các chương trình quản lý phiên bản khác như SVN, khả năng phân nhánh của Git phải nói là siêu nhẹ và cực kì dễ dàng. Do đó, bạn có thể chia dự án thành 2 nhánh chính:</p><ul><li>master</li><li>dev</li></ul><p>Nhánh master sẽ là nơi chứa phần code <strong>ổn định nhất</strong>, sẵn sàng để triển khai bất cứ lúc nào. Trong khi đó, nhánh dev ban đầu được tách ra từ master, và sẽ chứa phần code <strong>mới nhất</strong> được phát triển.</p><blockquote><p><strong>Nói nhỏ:</strong> Một số tài liệu sẽ đặt tên nhánh tách ra là develop. Tùy bạn chọn tên gì cũng được, nhưng theo Ehkoo thì gõ dev nhanh hơn gõ develop :p</p></blockquote><p><strong>Nhắc bài chút xíu</strong><br>Để tạo nhánh mới trong Git, bạn dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;tên nhánh mới&gt; [nhánh gốc]</span><br></pre></td></tr></table></figure><p>Chẳng hạn, để tạo nhánh dev từ master, bạn gõ git checkout -b dev master. Nếu không cung cấp tham số [nhánh gốc], nhánh mới tạo sẽ dựa trên nhánh hiện tại bạn đang ở. Để xem nhánh hiện tại là nhánh nào, bạn có thể dùng lệnh git branch.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">  auth</span><br><span class="line">* auth-session</span><br><span class="line">  dev</span><br><span class="line">  graphql</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>Trong ví dụ trên thì nhánh hiện tại chính là auth-session.</p><h3 id="Phan-chia-cong-viec"><a href="#Phan-chia-cong-viec" class="headerlink" title="Phân chia công việc"></a>Phân chia công việc</h3><p>Mỗi khi phát triển tính năng mới, bạn sẽ tạo một nhánh từ dev.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b login dev</span><br></pre></td></tr></table></figure><blockquote><p><strong>Đặt tên nhánh là gì đây?</strong><br>Tùy bạn thôi. Một số tài liệu sẽ khuyến khích bạn dùng tiền tố feature/&lt;tên tính năng&gt; để dễ phân biệt. Nhưng theo kinh nghiệm của Ehkoo, ngoài nhánh master, dev, và các nhánh fix-xxx, thì tất cả các nhánh còn lại đều có thể ngầm hiểu là nhánh chức năng.</p></blockquote><p>Nhánh này dưới quyền cai quản của bạn, nên mặc sức muốn làm gì thì làm nhé. Hãy commit thường xuyên, dù chỉ là những thay đổi nhỏ nhất. Cũng đừng ngần ngại rằng commit nhỏ sẽ khiến git log khó theo dõi. Chúng ta sẽ có cách xử lý chúng sau.</p><blockquote><p><strong>Câu hỏi: Ê, lỡ như có hai hay nhiều người cùng làm chung một tính năng thì sao?</strong><br>Nếu vậy, bạn có thể tiếp tục chia nhỏ hơn nữa, để đảm bảo mỗi người làm việc trên một nhánh độc lập. Cũng theo kinh nghiệm riêng của Ehkoo, thì một tính năng _to_ sẽ có nhiều nhất là 2-3 người cùng phát triển. Nếu vượt quá con số này, thì nên xem lại định nghĩa và cách phân chia việc cho tính năng đó.</p></blockquote><h3 id="Chuan-bi-merge-vao-dev"><a href="#Chuan-bi-merge-vao-dev" class="headerlink" title="Chuẩn bị merge vào dev"></a>Chuẩn bị merge vào dev</h3><p>Sau khi code hoàn tất và tất cả unit tests đã chạy thành công, giờ là lúc bạn merge/gửi code để review tính năng mới vào dev. Thông thường, sẽ có 2 trường hợp xảy ra:</p><p><strong>Trường hợp 1: Không có gì mới trong dev</strong></p><p>Giả sử lúc đó Git history của dự án giống như thế này:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/31/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Như bạn thấy, nhánh login màu vàng được rẽ ra từ nhánh dev màu xanh, và trong nhánh dev không có code gì mới. Đây là trường hợp lý tưởng, đảm bảo khi merge vào dev chúng ta sẽ không bị xung đột code.</p><p><strong>Trường hợp 2: Có commits mới trong nhánh dev</strong></p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/30/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Trong trường hợp này, branch dev (màu xanh) đang có 2 commits phía trước branch login (màu vàng). Nếu trong 2 commits đó có chứa thay đổi liên quan đến dev, chẳng hạn như package.json, thì khả năng cao là sẽ xảy ra xung đột khi merge trực tiếp login vào. Mà dù có may mắn không xảy ra xung đột code, thì merge vào cũng sẽ làm history xấu đi.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/33/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Do đó, chúng ta sẽ cần sửa lại history của nhánh login bằng cách dùng git rebase.</p><h4 id="git-rebase-la-gi"><a href="#git-rebase-la-gi" class="headerlink" title="git rebase là gì?"></a>git rebase là gì?</h4><p>git rebase sẽ đem những commits bên trong nhánh login và áp dụng lại vào sau commit mới nhất trong nhánh dev. Cú pháp của lệnh này là:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;tên nhánh muốn áp dụng lại&gt;</span><br></pre></td></tr></table></figure><p>Trong trường hợp hiện tại, chúng ta sẽ chạy những lệnh sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Cập nhật repo hiện tại, đồng thời lấy về commits mới nhất của `dev`</span><br><span class="line">git pull</span><br><span class="line"># Chuyển qua nhánh `login`, có thể bỏ qua bước này nếu bạn chắc chắn</span><br><span class="line"># mình đang ở `login`</span><br><span class="line">git checkout login</span><br><span class="line"># Tiến hành rebase</span><br><span class="line">git rebase dev</span><br></pre></td></tr></table></figure><p>Nếu xảy ra xung đột code, bạn có thể phát hiện và giải quyết chúng sớm. Nguyên tắc chung là không sửa code của người khác, và chỉ kết hợp thêm những gì bạn làm. Việc thực hiện rebase tại nhánh chức năng do bạn phụ trách giúp giảm thiểu khả năng mất code, vì bạn là người hiểu rõ nhất phần code bạn viết.</p><p>Sau khi giải quyết hết các xung đột trong code, bạn chạy git rebase –continue để tiếp tục tiến trình rebase. Bạn cũng có thể chạy git rebase –abort để hủy bỏ rebase và đưa nhánh login về lại trạng thái ban đầu.</p><blockquote><p><strong>Mách nhỏ:</strong><br>Một cách giúp cho việc giải quyết xung đột trong code dễ dàng hơn là dùng git mergetool. Có rất nhiều công cụ hỗ trợ, và <a href="http://meldmerge.org/" target="_blank" rel="noopener">Meld</a> là một trong số đó.</p></blockquote><p>Nếu chưa quen rebase, bạn có thể tạo một branch mới từ login, ví dụ: git checkout -b test login, và tiến hành rebase trên branch này. Sau khi chắc chắn là mọi thứ ổn thỏa, bạn có thể quay lại và tiến hành rebase cho login.</p><p>Khi rebase xong, mong là history của bạn trông sẽ giống như thế này:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/32/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Bạn thấy quen không? Chính là trường hợp 1 đã nói ở trên đó.</p><h4 id="rebase-interactively"><a href="#rebase-interactively" class="headerlink" title="rebase interactively"></a>rebase interactively</h4><p>Ở phần trên, chúng ta có băn khoăn là commit thường xuyên dễ tạo ra nhiều commit nhỏ đôi khi không cần thiết. Bạn có thể dùng git rebase để dọn dẹp chúng bằng cách thêm tham số -i (interactively) như sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Chắc chắn rằng bạn đang ở nhánh `login`</span><br><span class="line">git checkout login</span><br><span class="line"># Rebase lên dev interactively</span><br><span class="line">git rebase dev -i</span><br></pre></td></tr></table></figure><p>Bạn sẽ được chuyển đến một giao diện tương tự như bên dưới.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pick ff80e85 A way to organize routes per module</span><br><span class="line">pick 67cf18d Try Netlify Functions</span><br><span class="line">pick 5546901 Add Dashboard view</span><br><span class="line">pick 2a66ae3 Change layout</span><br><span class="line">pick 58755b4 Add Books module, 404 page.</span><br><span class="line">pick fd79cb9 Refactor. Reduce inline styling.</span><br><span class="line">pick c671f60 Restyling 404 page.</span><br><span class="line">pick 33ef874 Basic layout for book management page.</span><br><span class="line">pick 49c423a Clean up UI a bit</span><br><span class="line">pick 3aa2840 Init</span><br></pre></td></tr></table></figure><p>Theo lý thuyết, rebase sẽ đem từng commit và áp dụng lại theo thứ tự từ trên xuống dưới. Bởi vậy, bạn có thể thoải mái sắp xếp lại thứ tự của các commits trên. Bạn để ý lệnh pick ở phía trước mỗi commit. Lệnh này sẽ báo cho git biết hành động bạn muốn làm với commit, trong trường hợp này là áp dụng lại commit. Ngoài pick (p), chúng ta còn có:</p><ul><li>reword (r): áp dụng lại commit, và sửa commit message</li><li>edit (e): áp dụng commit, nhưng dừng quá trình rebase lại để sửa code</li><li>squash (s): kết hợp commit hiện tại vào commit trước nó</li><li>fixup (f): giống như squash nhưng bỏ đi commit message</li><li>exec (x): chạy một lệnh shell nào đó</li><li>drop (d): bỏ, không sử dụng commit này</li></ul><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524470951/Peek_2018-04-23_11-06_zkqjpt.gif" alt="Bạn có thể dùng các chữ viết tắt cho các commands"></p><p>Bằng cách dùng rebase interactively, chúng ta có thêm nhiều quyền để quản lý và sửa đổi commits theo ý mình, làm cho history sạch đẹp hơn.</p><h3 id="Merge-vao-dev"><a href="#Merge-vao-dev" class="headerlink" title="Merge vào dev"></a>Merge vào dev</h3><p>Sau khi dọn dẹp nhánh login sạch đẹp, chúng ta có thể merge nhánh này vào dev. Thông thường, bạn – dev cứng nhất team – sẽ là người tiến hành kiểm tra và merge. Bạn có thể chọn hai cách tiếp cận:</p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>Bạn có thể merge trực tiếp vào dev như thế này:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Chuyển qua nhánh `dev`</span><br><span class="line">git checkout dev</span><br><span class="line"># Merge `login` vào `dev`</span><br><span class="line">git merge login</span><br></pre></td></tr></table></figure><p>Kết quả sẽ là:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/34/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Như bạn thấy, một commit mới được tạo ra, giúp bạn dễ dàng nhận biết thời điểm nhánh login được merge vào. Cách thức này gọi là merge fast-forward. Khi dự án phát triển dần theo thời gian, history của dev sẽ như thế này.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0agufwbv/2/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Bên cạnh đó, chúng ta cũng có cách merge non-fast-forward:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge login --no-ff</span><br></pre></td></tr></table></figure><p>Và đây là kết quả:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/r7rp7sp5/35/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Tất cả commits của login đã được kết hợp vào dev. Boom! login biến mất khỏi thế gian như chưa hề tồn tại. SAD!</p><p>Lợi ích dễ thấy nhất của merge non-fast-forward là giúp cho history của bạn thẳng thớm gọn gàng, còn bất lợi là bạn không phân biệt được commits nào là của nhánh tính năng, cũng như thời điểm merge diễn ra. Trong trường hợp nhánh tính năng có quá nhiều commits nhỏ và dư thừa, chẳng hạn như những commits sửa lỗi chính tả, cập nhật thư viện…, history của bạn sẽ bị nhiễu.</p><h4 id="rebase-squash-va-merge"><a href="#rebase-squash-va-merge" class="headerlink" title="rebase, squash và merge"></a>rebase, squash và merge</h4><p>Ngoài cách merge các commits của nhánh tính năng vào dev, bạn có thể rebase và squash tất cả commits lại làm một, sau đó tiến hành merge. Cách làm này giúp cho dev luôn ở trạng thái gọn gàng nhất, không chứa commit dư thừa. Trong trường hợp lý tưởng, history của dev sẽ giống như sau:</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0agufwbv/5/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Để cách làm này phát huy tối đa hiệu quả, yêu cầu commit message phải được viết thật rõ ràng và chi tiết.</p><h3 id="Merge-vao-master"><a href="#Merge-vao-master" class="headerlink" title="Merge vào master"></a>Merge vào master</h3><p>Yay! Sau một thời gian quằn quại, cuối cùng team của bạn đã ra được sản phẩm tương đối ổn. Giờ là lúc merge vào master và triển khai lên server.</p><p>Lúc này, cũng như khi merge vào dev, bạn có thể chọn merge (fast-forward hoặc non-fast-forward) hay rebase, squash và merge, nhưng theo kinh nghiệm của Ehkoo, merge –no-ff sẽ là lựa chọn tốt nhất, giúp cho master và dev luôn song song với nhau.</p><h3 id="Hotfix"><a href="#Hotfix" class="headerlink" title="Hotfix"></a>Hotfix</h3><p>Hôm nay, thứ 6, ngày 1X. Bạn chạy npm run build rồi rsync code ở master lên server. Mọi thứ hoàn toàn bình thường. Bạn vào website, click vài cái. “Ngon, chạy rồi”, bạn thầm nghĩ, “đi nhậu thoy!” Nhưng vừa vươn vai định gọi điện cho gấu, thì “ó e ò e”, chuông điện thoại reng, số máy của sếp. “Hí hí, chắc được thưởng nóng chăng?” Bạn bắt máy, và nghe giọng sếp âu yếm GẦM ở đầu dây: “LỖI RỒI MÁÁÁ!!!”</p><p>Xin đừng trụy tim. Hãy hít một hơi thật sâu, rồi bình tĩnh tạo một branch mới từ master, fix-xxx chẳng hạn. Nhờ lắng nghe tiếng sếp gầm, bạn đã mau chóng mò ra lỗi trong đống code (vì bạn là dev cứng mà hihi). Bạn khẽ rủa thầm ku đào nhí viết code không kĩ, tự rủa nhẹ bản thân vì review sót. Nhưng thôi kệ, fix nhanh rồi còn về, kẻo gấu xé xác T^T.</p><p>Bạn bèn merge –no-ff nhánh fix-xxx vào cả hai nhánh master và dev. Bằng cách này, phần sửa lỗi sẽ xuất hiện ở cả hai branches, giúp history không bị rẽ nhánh bất ngờ.</p><p>Bạn push, và chuông điện thoại lại vang lên…</p><h3 id="Vai-van-de-linh-tinh-khac"><a href="#Vai-van-de-linh-tinh-khac" class="headerlink" title="Vài vấn đề linh tinh khác"></a>Vài vấn đề linh tinh khác</h3><h4 id="Co-can-nhanh-staging-khong"><a href="#Co-can-nhanh-staging-khong" class="headerlink" title="Có cần nhánh staging không?"></a>Có cần nhánh staging không?</h4><p>Trong một số dự án, ngoài dev, còn có một đội ngũ “thần bí” được gọi là QA/QC. Họ được sinh ra trong team là để bới lỗi của anh em nhà dev, nên quan hệ đôi bên không được tình thương mến thương cho lắm. Dầu vậy, họ vẫn cần một nhánh riêng có tên gọi staging. Nhánh này sẽ chứa phần code ở giữa master và dev. staging được tách ra từ dev, có nhiều tính năng hơn master, và tương đối ổn định để có thể merge vào master.</p><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/0agufwbv/6/embedded/result/light" frameborder="0" allowfullscreen></iframe><p>Tùy vào tình hình cụ thể của team mà bạn quyết định có cần staging hay không.</p><h4 id="Viet-commit-message-nhu-the-nao-cho-chuan"><a href="#Viet-commit-message-nhu-the-nao-cho-chuan" class="headerlink" title="Viết commit message như thế nào cho chuẩn?"></a>Viết commit message như thế nào cho chuẩn?</h4><p>Nếu bạn theo chuẩn rebase, squash và merge thì chuyện viết commit message tốt rất quan trọng, vì nó sẽ là tài liệu để mô tả toàn bộ một tính năng. Nhưng nên viết thế nào? Có một vài gợi ý cho bạn đây:</p><ul><li>Dòng đầu tiên không dài quá 80 chữ, luôn bắt đầu bằng động từ ở thì hiện tại, ngắn gọn súc tích, ví dụ: <em>Add module Authentication</em>. Bạn có thể chọn thêm tiền tố nếu cần thiết, chẳng hạn: <em>Feature: Add module Authentication</em> hay <em>Fix: unable to get location params from URL</em></li><li>Bỏ trống hai dòng</li><li>Sau đó mô tả chi tiết về tính năng đang làm, những điểm cần lưu ý, phần nào của tính năng cần được cải thiện…</li><li>Khuyến khích bạn kèm theo chữ ký <em>signature</em> khi commit bằng git commit -s</li></ul><p>Một ví dụ</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Feature: Add module Authentication</span><br><span class="line"></span><br><span class="line">Signed-off-by: Long Dep Trai &lt;long@ehkoo.com&gt;</span><br><span class="line"></span><br><span class="line">This module allows users to register/login into our website using</span><br><span class="line">AWS Cognito account. Added routes:</span><br><span class="line"></span><br><span class="line">* /auth/register</span><br><span class="line">* /auth/login</span><br><span class="line"></span><br><span class="line">Users after registration will receive a SMS to confirm their account.</span><br><span class="line"></span><br><span class="line">TODO:</span><br><span class="line"></span><br><span class="line">* Implement social identities</span><br><span class="line">* Add Logout feature</span><br><span class="line">* Add Forgot password feature</span><br></pre></td></tr></table></figure><blockquote><p><strong>Tiếng Anh hay tiếng Việt?</strong><br>Tùy thuộc vào team của bạn, nhưng phải thống nhất trong toàn dự án, và viết tiếng Việt thì nhớ đừng sai chính tả kẻo bị công an bắt nhé.</p></blockquote><h4 id="Co-nen-tag-version-hay-khong"><a href="#Co-nen-tag-version-hay-khong" class="headerlink" title="Có nên tag version hay không?"></a>Có nên tag version hay không?</h4><p>Câu trả lời là <em>HÊN XUI</em>, tùy tính chất từng team. Nếu tần suất triển khai code từ master của team không cao, khoảng vài tháng/lần thì tag version là cách tốt để theo dõi những thay đổi. Hoặc nếu bạn đang xây dựng lib hoặc làm việc open source.</p><p>Còn nếu team bạn theo chuẩn “move fast, break things”, thì có lẽ không cần tag version đâu. Thêm nữa, để tag version phát huy hiệu quả tối đa, thì <em>CHANGELOG</em> cần phải được viết kỹ càng. Đồng thời, đừng quên tag version theo <a href="https://semver.org/" target="_blank" rel="noopener">semver</a> nhé.</p><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524474052/tumblr_lc63ingGof1qz6pqio1_500_mybavi.png" alt="Already broken"></p><h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h3><p>Chúng ta có thể tóm tắt bài này lại như sau:</p><ul><li>Dự án được chia thành nhiều nhánh, bao gồm master, dev và có thể có staging</li><li>Các nhánh tính năng được chia ra từ dev, phát triển độc lập, được rebase trước khi merge lại vào dev</li><li>Rebase có thể thay đổi một chút history, hoặc squash lại thành một commit duy nhất</li><li>Merge có thể là fast-forward hoặc non-fast-forward</li><li>dev sẽ được merge vào master mỗi khi triển khai. Trường hợp có staging, dev sẽ được merge vào staging, và staging sẽ được merge vào master.</li><li>Các nhánh hotfix sẽ được chia ra từ master, sau đó merge –no-ff vào master và dev</li></ul><p>Dĩ nhiên bài viết này chỉ mang tính tham khảo, vì mỗi team mỗi công ty sẽ có những cách làm riêng. Tuy nhiên, nếu bạn không may lâm vào cảnh trái ngang như ở đầu bài, thì đây là một workflow rất nên nghiên cứu và áp dụng. Mong rằng trong tương lai, dự án của bạn sẽ không trở thành “kim tự tháp” như hình dưới đây.</p><p><img src="https://res.cloudinary.com/duqeezi8j/image/upload/v1524414465/11406260_10204684523099229_6956873399787391385_o_mscrhf.jpg" alt="The pyramid of doom"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bạn vốn làm việc một mình một cõi, “thầu nguyên con” dự án. Dù phải code sấp mặt nhưng cuộc đời vẫn thật êm xuôi: tốc độ thần thánh 500 dòng/giờ, commit code mới pặc pặc vào master, cuối ngày chỉ việc git push, tắt máy, rồi dắt gấu đi nhậu (hoặc lội suối băng đèo về nhà thay tã cho con).&lt;/p&gt;
&lt;p&gt;Ngờ đâu sếp (hoặc co-founder) xót thương bạn vất vả, bèn tuyển ngay 2 em đào nhí vào trợ giúp. Và mọi chuyện bắt đầu phức tạp từ đây: code trong team bị chồng chéo và xung đột liên tục, branch master đang thẳng thớm đẹp xinh bỗng phân nhánh như điên, tốc độ code của bạn giảm trong khi tốc độ chửi thề ngày một tăng nhanh. Bạn không còn thời giờ dắt gấu đi nhậu, cũng không thể lội kịp về nhà thay tã cho con nữa. Cuộc đời bế tắc.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://nthung2112.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Tìm hiểu về một số khái niệm trong Git</title>
    <link href="http://nthung2112.github.io/2018/04/Tim-hieu-ve-mot-so-khai-niem-trong-Git.html"/>
    <id>http://nthung2112.github.io/2018/04/Tim-hieu-ve-mot-so-khai-niem-trong-Git.html</id>
    <published>2018-04-26T07:39:00.000Z</published>
    <updated>2018-04-30T08:06:42.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h3><p>Đối với các lập trình viên, việc sử dụng công cụ quản lý phiên bản <strong>git</strong> là điều không thể thiểu trong công việc hằng ngày và là một trong những kĩ năng cơ bản nhất mà ai cũng cần có được. <strong>Git</strong> có rất nhiều các khái niệm khác nhau nên nếu bạn chỉ là người mới làm quen với <strong>git</strong> thì đây chính là bài viết dành cho bạn. Bài viết sẽ giải thích tại sao chúng ta nên sử dụng <strong>git</strong> cũng như một số khái niệm thường gặp khi sử dụng <strong>git</strong>.</p><a id="more"></a><h3 id="Tai-sao-can-su-dung-git"><a href="#Tai-sao-can-su-dung-git" class="headerlink" title="Tại sao cần sử dụng git?"></a>Tại sao cần sử dụng git?</h3><ul><li>Thử tưởng tượng khi làm một project và bạn muốn bổ sung hoặc làm thêm tính năng mới cho project của mình. Tuy nhiên để đảm bảo rằng bạn có thể quay lại sử dụng phần code trước đó bạn đã code trong trường hợp tính năng mới gây lỗi và bạn không nhớ phải xóa những gì để khôi phục lại trạng thái code trước đó thì bạn cần phải thực hiện copy toàn bộ project đó và paste ra đâu đó để lưu trữ rồi mới bắt đầu thực hiện code tính năng mới. Như vậy mỗi lần muốn làm tính năng mới, bạn phải lặp đi lặp lại thao tác trên và rất mất thời gian. Sử dụng <strong>Git</strong> có thể giải quyết vấn đề này chỉ trong 1 vài dòng lệnh</li><li>Nếu project bạn đang làm có 2 thành viên cùng làm, mỗi lần một người hoàn thành một tính năng lại phải gửi toàn bộ source code đó thông qua usb, google driver hoặc công cụ lưu trữ online nào đó cho thành viên còn lại có thể download về và paste đè lại lên phần code của người đó. Công việc này cũng mất rất nhiều thời gian và tồn tại nhiều rủi rõ khi paste code chồng lên nhau. Để giải quyết vấn đề này, ta cũng có thể sử dụng <strong>git</strong> và một <strong>remote repository</strong></li></ul><h3 id="Cac-khai-niem-co-ban-trong-git"><a href="#Cac-khai-niem-co-ban-trong-git" class="headerlink" title="Các khái niệm cơ bản trong git"></a>Các khái niệm cơ bản trong git</h3><h4 id="1-Repository-la-gi"><a href="#1-Repository-la-gi" class="headerlink" title="1. Repository là gì?"></a>1. Repository là gì?</h4><ul><li>Khi sử dụng git, lệnh đầu tiên mà chúng ta thường gõ:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><ul><li>Lệnh này sẽ tạo ra một thư mục ẩn có tên .git và đây chính là repository (hay kho chứa). Còn phần code hay hay thư mục của project nằm cùng với thư mục .git được gọi là Working Directory. Git sử dụng repository này để lưu trữ, giám sát toàn bộ thông tin về các trạng thái của và bất cứ thay đổi nào với project lúc này sẽ được git lưu trữ lại.</li><li>Có hai loại repository gồm local repository - là repository nằm trên chính máy tính của chúng ta và remote repository - là repository nằm trên một máy chủ từ xa được cung cấp bởi các nhà phân phối như <a href="https://github.com/" target="_blank" rel="noopener">Github</a>, <a href="https://gitlab.com/" target="_blank" rel="noopener">Gitlab</a> hay <a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a>, …</li></ul><h4 id="2-Branch-la-gi"><a href="#2-Branch-la-gi" class="headerlink" title="2. Branch là gì?"></a>2. Branch là gì?</h4><ul><li>Như đã nói ở trên về vấn đề khi ta muốn thêm một tính năng mới mà đảm bảo vẫn có thể dễ dàng khôi phục lại trạng thái trước đó thì ta có thể sử tạo 1 branch mới nhau sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><ul><li>Branch mặc định là master</li><li>Branch mới được tạo ra sẽ chứa toàn bộ trạng thái và những thay đổi đã thực hiện trên project trước khi được tạo</li><li>Với mỗi repository ta có thể tạo nhiều branch khác nhau và các nhánh này là độc lập với nhau nên khi ta có thay đổi đối với project trên branch này sẽ không ảnh hưởng đến các branch khác</li><li>Khi tính năng được ta thử nghiệm trên nhánh mới hoàn thiện và đã được kiểm tra đầy đủ, ta có thể tiến hành hợp nhất 2 nhánh với nhau (đưa những thay đổi của nhánh này gộp vào với nhánh khác)</li><li>Có hai loại branch là local branch - là branch nằm trên máy tính của chúng ta và remote branch - là branch nằm trên máy chủ từ xa</li></ul><h4 id="3-Lam-the-nao-de-xoa-mot-branch"><a href="#3-Lam-the-nao-de-xoa-mot-branch" class="headerlink" title="3. Làm thế nào để xóa một branch?"></a>3. Làm thế nào để xóa một branch?</h4><ul><li><p>Trong trường hợp branch chúng ta tạo ra trước đó không còn cần thiết nữa, ta có thể tiến hành xóa chúng đi bằng cách sử dụng các lệnh như sau:</p><ul><li>Đối với local branch:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure></li></ul><p>Với cách xóa trên, nếu branch cần xóa chưa được gộp thay đổi với branch khác sẽ lập tức báo lỗi vào yêu cầu gộp với branch khác trước khi thực hiện xóa bằng lệnh này</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>Với cách xóa này thì branch được chỉ định sẽ lập tức bị xóa kể cả trong trường hợp nó chưa được gộp với branch khác</p><ul><li>Đối với remote branch:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --delete &lt;tên-remote&gt; &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure></li></ul><p>hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;tên-remote&gt; --delete &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure></li></ul><p><em>Lưu ý: đối với cả local branch và remote branch ta có thể tiến hành xóa đồng thời nhiều branch bằng cách liệt kê tên các branch cần xóa liền nối tiếp nhau và cách nhau một khoảng trắng</em></p><h4 id="4-Push-local-branch-len-remote-server-voi-mot-ten-khac"><a href="#4-Push-local-branch-len-remote-server-voi-mot-ten-khac" class="headerlink" title="4. Push local branch lên remote server với một tên khác"></a>4. Push local branch lên remote server với một tên khác</h4><ul><li>Thông thường khi chúng ta tiến hành push một local branch lên remote server thì tên branch mặc định của remote branch lúc này sẽ là tên của local branch, lệnh push như sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;tên-remote&gt; &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><ul><li>Nhưng nếu ta muốn đổi tên của remote branch đó trên server thì ta cần sử dụng lệnh như sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;tên-remote&gt; &lt;tên-branch&gt;:&lt;tên-remote-branch&gt;</span><br></pre></td></tr></table></figure><h4 id="5-Phan-biet-rebase-va-merge"><a href="#5-Phan-biet-rebase-va-merge" class="headerlink" title="5. Phân biệt rebase và merge"></a>5. Phân biệt rebase và merge</h4><ul><li>Khi muốn tiến hành gộp 2 branch lại với nhau, ta có thể sử dụng một trong hai lệnh sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase &lt;tên-branch&gt;</span><br></pre></td></tr></table></figure><p>Sẽ tiến hành gộp branch hiện tại với branch mà ta lựa chọn. Tuy có cùng chức năng là gộp nhánh nhưng cách hoạt động của merge và rebase lại khác với nhau, ta có thể so sánh sự khác biệt thông đó như sau:</p><ul><li>Giả sử ta có 2 branch cần gộp với nhau như hình sau:<br><img src="https://viblo.asia/uploads/2916cb93-a062-4546-9414-16781503b1c1.png" alt=""></li></ul><hr><ul><li>Đối với sử dụng merge kết quả thu được sẽ như sau:<br><img src="https://viblo.asia/uploads/8da09449-44e1-49e6-902e-0648cdcb2977.png" alt=""><br> Việc sử dụng merge sẽ tạo ra một commit mới là kết hợp từ 2 commit cuối cùng của 2 nhánh cần gộp vào với nhau Log commit sẽ không bị thay đổi và thứ tự các commit sẽ được sắp xếp theo thời gian tạo commit</li></ul><hr><ul><li>Đối với sử dụng rebase kết quả thu được sẽ như sau:<br><img src="https://viblo.asia/uploads/e26ee7ad-e024-4dda-b500-261cfe7b9dd9.png" alt=""><br> Rebase sẽ đưa toàn bộ branch Feature lên trên ‘đầu’ branch master Làm thay đổi lịch sử commit</li></ul><h4 id="6-Khac-nhau-giua-fetch-va-pull"><a href="#6-Khac-nhau-giua-fetch-va-pull" class="headerlink" title="6. Khác nhau giữa fetch và pull"></a>6. Khác nhau giữa fetch và pull</h4><ul><li>Khi muốn cập nhật các thay đổi từ trên remote server về local repository ta cũng có hai cách để thực hiện điều này như sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;tên-remote&gt; &lt;tên-remote-branch&gt;</span><br></pre></td></tr></table></figure><p>Lệnh này sẽ tiến hành kéo các thay đổi từ trên remote server về local của chúng ta đồng thời tiến hành merge các thay đổi đó ngay</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;tên-remote&gt; &lt;tên-remote-branch&gt;</span><br></pre></td></tr></table></figure><p>Đối với lệnh fetch, các thay đổi từ remote server sẽ được kéo về máy nhưng không tự động merge vào source code của chúng ta mà chúng ta có thể thực hiện việc này sau khi đã review lại các thay đổi đó trước khi tiến hành merge. Các thay đổi này được đẩy sang một branch khác và ta có thể sử dụng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure><p>Để xem được các branch sau khi fetch đồng thời cũng có thể checkout sang branch đó để xem các thay đổi.</p><ul><li>Có thể hiểu đơn giản lại sự khác nhau giữa fetch và pull như sau:<ul><li>git pull = git fetch + git merge</li></ul></li></ul><h4 id="7-The-nao-la-git-stash"><a href="#7-The-nao-la-git-stash" class="headerlink" title="7. Thế nào là git stash?"></a>7. Thế nào là git stash?</h4><ul><li>Trong quá trình chúng làm việc, có những lúc chúng ta đang code dở một chức năng nào đó nhưng bất ngờ ở một chức năng trên branch khác đang có lỗi cần phải sửa gấp và chúng ta muốn lưu lại thay đổi đã làm trên nhánh hiện tại nhưng không muốn thực hiện commit dư thừa thì git stash là lệnh mà chúng ta có thể dùng để giải quyết vấn đề này.</li><li>git stash cho bạn khả năng lưu lại trạng những thay đổi mà bạn đã tạo ra mà không cần thiết phải commit nó giúp bạn có thể dễ dàng chuyển sang nhánh khác làm việc và sau đó quay lại và tiếp tục những gì bạn đang làm ở nhánh đó.</li><li><p>Các lệnh liên quan đến git stash</p><ul><li><strong>Để lưu được những thay đổi mà không cần commit nó, ta cần thực hiện những lệnh sau</strong>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></li></ul><p>Để đưa toàn bộ các thay đổi đó vào trạng tháy staged, sau đó sử dụng lệnh sau để lưu thay đổi đó mà không cần commit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash # hoặc &quot;git stash save&quot;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Để xem lại các thay đổi đã lưu, ta có thể dùng các lệnh sau</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on &lt;branch-name&gt;: &lt;lastest commit&gt;</span><br><span class="line">stash@&#123;1&#125;: WIP on &lt;branch-name&gt;: &lt;lastest commit&gt;</span><br><span class="line">stash@&#123;2&#125;: WIP on &lt;branch-name&gt;: &lt;lastest commit&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>Để xem lại danh sách các lần đã lưu, trong trường hợp muốn xem nội dung thay đổi thì ta gõ lệnh sau</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list -p</span><br></pre></td></tr></table></figure></li><li><p><strong>Hoặc nếu muốn xem cụ thể nội dung thay đổi của một lần lưu cụ thể, ta dùng lệnh</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash show &quot;stash@&#123;n&#125;&quot;</span><br><span class="line">// với n là lần lưu tương ứng trong danh sách</span><br><span class="line">// Lưu ý phần stash@&#123;n&#125; phải nằm trong cặp ngoặc đôi</span><br></pre></td></tr></table></figure></li><li><p><strong>Để lấy lại thay đổi được lưu trong danh sách trên ta dùng lệnh</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply &quot;stash@&#123;n&#125;&quot;</span><br></pre></td></tr></table></figure><p>Hoặc lấy thay đổi gần nhất và xóa lần lưu đó</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure></li><li><p><strong>Để xóa danh sách các thay đổi đã lưu, ta dùng lệnh</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash drop &quot;stash@&#123;n&#125;&quot;</span><br></pre></td></tr></table></figure><p>Để drop một lần lưu chỉ định hoặc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash clear</span><br></pre></td></tr></table></figure><p>Để xóa toàn bộ những lần đã lưu</p></li></ul></li></ul><h4 id="8-Lam-the-nao-de-xoa-bo-trang-thai-vai-commit-gan-day"><a href="#8-Lam-the-nao-de-xoa-bo-trang-thai-vai-commit-gan-day" class="headerlink" title="8. Làm thể nào để xóa bỏ trạng thài vài commit gần đây?"></a>8. Làm thể nào để xóa bỏ trạng thài vài commit gần đây?</h4><p>Để thưc hiện công việc này chúng ta có thể sử dụng 1 trong 2 lệnh sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Lệnh này sẽ tạo ra một commit mới đảo ngược lại những thay đổi trong commit được chỉ định.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Keehnh này sẽ xóa toàn bộ các commit trước đó và đưa branch hiện tại trở về trạng thái của commit-hash-code đã chọn</p><h4 id="9-Gop-mot-vai-commit-thanh-mot-commit-duy-nhat"><a href="#9-Gop-mot-vai-commit-thanh-mot-commit-duy-nhat" class="headerlink" title="9. Gộp một vài commit thành một commit duy nhất?"></a>9. Gộp một vài commit thành một commit duy nhất?</h4><ul><li>Đôi khi trong lúc làm việc, ta thường tạo ra một số commit dư thừa và sau đó muốn gộp chung số commit đó lại với một message rõ ràng hơn về mục đích chung của toàn bộ các commit đó. Để làm được điểu này, ta có thể sử dụng những lệnh sau:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Với commit-hash-code là hash code của commit cuối cùng của nhóm cần gộp hoặc:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~&lt;index&gt;</span><br></pre></td></tr></table></figure><p>Với index là số lượng commit cần gồm so với commit cuối cùng. Ngoài ra khi thực hiện việc rebase để gộp commit, ta có các lựa chọn khác như pick|squash|fixup để quyết định kiểu gộp. Cuối cùng ta cũng có thể dùng lệnh sau để gộp commit:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft &lt;commit-hash-code&gt;</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m&quot;New commit&quot;</span><br></pre></td></tr></table></figure><p>Với commit-hash-code là mã hash của commit trước đó mà ta muốn gộp lại từ commit cuối cùng đến commit chỉ định.</p><h4 id="10-Phan-biet-giua-git-reset-reset-–soft-reset-–hard"><a href="#10-Phan-biet-giua-git-reset-reset-–soft-reset-–hard" class="headerlink" title="10. Phân biệt giữa git reset, reset –soft, reset –hard"></a>10. Phân biệt giữa git reset, reset –soft, reset –hard</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Sẽ di chuyển HEAD về phía commit được chỉ định nhưng vẫn giữ nguyên trạng thái thay đổi của các file và đồng thời loại bỏ các file đó khỏi trạng thái staged</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><p>Tương tư như git reset nhưng toàn bộ các fle vẫn giữ được trạng thái staged.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit-hard-code&gt;</span><br></pre></td></tr></table></figure><p>Tương tự như 2 lệnh trên nhưng toàn bộ sự thay đổi của các file sẽ bị loại bỏ hoàn toàn nên hãy chú ý khi dùng lệnh này để tránh rơi vào trường hợp bao nhiêu công sức đổ xuống sông xuống biển<br><img src="https://twemoji.maxcdn.com/2/72x72/1f604.png" alt=""></p><h4 id="The-nao-la-cherry-pick"><a href="#The-nao-la-cherry-pick" class="headerlink" title="Thế nào là cherry-pick?"></a>Thế nào là cherry-pick?</h4><ul><li>Bạn có thể hiểu cherry-pick cũng có một số điểm tương đồng với merge và rebase là lấy thay đổi từ một branch này và gộp vào branch khác. Nhưng điểm khác nhau lớn nhất giữa cherry-pick và merge, rebase là cherry-pick chỉ gộp một commit được chỉ định từ một nhánh khác vào nhánh hiện tại trong khi merge và rebase sẽ gộp toàn bộ các commit lại. Để sử dụng cherry-pick, ta cần xem lại log các commit sau đó lấy mã hash của commit cần được cherry-pick và checkout sang nhánh cần được gộp commit của mã hash kia và thực hiện lệnh:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git cherry-pick &lt;commit-hash-code&gt;</span><br></pre></td></tr></table></figure><ul><li><p>Một hình ảnh minh họa cho cherry-pick:<br><img src="https://viblo.asia/uploads/58fb9676-c97d-4ad8-8431-172c129cdad1.png" alt=""></p><ul><li>Giả sử ta muốn lấy commit C từ branch master và gộp vào branch cherry-pick</li><li><p>Sau khi thực hiện lệnh cherry-pick như đề cập ở trên, đây sẽ là kết quả ta thu được<br><img src="https://viblo.asia/uploads/4db578c2-aa4c-44fa-a6ae-4af4ec1d548c.png" alt=""></p></li><li><p>Như ta có thể thấy commit C từ branch master được gộp vào với branch cherry–pick dưới tên commit là C’</p></li></ul></li></ul><h4 id="Git-flow-la-gi"><a href="#Git-flow-la-gi" class="headerlink" title="Git flow là gì?"></a>Git flow là gì?</h4><ul><li>Git flow là một quy trình làm việc với git được thiết kế bởi Vincent Driessen. Git flow đưa ra một mô hình phân nhánh giúp hỗ trợ việc quản lý các dự án lớn dễ dàng hơn. Sơ đồ tổng quan:<br><img src="https://viblo.asia/uploads/c3f681b2-36bb-4dda-9831-64770c5bdbfb.png" alt=""></li></ul><h5 id="Cac-branch-trong-gitflow"><a href="#Cac-branch-trong-gitflow" class="headerlink" title="Các branch trong gitflow:"></a>Các branch trong gitflow:</h5><ul><li>Master branch: là branch dùng cho sản phẩm chính thức. Đây luôn là branch ổn định nhất và nó chưa lịch sử các lần release của dự án</li><li>Develop branch: là nhánh dùng cho sản phẩm trong quá trình phát triển</li><li>Feature: mỗi tính năng mới cho sẩn phẩm sẽ được tạo và phát triển trên một branch mới với tên quy ước feature/tên_branch. Các <strong>feature</strong> này sẽ tạo ra từ <strong>develop branch</strong> và khi được hoàn thiện sẽ được gộp trở lại với <strong>develop branch</strong> (<em>Lưu ý: các Feature không được phép gộp trực tiếp với master branch</em>)</li><li>Release: khi <strong>develop branch</strong> đã có đủ số tính năng cần thiết để có thể release, ta có thể tạo branch mới với tên quy ước release/tên_version. Branch này sau khi được tạo xong sẽ tiến hành merge nó với đồng thời cả <strong>master branch</strong> và <strong>develop branch</strong></li><li>Hotfix branch: khi sản phẩm trên <strong>master branch</strong> của chúng ta gặp phải trục trặc và cần có bản vá ngay lập tức thì ta sẽ tạo ra <strong>hotfix branch</strong>. Branch này tương tự như <strong>release branch</strong> nhưng nó được tạo ra từ <strong>master branch</strong> thay vì từ <strong>develop branch</strong> như release (*Chú ý <strong>hotfix branch</strong> cũng cần được gộp lại với <strong>master branch</strong> với <strong>develop branch</strong>)</li></ul><h5 id="Cac-lenh-trong-gitflow"><a href="#Cac-lenh-trong-gitflow" class="headerlink" title="Các lệnh trong gitflow"></a>Các lệnh trong gitflow</h5><ul><li><p>Để khởi tạo một git-flow cho một project, ta dùng lệnh sau</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow init</span><br></pre></td></tr></table></figure><ul><li>Lệnh này sẽ tạo ra hai branch ban đầu là master và develop</li></ul></li><li><p>Để bắt đầu một feature ta dùng lệnh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature start &lt;tên-feature&gt;</span><br></pre></td></tr></table></figure><ul><li>Sẽ tạo ra một branch mới có tên dạng feature/&lt;tên-feature&gt;</li></ul></li><li><p>Sau khi feature đó được thực hiện xong, ta có thể công bố feature đó lên remote server để mọi người cùng có thể cập nhật bằng cách gõ lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature publish &lt;tên-feature&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tiến hành gộp branch đó vào <strong>develop branch</strong> ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow feature finish &lt;tên-feature&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tạo một bản release ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow release start &lt;verion-no&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tiến hành merge bản release đó vào <strong>master branch</strong> và <strong>develop branch</strong> ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow release finish &lt;version-no&gt;</span><br></pre></td></tr></table></figure></li><li><p>Để tạo một bản hotfix ta dùng lệnh:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix start &lt;tên-hotfix&gt;</span><br></pre></td></tr></table></figure></li><li><p>Sau khi bản hotfix hoàn thiện ta có thể tiến hành merge lại với <strong>master branch</strong> và <strong>develop branch</strong> như sau:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix finish &lt;tên-hotfix&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h3><p>Bài viết ở trên chủ yếu giới thiệu cho mọi người về các khái niệm trong git cũng như cách sử dụng nó trong công việc thường ngày của mình một cách hiệu quả hơn. Cám ơn bạn đã theo dõi.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Gioi-thieu&quot;&gt;&lt;a href=&quot;#Gioi-thieu&quot; class=&quot;headerlink&quot; title=&quot;Giới thiệu&quot;&gt;&lt;/a&gt;Giới thiệu&lt;/h3&gt;&lt;p&gt;Đối với các lập trình viên, việc sử dụng công cụ quản lý phiên bản &lt;strong&gt;git&lt;/strong&gt; là điều không thể thiểu trong công việc hằng ngày và là một trong những kĩ năng cơ bản nhất mà ai cũng cần có được. &lt;strong&gt;Git&lt;/strong&gt; có rất nhiều các khái niệm khác nhau nên nếu bạn chỉ là người mới làm quen với &lt;strong&gt;git&lt;/strong&gt; thì đây chính là bài viết dành cho bạn. Bài viết sẽ giải thích tại sao chúng ta nên sử dụng &lt;strong&gt;git&lt;/strong&gt; cũng như một số khái niệm thường gặp khi sử dụng &lt;strong&gt;git&lt;/strong&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://nthung2112.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Progressive Web App tương lai của nền tảng web</title>
    <link href="http://nthung2112.github.io/2018/04/Progressive-Web-App-tuong-lai-cua-nen-tang-web.html"/>
    <id>http://nthung2112.github.io/2018/04/Progressive-Web-App-tuong-lai-cua-nen-tang-web.html</id>
    <published>2018-04-25T11:15:00.000Z</published>
    <updated>2018-04-30T08:06:42.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tom-tat"><a href="#Tom-tat" class="headerlink" title="Tóm tắt"></a>Tóm tắt</h2><p>“Mobile first” hay “Think mobile” là một trong những hot trend mà chúng ta thường được nghe gần đây, khi mà số lượng thiết bị di động và số lượng người sử dụng các thiết bị di động ngày càng lớn. Nhưng think như thế nào cho đúng là điều cần làm rõ. Bài viết này sẽ cung cấp thông tin cho bạn về cách tư duy theo <a href="https://en.wikipedia.org/wiki/Progressive_web_app" target="_blank" rel="noopener">PWA</a>.</p><blockquote><p>PWA không hoàn toàn là một giải pháp về công nghệ, mà là một tập các tiêu chuẩn được định nghĩa cho các ứng dụng web hướng theo, nhằm mang lại trải nghiệm tốt nhất cho người dùng, với sự hỗ trợ của browser về các API có liên quan như Service Worker, Push Notification v.v…</p></blockquote><a id="more"></a><p>Trước khi bàn đến các tiêu chuẩn của PWA và cùng tìm hiểu các nghiên cứu mới về trải nghiệm của người dùng, các công nghệ hứa hẹn… Chúng ta sẽ cùng điểm qua một vài cảm nhận và suy nghĩ trong lược sử thời gian của ngành công nghệ web. Bên cạnh đó, chúng ta cũng sẽ nói đôi chút về Native App đến Hybird App và từ đó hiểu thêm về lý do ra đời của PWA.</p><p>Bài viết sẽ cung cấp cho chúng ta cái nhìn tổng quát về các vấn đề ưu nhược khi phát triển ứng dụng web theo các tiêu chuẩn của PWA, những khó khăn mà lập trình viên có thể gặp phải, hơn nữa, bài viết sẽ cung cấp view nhìn để có thể scale được một dự án PWA về yếu tố con người cũng như về chi phí, hạ tầng.</p><p>Bài viết khá dài, nên bạn có thể phải kiên nhẫn đọc hết những phần bên dưới, hoặc lướt qua các các heading để có thể chọn các đề mục mà mình tâm.</p><h2 id="Mot-vai-cam-nhan-ve-nen-tang-Web-amp-App"><a href="#Mot-vai-cam-nhan-ve-nen-tang-Web-amp-App" class="headerlink" title="Một vài cảm nhận về nền tảng Web &amp; App."></a>Một vài cảm nhận về nền tảng Web &amp; App.</h2><p>Từ Web App đến Single Page (Web) Application</p><p>Bạn có thể tìm thấy các nét sơ lược về lịch sử của trong ngành web theo <a href="https://vi.wikipedia.org/wiki/World_Wide_Web" target="_blank" rel="noopener">Wikipedia</a> với các cột mốc quan trọng ở đây <a href="http://www.evolutionoftheweb.com/?hl=en" target="_blank" rel="noopener">evolutionoftheweb</a>, và theo quan điểm cá nhân của tác giả thì trong hơn 10 năm qua có thể kể đến hai nhóm sự kiện tiêu biểu:</p><ol><li>Sự ra đời của các browsers chịu thay đổi và mau lẹ trong sự thay đổi như Firefox, Chrome. Vì chính sự ra đời này, các tiến bộ mới được nhanh chóng cài đặt, phổ biến đến cộng đồng lập trình viên và người sử dụng.</li><li>Sự ra đời của AJAX có thể nói là cột mốc đáng chú ý nhất của nền tảng web, đã có thời chúng ta đi đâu cũng nghe người ta nói về điều này như là một phương tiện mang đến sức mạnh to lớn cho bất kì một website nào. Một trong các ứng dụng mang đậm dấu ấn của sự thay đổi này là Gmail, nó thay đổi cách chúng ta suy nghĩ về một phần mềm quản lý email trên nền web.</li></ol><p>Trình duyệt mới đi kèm công nghệ tiên tiến, chúng biến công việc phát triển website, ứng dụng web trở nên thú vị dành cho lập trình viên và không gian sáng tạo không giới hạn dành cho designer.</p><p>Cùng với sự bùng nổ của internet, cho đến sự ra đời của AJAX, đã khiến các website từng vốn chậm chạp giờ trở nên nhanh hơn, có hiệu năng và trải nghiệm giống như một phần mềm trên desktop và được gọi là một Single Page Application (SPA).</p><h3 id="Tu-Native-App-den-Hybird-App"><a href="#Tu-Native-App-den-Hybird-App" class="headerlink" title="Từ Native App đến Hybird App"></a>Từ Native App đến Hybird App</h3><p>Ngay từ những ngày bắt đầu, các ứng dụng di động đã tạo ra những điều “thật không thể tin nổi” về sự trải nghiệm đa dạng. Các thiết bị di động với cấu hình ngày càng mạnh mẽ với chu kỳ nâng cấp 1 đến 2 lần mỗi năm và người sử dụng ngày càng chịu móc hầu bao, bỏ thời gian cho các ứng dụng trên di động của mình.</p><p>Bên cạnh đó, các nền tảng di động còn có sự phong phú về chủng loại, phù hợp túi tiền, sở thích của người tiêu dùng đã nhanh chóng trở thành mảnh đất màu mỡ để các nhà khởi nghiệp nghĩ về các ứng dụng nhằm tạo kết nối giữa mọi người, giải quyết công ăn việc làm, nhu cầu học tập giải trí, cải thiện cuộc sống, chăm sóc sức khoẻ… như Grab là một ví dụ về ứng dụng di động đã tạo ra không chỉ việc làm cho cho sinh viên, mà căn bản là đã thay đổi cái nhìn và thói quen truyền thống về ngành dịch vụ xe ôm.</p><p>Có thể kể đến các nền tảng huy hoàng một thời như: Symbian của đế chế Nokia, Windows Phone với điện thoại O2 một thời làm mưa gió, dâu đen Blackberry những ngày hoàng kim đình đám… cho đến khi chỉ còn hai cái tên thống trị thị trường rộng lớn và màu mỡ này là iOS, Android như chúng ta đã biết. Dù vậy, trong trò chơi vương quyền vốn nguy hiểm này, tuy chưa biết kẻ nào sẽ chiến thắng cuối cùng, song có rất nhiều ông lớn vẫn không cam chịu, không dễ dàng bỏ cuộc chơi và tham vọng của mình.</p><p>Và ngày nay, các ứng dụng phát triển trên hai nền tảng Android của Google, và iOS của Apple đã lên đến những con số khổng lồ tạo ra một cộng đồng người sử dụng trung thành. Điều đó cũng có nghĩa là nếu bạn muốn xây dựng ứng dụng Native App bạn cũng phải sẵn sàng phát triển hai phiên bản khác nhau. Thật không may là chi phí phát triển cho hai nền tảng này không hề nhỏ, khi mà bạn biết rằng chi phí đó kèm theo việc maintain theo thời gian là một ác mộng, và phần lớn code của chúng gần như là không thể tái sử dụng cho nhau.</p><p>Đó là lúc người ta nghĩ đến điều làm thế nào để có thể viết một lần và chạy trên nhiều nền tảng, và có nhiều giải pháp cho điều này, ví dụ:</p><ol><li>Các nền tảng build/compile ra Native App như: (a) Xamarin, bạn có thể code với C# và build ra các nền tảng khác nhau như Android, iOS, Windows Phone. (b) React Native, bạn có thể Javascript để build ra Android, iOS.</li><li>Các nền tảng cho phép porting các trang web hiện có, hoặc xây dựng app trên nền tảng html/css/js để build ra các ứng dụng chạy trên cả Andriod, iOS như PhoneGap, gọi là Hybird App bằng cách cung cấp bên dưới một Native App như là một Brigde Software để giúp ứng dụng có thể tương tác với phần cứng bên dưới.</li></ol><p>Hybird app ra đời tận dụng được những ưu điểm của nền tảng web, tận dụng nguồn nhân lực to lớn từ nền tảng này, giờ đây dân lập trình web cũng có thể viết app, porting ứng dụng của mình lên nền tảng mobile một cách dễ dàng.</p><p>Thật vi diệu phải không?</p><h2 id="Cac-so-sanh-giua-Web-va-App"><a href="#Cac-so-sanh-giua-Web-va-App" class="headerlink" title="Các so sánh giữa Web và App"></a>Các so sánh giữa Web và App</h2><h3 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h3><h4 id="Uu-diem"><a href="#Uu-diem" class="headerlink" title="Ưu điểm"></a>Ưu điểm</h4><ol><li>Chạy được trên nhiều nền tảng, từ mobile đến desktop, từ Andriod đến iOS, từ Windows đến Linux v.v…</li><li>Người dùng không phải cài đặt ứng dụng nặng nề có khi hàng trăm Mb, không phải nâng cấp version, chúng luôn được cập nhật mới nhất.</li><li>Có thể searchable từ Google</li><li>Scale ứng dụng dễ dàng với một cộng đồng lập trình viên năng động và đông đảo dễ thuê mướn.</li></ol><h4 id="Nhuoc-diem"><a href="#Nhuoc-diem" class="headerlink" title="Nhược điểm"></a>Nhược điểm</h4><ol><li>Không thể can thiệp được sâu vào hệ thống mà phụ thuộc vào trình duyệt của người dùng.</li><li>Các chức năng về offline có giới hạn như phụ thuộc vào trình duyệt có support hay không.</li><li>Nhiều trình duyệt và các phiên bản khác nhau bạn sẽ tốn thời gian để đảm bảo chúng chạy giống nhau.</li></ol><blockquote><p>Bonus: Bạn có thể xem qua hình bên dưới để nhìn thấy những gì mà Chrome có thể support</p></blockquote><p><img src="https://cdn-images-1.medium.com/max/800/0*SRxt2a6QvqkoUK5A.png" alt=""></p><h3 id="Native-App"><a href="#Native-App" class="headerlink" title="Native App"></a>Native App</h3><h4 id="Uu-diem-1"><a href="#Uu-diem-1" class="headerlink" title="Ưu điểm"></a>Ưu điểm</h4><ol><li>Có thể sử dụng hầu hết các tính năng của thiết bị như camera, la bàn…</li><li>Cảm giác và cái nhìn (feel and look) thân thiện với người dùng vì sử dụng các control native của thiết bị, do hệ điều hành của thiết bị cung cấp.</li><li>Do sử dụng Native App, nên khi hệ điều hành của thiết bị được nâng cấp (ví dụ khi nâng cấp lên IOS 10, thì sẽ thừa kế được)</li><li>Có thể work offline, truy cập vào danh bạ v.v…</li><li>Có thể tận dụng các chức năng như tăng tốc nên tốc độ của Native App sẽ có peformance tốt.</li></ol><h4 id="Nhuoc-diem-1"><a href="#Nhuoc-diem-1" class="headerlink" title="Nhược điểm"></a>Nhược điểm</h4><ol><li>Chi phí phát triển cao, phải gần như làm cho 2 bản dành cho iOS, Android</li><li>Phải optimize cho các dòng điện thoại không phải flagship</li><li>Phải cài đặt, không thể được searchable</li><li>Dung lượng cài đặt rất lớn chiếm một khoảng đáng kể đặc biệt với các thiết bị có bộ nhớ thấp, việc cài đặt còn làm tăng chí phí về mặt dung lượng sử dụng 3G và người sử dụng có thể sẽ phải cân nhắc thời điểm tải.</li><li>Người dùng sau khi đã cài đặt thường cũng sẽ không nhớ tới ứng dụng và họ cũng dễ dàng remove vì chiếm tài nguyên và cảm thấy chật chội.</li><li>Thời gian submit và release rất lâu phải chờ đội ngũ Reviewers của App Stores duyệt qua. Điều đó có nghĩa là, khi có một bug xảy ra việc fix bug để giảm đi tác động đến khách hàng là không thể thực hiện ngay được. Điều đó cũng có nghĩa là chi phí dành cho việc testing cũng trở nên lớn hơn.</li></ol><h3 id="Hybird-App"><a href="#Hybird-App" class="headerlink" title="Hybird App"></a>Hybird App</h3><h4 id="Uu-diem-2"><a href="#Uu-diem-2" class="headerlink" title="Ưu điểm"></a>Ưu điểm</h4><ol><li>Viết một lần và chạy trên nhiều nền tảng, chúng ta chỉ code một lần cái app của mình, phần còn lại cái cầu nối (Bridge Software) lo.</li><li>Với các ứng dụng có porting từ web, hoặc có tính năng giống như mobile web, liên quan nặng về xử lý dữ liệu thì loại ứng dụng này là phù hợp.</li><li>Có thể chạy background, offline.</li></ol><h4 id="Nhuoc-diem-2"><a href="#Nhuoc-diem-2" class="headerlink" title="Nhược điểm"></a>Nhược điểm</h4><ol><li>Peformance kém: Có thể nói các ứng dụng Hybird gặp phải các vấn đề lớn về performance, bởi phải chạy trên một bridge app được viết tất cả trong 1 cồng kềnh, chúng thật sự gần như là một một trình duyệt di động mở rộng (Extended Mobile Browser) có bổ sung thêm các API.</li><li>Khó customize và optimize phù hợp với chức năng của mình, đặc biệt cho các ứng dụng như Game.</li><li>Các API vẫn chưa hỗ trợ đầy đủ để theo kịp sự phát triển của phần cứng và sự đa dạng của các nền tảng khác nhau.</li></ol><h3 id="PhoneGap-Nen-tang-noi-bat-cua-Hybird-App"><a href="#PhoneGap-Nen-tang-noi-bat-cua-Hybird-App" class="headerlink" title="PhoneGap - Nền tảng nổi bật của Hybird App"></a>PhoneGap - Nền tảng nổi bật của Hybird App</h3><p><a href="https://phonegap.com/" target="_blank" rel="noopener">PhoneGap</a> là một đại diện tiêu biểu cho nhóm nền tảng Hybird App, được phát triển bởi <a href="http://www.adobe.com/" target="_blank" rel="noopener">Adobe System</a> dùng để phát triển mobile app, nhưng không đòi hỏi user có kiến thức về Andriod, hay iOS, mà chỉ cần kiến thức về web như hình minh họa bên dưới.</p><p><img src="http://docplayer.org/docs-images/24/4232987/images/25-0.png" alt=""></p><h2 id="Bang-thong-ke-so-sanh-cac-cong-nghe"><a href="#Bang-thong-ke-so-sanh-cac-cong-nghe" class="headerlink" title="Bảng thống kê so sánh các công nghệ"></a>Bảng thống kê so sánh các công nghệ</h2><p>Nếu bạn cảm thấy quá mệt và loạn vì đống chữ ở phía trên, thì có thể nhìn vào bảng tổng hợp bên dưới để có cái nhìn nhanh về so sánh tương đối giữa các nền tảng này.</p><p><img src="http://nuvemconsulting.com/wp-content/uploads/2013/05/file-295453993.jpg" alt=""></p><h2 id="Su-ra-doi-cua-PWA"><a href="#Su-ra-doi-cua-PWA" class="headerlink" title="Sự ra đời của PWA"></a>Sự ra đời của PWA</h2><h4 id="Cac-thong-ke-thu-vi"><a href="#Cac-thong-ke-thu-vi" class="headerlink" title="Các thống kê thú vị"></a>Các thống kê thú vị</h4><ol><li>5 tỉ thiết bị đã và sẵn sàng cho nền tảng web.</li><li>Có hơn 1 tỉ trang web trên thế giới.</li><li>Tới quý 2, 2015, cho thấy 90% thời gian người sử dụng điện thoại ở Mỹ là tương tác với Native App, chỉ có 10% sử dụng browser. Nhưng điều này không có nghĩa là bạn cần phải xây dựng một Native App cho ứng dụng của mình, vì phần lớn thời gian người sử dụng bỏ ra lại cho những App phổ biến như Facebook, Twitter, YouTube, Instagram v.v..</li><li>Người dùng download app dễ dàng nhưng cũng dễ dàng gỡ bỏ app, bởi phần lớn các app được chạy các chương trình marketing hấp dẫn để thu hút người cài đặt, nhưng vì điện thoại rất dễ bị hết dung lượng nên user sẽ gỡ những app mà họ ít khi dùng đến. 65% người sử dụng điện thoại không hề download ứng dụng mới hàng tháng. Điều này có nghĩa là chi phí cài đặt ứng dụng ngày càng cao.</li><li>Tất cả những điều này cho thấy mobile web vẫn còn rất quan trọng. Nhưng lại có thêm một nghịch lý là, trong khi tỉ lệ người dùng mobile web so với tỉ lệ người dùng desktop web tăng trưởng rất nhanh và cao, nhưng tỉ lệ convert thành giá trị như đơn hàng lại rất thấp. Một phần trong đó là vì các ứng dụng web hiện tại không được optimize cho mobile cho các vấn đề về UX/UI và trong điều kiện mạng chậm.</li><li>Một website có thể tải về dưới 3s người sử dụng sẽ happy với website của bạn, và có nghĩa là tỉ lệ rời bỏ thấp, đơn hàng sẽ tăng lên. Còn từ 3s-10s thì người sử dụng chỉ có thể nói là sẽ cố kiên nhẫn. Quá 10s người sử dụng sẽ rời bỏ trang web của bạn vì họ nghĩ nó không hoạt động.</li></ol><p><img src="https://infographic.statista.com/normal/chartoftheday_3821_mobile_device_usage_n.jpg" alt=""></p><blockquote><p>(Phần viết này dựa trên sự suy đoán của tác giả) Sự phát triển mạnh mẽ của Native App, thách thức sự thống trị của Google Search Engine, nếu người sử dụng dùng app, họ sẽ không còn cần vào Google để tìm kiếm thông tin nữa và sản phẩm cốt lõi của Google sẽ gặp rất nhiều vấn đề, mà có thể kể đến là sự sụt giảm người sử dụng do các thông tin không còn đưa lên web để có thể crawl được, và kèm theo đó là sự sụt giảm về khả năng kiếm tiền của Google. Tác giả nghĩ đó cũng có thể là lý do khiến Google phải đẩy mạnh phát triển PWA để hỗ trợ cho nền tảng web, níu giữ người sử dụng ở lại nền tảng này.</p></blockquote><p>Có thể nói, sự ra đời của Hybird App là một cộc mốc khá quan trọng thể hiện rõ cách nhìn và sự mong mỏi của các nhà phát triển trong việc optimize chi phí. Và câu hỏi đặt ra là, tại sao các trình duyệt bản thân nó không nên là một Bridge Software cung cấp các API để các ứng dụng web có thể truy cập vào phần cứng của thiết bị. Do vậy, chúng ta có thể tin rằng, điều đó sắp tới sẽ là một phần trong những thay đổi, bổ sung của các browsers.</p><p>Các tiêu chí về <a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">PWA</a>:</p><ul><li>Progressive - Hoạt động cho tất cả mọi người, không liên quan tới việc lựa chọn browser, bởi chúng được xây dựng với những sự cải tiến như là một nguyên lý cốt lõi.</li><li>Responsive - Có thể hoạt động tốt trên mọi thiết bị như desktop, mobile, tablet, với mọi kích thước màn hình.</li><li>Connectivity independent - Có thể hoạt động ngay cả khi offline (dựa trên Service Worker) và hoạt động tốt trong điều kiện network chậm.</li><li>App-like - Sử dụng app-shell để cung cấp các chức năng định hướng và sự tương tác giống như app.</li><li>Fresh - Luôn update phiên bản mới nhất (dựa trên Service Worker)</li><li>Safe - Tất cả phải được phục vụ thông qua HTTPS để tránh bị nghe lén và đảm bảo nội dung không bị giả mạo.</li><li>Discoverable - Có để được nhận dạng như là ứng dụng (dựa trên Service Worker, và W3C manifests ) và cho phép Search Engines có thể tìm thấy.</li><li>Re-engageable - Tạo ra sự tương tác lại ứng dụng dễ dàng thông qua các chức năng chẳng hạn như Push Notification.</li><li>Installable - Có thể Add to Homescreen để giữ lại ứng dụng trên màn hình.</li><li>Linkable - Dễ dàng share, chia sẽ điều mình muốn đến với người khác thông qua URL mà không cần phải cài đặt.</li></ul><blockquote><p>10 tiêu chí nhận dạng một ứng dụng được xem là PWA với sự giúp đỡ của Google Translator.</p></blockquote><p>PWA không hoàn toàn là một giải pháp về công nghệ, mà là một tập các tiêu chuẩn được định nghĩa cho các ứng dụng web hướng theo nhằm mang lại trải nghiệm tốt nhất cho người dùng, với sự hỗ trợ của browser về các API có liên quan như Service Worker, Push Notification v.v…</p><p>Điều ý nghĩa của một ứng dụng theo tiêu chuẩn của PWA không phải là nó có thể tận dụng được sức mạnh từ phần cứng của người sử dụng hay không, như cách mà nhiều lập trình viên lần đầu nghe qua quan tâm, mà là nó giúp cho các ứng dụng web trở nên tốt hơn từ góc độ performance đến những cải tiến về UX/UI.</p><p>Để hiểu được PWA là gì, cần phải nhìn về Native App và Web App ở góc độ ưu nhược điểm của từng đối tượng. Và khi nhìn thấy nhược điểm của chúng, cũng là lý do đầy đủ để chúng ta hiểu PWA ra đời như là một giải pháp hoàn thiện cả hai nền tảng này bằng cách mang ưu điểm của cả hai.</p><h4 id="Nghien-cuu-moi-ve-trai-nghiem-nguoi-su-dung"><a href="#Nghien-cuu-moi-ve-trai-nghiem-nguoi-su-dung" class="headerlink" title="Nghiên cứu mới về trải nghiệm người sử dụng"></a>Nghiên cứu mới về trải nghiệm người sử dụng</h4><p>Ngày trước, một website tốt là một website có <strong>Page Speed</strong> cao, trong thời gian vài giây nó phải tải toàn bộ nội dung về thiết bị, tiếp theo đó trình duyệt hiển thị giao diện, cuối cùng là cho người dùng tương tác. Điều đó có nghĩa là, trong thời gian tải toàn bộ nội dung của website, người dùng chỉ nhìn thấy một màn hình trắng tinh khôi, hoặc là một dấu hiện đang tải trang với animation nhàm chán và có thể họ sẽ bắt đầu thấy mất kiên nhẫn trong các điều kiện như network bị chậm.</p><p>Theo nghiên cứu của Google, một website tốt phải cho một sự trải nghiệm liên tục không gián đoạn, nhằm thuyết phục người dùng tin rằng là nó đang hoạt động để họ không rời bỏ đi chỗ khác, cũng như không cảm thấy phải khó chịu khi phải chờ đợi.</p><p>Sự tải trang, các nội dung cần thiết để có thể tạo ra một ứng dụng hoàn chỉnh có thể chia thành nhiều giai đoạn phù hợp với nhu cầu và khả năng tương tác của người dùng. Ứng dụng không cần phải load tất cả mọi thứ lên sẵn trong khi có rất nhiều tính năng người dùng có thể chưa cần dùng tới hoặc là ít khi dùng tới.</p><h4 id="Cac-giai-doan-trai-nghiem-co-ban"><a href="#Cac-giai-doan-trai-nghiem-co-ban" class="headerlink" title="Các giai đoạn trải nghiệm cơ bản"></a>Các giai đoạn trải nghiệm cơ bản</h4><ol><li><strong>First Paint</strong> - Định nghĩa việc website cần tải thật nhanh để người sử dụng thấy nó hoạt động chứ không phải là một màn hình trắng tinh vô hồn.</li><li><strong>First Meaningful Paint</strong> - Định nghĩa về việc website cần phải hiển thị những điều có ý nghĩa để người sử dụng có thể nhìn thấy ví dụ như những hình ảnh banner, video v.v… gọi là <strong>Hero Element</strong></li><li><strong>Time to Interactive</strong> - Định nghĩa về cách làm thế nào người sử dụng có thể bắt đầu tương tác với website của bạn cũng trong thời gian nhanh nhất, có thể thao tác với điều họ cần, mà không cần phải đợi tải hoàn toàn trang, ví dụ như họ đã có thể bắt đầu với search box, hoặc xem video, đi vào sản phẩm chi tiết.</li></ol><blockquote><p>Google đã phát triển một công cụ gọi là Lighthouse để phân tích website của bạn theo các tiêu chí này.</p></blockquote><h2 id="Tai-sao-PWA-co-the-tro-thanh-tuong-lai-cua-nganh-web"><a href="#Tai-sao-PWA-co-the-tro-thanh-tuong-lai-cua-nganh-web" class="headerlink" title="Tại sao PWA có thể trở thành tương lai của ngành web"></a>Tại sao PWA có thể trở thành tương lai của ngành web</h2><p>Như đã nói, việc mobile web vẫn có những thế mạnh mà không thể bị đánh bại, bởi những giá trị cốt lõi chưa thể bị thay thế trong tương lai gần như đã đề cập vốn rất chi tiết ở trên.</p><p>Nhưng với sự thay đổi nhanh về phần cứng cũng như về hệ sinh thái các phần mềm từ hệ điều hành cũng như Native App trên các thiết bị di động, đòi hỏi các ứng dụng web phải thay đổi để thích nghi với sự kỳ vọng cao hơn về nhu cầu trải nghiệm của người dùng. Rất khó để chấp nhận với một thiết bị đẹp, cấu hình mạnh mẽ, và đắt đỏ lại tải một trang web lên có vẻ chậm chạp, hiệu năng kém và thiết kế cẩu thả.</p><p>Những lý luận và tư tưởng của PWA là tuyệt vời và có thể áp dụng để làm cho sản phẩm của chúng ta tốt hơn, điều đó hứa hẹn một thị trường hấp dẫn về các website đã có cần phải thay đổi và các website mới cần phải được build trên các nền tảng công nghệ mới và tư tưởng mới.</p><p>Nếu chúng ta không nắm bắt đúng thời điểm, đúng điểm rơi của công nghệ, chúng ta sẽ bị bỏ lại phía sau, lạc hậu và khi phần lớn khách hàng quay lưng đi với mình thì đã muộn. Có rất nhiều bài học về điều này như của Nokia, của Yahoo… có thể sự đổ vỡ của các tập đoàn khổng lồ này đến từ nhiều nguyên nhân, nhưng trong số đó chắc chắn phần lớn từ các sản phẩm thiếu sáng tạo, kém hấp dẫn đối với người tiêu dùng, thậm chí không muốn nói là lạc hậu trong tồn tại của nó so với đối thủ.</p><h2 id="Nhung-kho-khan-khi-ung-dung-PWA"><a href="#Nhung-kho-khan-khi-ung-dung-PWA" class="headerlink" title="Những khó khăn khi ứng dụng PWA"></a>Những khó khăn khi ứng dụng PWA</h2><ol><li>Nguồn nhân lực về PWA hiện tại đang thiếu hụt mà chưa dễ dàng được khoả lấp trong thời gian ngắn sắp tới, do các công nghệ và nền tảng vẫn còn mới. Tác giả sẽ viết một bài sắp tới để nói sâu hơn về vấn đề này cũng như giải pháp khắc phục cho các tổ chức muốn phát triển sản phẩm theo tư tưởng của PWA.</li><li>Sự thiếu hỗ trợ đầy đủ từ các nhà phát triển chẳng hạn như từ Apple, nhưng điều này đang và sẽ sớm được khắc phục, bạn có thể tham khảo ở đây để thấy tính năng này <a href="https://webkit.org/status/#?search=service%20workers" target="_blank" rel="noopener">đang được phát triển</a> bởi Apple</li><li>Những lo ngại của cộng đồng developer do cách hiểu sai là nó không thể sử dụng được phần cứng của thiết bị.</li><li>Các lãnh đạo, cấp trên vẫn chưa thấy được nhiều value để chuyển đổi từ những website truyền thống sang nền tảng mới. Nhưng các con số và thống kê cũng cho thấy việc chuyển đổi theo tương tưởng và mô hình công nghệ mới hơn là điều không thể nào né tránh.</li></ol><h2 id="Nhung-nha-phat-trien-tieu-bieu"><a href="#Nhung-nha-phat-trien-tieu-bieu" class="headerlink" title="Những nhà phát triển tiêu biểu"></a>Những nhà phát triển tiêu biểu</h2><p>Bạn có thể nhìn qua các website này để tìm hiểu các website đó hoạt động như thế nào để tham khảo cho website của mình.</p><p>Ở nước ngoài có thể kể đến:</p><ol><li>Flipkart - Ấn độ, xem chi tiết <a href="https://developers.google.com/web/showcase/2016/flipkart" target="_blank" rel="noopener">tại đây</a>.</li></ol><ul><li>Với phiên bản PWA mobile thời gian user ở lại website là: 3.5 phút so với phiên bản mobile cũ không PWA là 70s.</li><li>3x tăng thời gian user ở lại website.</li><li>40% tỉ lệ tương tác tăng thêm.</li><li>70% nhiều hơn CR đến từ Add to Homescreen.</li><li>3x giảm tỉ lệ sử dụng dữ liệu.</li></ul><ol><li>Aliexpress - Trung Quốc, xem chi tiết <a href="https://developers.google.com/web/showcase/2016/aliexpress" target="_blank" rel="noopener">tại đây</a>.</li></ol><ul><li>104% CR cho người dùng mới tất cả trình duyệt; 82% CR tăng thêm trên iOS</li><li>2X số trang mà người sử dụng xem thêm với mỗi session cho tất cả trình duyệt.</li><li>74% tăng thêm thời gian người sử dụng với mỗi session tất cả trình duyệt.</li></ul><p>Ở thị trường Việt Nam, các site nổi tiếng có thể kể đến:</p><ol><li>Tiki - đã released version PWA vào mùa hè 2017</li><li>Sendo - dự kiến released vào cuối năm 2017</li></ol><h2 id="PWA-duoi-goc-nhin-cho-doanh-nghiep"><a href="#PWA-duoi-goc-nhin-cho-doanh-nghiep" class="headerlink" title="PWA dưới góc nhìn cho doanh nghiệp"></a>PWA dưới góc nhìn cho doanh nghiệp</h2><p>Đối với doanh nghiệp điều quan trọng là giảm chi phí, tăng doanh thu và lợi nhuận thì việc phát triển một ứng dụng PWA với các phương pháp luận và các giải pháp mới khiến cho chi phí phát triển dự án xét về lâu dài càng giảm, và lợi nhuận ngày càng được tối đa hoá.</p><p>Sản phẩm theo nền tảng này được thừa hưởng một hệ thống lý luận và phương pháp lập trình tốt để dễ dàng scale, maintain, improve, và thay đổi trong tương lai. Điều đó có nghĩa là các tính năng được thêm mới dễ dàng với chi phí thấp, rủi ro về lỗi được giảm.</p><h2 id="PWA-duoi-goc-nhin-cho-lap-trinh-vien"><a href="#PWA-duoi-goc-nhin-cho-lap-trinh-vien" class="headerlink" title="PWA dưới góc nhìn cho lập trình viên"></a>PWA dưới góc nhìn cho lập trình viên</h2><h3 id="Ban-can-hoc-gi-lam-gi"><a href="#Ban-can-hoc-gi-lam-gi" class="headerlink" title="Bạn cần học gì, làm gì."></a>Bạn cần học gì, làm gì.</h3><p>Nếu bạn chưa từng biết làm thế nào thì đọc bài viết này <a href="https://www.linkedin.com/pulse/l%C3%A0m-th%E1%BA%BF-n%C3%A0o-%C4%91%E1%BB%83-tr%E1%BB%9F-th%C3%A0nh-m%E1%BB%99t-frontend-developer-phu-tran-phong/" target="_blank" rel="noopener">Làm thế nào để trở thành Frontend developer</a></p><h3 id="Kha-nang-scale-cua-du-an-PWA"><a href="#Kha-nang-scale-cua-du-an-PWA" class="headerlink" title="Khả năng scale của dự án PWA"></a>Khả năng scale của dự án PWA</h3><p>PWA đã được đưa ra từ cách đây từ vài năm trước, nhưng đây là điểm rơi để các ứng dụng có thể chuyển đổi sang nền tảng này, do sự phát triển vô cùng mạnh mẽ của các framework, thư viện được xây dựng và phát triển trên nền Nodejs, đáng để kể đến như React, Angular, Polymer dựa trên trên các công cụ bundle như Grunt, Gulp, Webpack… Chúng khiến cho việc tổ chức, tối ưu code được dễ dàng, tổ chức team hiệu quả và tránh được các rủi ro. Khả năng scale của dự án là dễ dàng cả về yếu tố con người, vật lý, và chi phí.</p><p>Không có sự hỗ trợ về các công cụ phát triển phần mềm từ hệ sinh thái của Nodejs, rất khó để có thể ứng dụng được các triết lý mà PWA đã đề ra, vì có thể dự án sẽ có chi phí phát triển cực lớn và rủi ro phát sinh theo nó là không thể nào dự đoán hay kiểm soát.</p><h3 id="Tu-goc-nhin-outsourcing"><a href="#Tu-goc-nhin-outsourcing" class="headerlink" title="Từ góc nhìn outsourcing"></a>Từ góc nhìn outsourcing</h3><ol><li>Làm thế nào để decoupling các task chức năng của ứng dụng, sao cho khi có nhiều tính năng thì có thể đẩy người vào, vì nếu không thể decoupling được tính năng, các chức năng được code độc lập, mỗi người làm một phần thì khi càng push người vào, thì sự phát triển của dự án chưa chắc tương xứng.</li><li>Giúp debug dễ dàng, khi có vấn đề gì xảy ra không được như mong đợi.</li><li>Dự án dễ testable, có thể viết chức năng test một cách dễ dàng.</li></ol><h3 id="Tu-goc-nhin-production"><a href="#Tu-goc-nhin-production" class="headerlink" title="Từ góc nhìn production"></a>Từ góc nhìn production</h3><ol><li>Bao gồm cả các yếu tố của outsourcing.</li><li>Điều quan tâm là việc tính scale như thế nào khi có sự tăng tưởng của người sử dụng, đặc biệt là khi các phương pháp xây dựng một ứng dụng PWA phụ thuộc nặng nào Nodejs ngay cả khi bạn dùng framework/library nào đi chăng nữa thì các công cụ để xây dựng và tổ chức source code, build source code, debug sẽ cần đến gulp/grunt hoặc là Webpack. Nodejs về hiệu năng có thể được mọi người nghĩ là kém so với các ngôn ngữ khác và khó scale. Nhưng cái nhìn đơn giản đó là chưa đúng. Chúng ta cần nhìn về ứng dụng với các công nghệ được build stack với nhau như: Nginx, Redis, Database v.v… một ứng dụng chạy nhanh cần một thiết kế tốt, có thể hoạt động ổn định và scale theo chiều ngang chứ không nên được thiết kế chỉ dựa vào ngôn ngữ.</li><li>Ở góc nhìn production, các kỳ vọng về sản phẩm, về chi phí, thời gian, con người đều có đủ phương pháp lý luận và tổ chức để có thể đi đến việc dễ dàng kiểm soát và đạt được các tiêu chí đề ra.</li></ol><blockquote><p>Ở một bài viết tiếp theo, chúng ta sẽ xem xét một ứng dụng open source PWA mẫu, để tìm hiểu các công nghệ được stacked như thế nào.</p></blockquote><h2 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h2><p>Qua một bài viết khá dài, tác giả hi vọng sẽ mang lại cho bạn một trong những bài viết đầy đủ và chi tiết nhằm cung cấp các view nhìn mang giá trị tham khảo về một trong những nền tảng rất hứa hẹn thay đổi tương lai của ngành lập trình và phát triển ứng dụng web.</p><p>Bài viết sẽ không tránh khỏi các thiếu sót mang tính chủ quan của tác giả và cả các sai sót về các thông số, cách trình bày, bố cục, lỗi chính tả… nên hi vọng bạn đọc thông cảm bỏ qua.</p><p>Nếu bạn có bất kì câu hỏi hay phản biện bổ sung nào vui lòng để lại comment bên dưới.</p><p>Rất cảm ơn quý đọc giả và các bạn vì đã kiên nhẫn đọc hết bài viết.</p><h2 id="Tham-khao"><a href="#Tham-khao" class="headerlink" title="Tham khảo"></a>Tham khảo</h2><ol><li><a href="https://addyosmani.com/blog/getting-started-with-progressive-web-apps/" target="_blank" rel="noopener">Getting started with Progressive Web Apps</a></li><li><a href="https://www.linkedin.com/pulse/mobile-web-hay-app-bui-quang-tinh-tu/" target="_blank" rel="noopener">Mobile Web Hay Mobile App?</a></li><li><a href="https://medium.com/dev-channel/why-progressive-web-apps-vs-native-is-the-wrong-question-to-ask-fb8555addcbb" target="_blank" rel="noopener">Why “Progressive Web Apps vs. native” is the wrong question to ask</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tom-tat&quot;&gt;&lt;a href=&quot;#Tom-tat&quot; class=&quot;headerlink&quot; title=&quot;Tóm tắt&quot;&gt;&lt;/a&gt;Tóm tắt&lt;/h2&gt;&lt;p&gt;“Mobile first” hay “Think mobile” là một trong những hot trend mà chúng ta thường được nghe gần đây, khi mà số lượng thiết bị di động và số lượng người sử dụng các thiết bị di động ngày càng lớn. Nhưng think như thế nào cho đúng là điều cần làm rõ. Bài viết này sẽ cung cấp thông tin cho bạn về cách tư duy theo &lt;a href=&quot;https://en.wikipedia.org/wiki/Progressive_web_app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PWA&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PWA không hoàn toàn là một giải pháp về công nghệ, mà là một tập các tiêu chuẩn được định nghĩa cho các ứng dụng web hướng theo, nhằm mang lại trải nghiệm tốt nhất cho người dùng, với sự hỗ trợ của browser về các API có liên quan như Service Worker, Push Notification v.v…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="pwa" scheme="http://nthung2112.github.io/tags/pwa/"/>
    
      <category term="web" scheme="http://nthung2112.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Biên niên sử về bố cục trong trang web</title>
    <link href="http://nthung2112.github.io/2018/04/Bien-nien-su-ve-bo-cuc-trong-trang-web.html"/>
    <id>http://nthung2112.github.io/2018/04/Bien-nien-su-ve-bo-cuc-trong-trang-web.html</id>
    <published>2018-04-25T10:57:00.000Z</published>
    <updated>2018-04-25T11:06:06.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gioi-thieu"><a href="#Gioi-thieu" class="headerlink" title="Giới thiệu"></a>Giới thiệu</h2><p>Bài viết bàn về công nghệ các lập trình viên web áp dụng để thiết kế bố cục trong trang web (website layout) - qua các thời kỳ: table, float, block-inline, flexbox, JS, Twitter Bootstrap và grid.</p><a id="more"></a><h2 id="Thoi-truoc-2010"><a href="#Thoi-truoc-2010" class="headerlink" title="Thời trước 2010"></a>Thời trước 2010</h2><p>Đây là thời kỳ tối cổ với công nghệ website, người ta hầu như ít đầu tư giao diện web, việc dựng bố cục, xương sườn cho trang web sử dụng thẻ HTML <code>&lt;table&gt;</code> là chính.</p><p><img src="http://namluu.com/wp-content/uploads/2018/01/yyou-1.jpg" alt=""><br><img src="http://namluu.com/wp-content/uploads/2018/01/yyou-2.jpg" alt=""></p><p>Layout Table rất đơn giản, với 1 table 3 rows, 1 row làm header, 1 row làm content, cái cuối làm footer.<br><strong>Nhược điểm</strong> của layout table là: rất khó khăn khi tái cấu trúc lại bố cục, khó khăn khi thiết kế vì table mục đích chính là biểu diễn dữ liệu. Các cột có chiều rộng cố định không linh hoạt, nan giải khi xử lý trên nhiều kích thước màn hình.<br>Năm 2012, khi mới ra trường, công việc đầu tiên của tôi là đập bỏ và thay thế các layout dạng table. Tới nay thì không còn ai nghĩ tới việc việc thiết kế layout bằng table nữa.<br>Tuy nhiên còn rất nhiều tài liệu trong các trường đại học chưa được cập nhật nên đừng ngạc nhiên khi bạn được dạy thiết kế layout bằng thẻ table nhé.</p><h2 id="Tu-2012-Float-lat-do-Table"><a href="#Tu-2012-Float-lat-do-Table" class="headerlink" title="Từ 2012 - Float lật đổ Table"></a>Từ 2012 - Float lật đổ Table</h2><p>Khi layout table quá bất cập thì giải pháp thay thế tuyệt vời nhất trong giai đoạn này là dùng các thẻ HTML <div> kết hợp với CSS property: Float.<br>Các khối <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block/" target="_blank" rel="noopener">block</a> sẽ được tách ra và “trôi” qua trái, phải, tùy theo ý muốn của lập trình viên.</div></p><p><img src="http://namluu.com/wp-content/uploads/2018/01/stopdesign-float.jpg" alt=""></p><p><strong>Ưu điểm</strong>: code sạch sẽ hơn khi dùng table, dễ thay đổi chỉnh sửa, linh hoạt trên nhiều kích thước màn hình.<br><strong>Khuyết điểm</strong>: dễ bị “vỡ trang”, nếu lập trình viên chưa làm chủ được float, chưa biết cách sử dụng các tuyệt chiêu như: clear, overflow… Lạm dụng float trên các bố cục phức tạp.</p><h2 id="2013-thoi-cua-cac-CSS-Frameworks"><a href="#2013-thoi-cua-cac-CSS-Frameworks" class="headerlink" title="2013 - thời của các CSS Frameworks"></a>2013 - thời của các CSS Frameworks</h2><p>Vào giai đoạn này, các CSS Frameworks như <a href="https://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap</a>, <a href="https://foundation.zurb.com/" target="_blank" rel="noopener">Foundation</a>,…<br>Các thư viện này hỗ trợ rất đắc lực cho các lập trình viên, dễ sử dụng, dễ thiết kế bố cục, chỉ cần gắn các class phù hợp. Bên cạnh đó chúng còn liên tục cập nhật và cải tiến không ngừng.<br>Phải nói trong thời gian đó, các CSS Frameworks nhất là Bootstrap, trở thành 1 xu hướng tới mức khi đi phỏng vấn code web, chắc ăn thế nào họ cũng hỏi bạn vài câu.<br>Để dùng tốt Bootstrap, bạn phải học các khái niệm như Grid View System, học thuộc các class thông dụng , tận dụng tối đa các chức năng có sẵn, người giỏi nhất lúc này là người code CSS, style ít nhất.<br>Hạn chế của các CSS Framework này là quá kềnh càng nếu ta không tận dụng hết chức năng (có thể khắc phục bằng bản tùy chỉnh).<br>Nâng cấp phiên bản cần sửa đổi lại tên các class (v2 xài span1 - span12, v3 xài col-, v4 xài col- ).</p><p><img src="http://namluu.com/wp-content/uploads/2018/01/frontend-development-frameworks.jpg" alt=""></p><blockquote><p>Ngày nay các CSS Frameworks như Bootstrap đã phát triển hơn khái niệm CSS rất nhiều, ta nên gọi nó với tên <strong>front-end component library</strong>, vì nó còn tích hợp nhiều thư viện JavaScript bên trong. <a href="https://usablica.github.io/front-end-frameworks/compare.html?v=2.0" target="_blank" rel="noopener">Số lượng các front-end libraries ngày nay</a></p></blockquote><h2 id="2015-CSS3-va-Flexbox"><a href="#2015-CSS3-va-Flexbox" class="headerlink" title="2015 - CSS3 và Flexbox"></a>2015 - CSS3 và Flexbox</h2><p>CSS3 đã hỗ trợ một công nghệ thiết kế layout mới, hiện đại hơn Float đó chính là Flexbox. Đúng như tên gọi flexible (linh hoạt), nó thực sự rất mạnh.</p><ul><li>Flexbox sẽ giúp bạn điều khiển được không những chiều ngang (horizontal) mà còn chiều dọc (vertical) điều mà CSS thường với position rất cứng nhắc.</li><li>Flexbox có thể điều khiển được các phần tử bên trong, giúp bạn dễ dàng biểu diễn nội dung và bố cục trên các thiết bị di động.</li></ul><p><img src="http://namluu.com/wp-content/uploads/2018/01/fl.jpg" alt=""></p><p><strong>Khuyết điểm</strong>: flexbox mạnh và mới nên bạn phải bỏ nhiều công sức để học và làm chủ được nó, khó hơn so với dùng float và Bootstrap. <a href="https://jakearchibald.com/2014/dont-use-flexbox-for-page-layout/" target="_blank" rel="noopener">Không khuyến khích dùng flexbox</a> để làm bố cục toàn trang trừ trường hợp đặc biệt, chỉ dùng để bố cục các thành phần bên trong. Lý do vì flexbox phụ thuộc vào nội dung bên trong nó, nên khi bài viết dài ngắn có thể làm “biến dạng” bố cục website của bạn, chưa kể tình huống khi web load chưa kịp.</p><blockquote><p>Kết hợp khôn ngoan là dùng grid system để làm bố cục bên ngoài, những phần bố cục cần sự linh hoạt thì dùng flexbox. Bootstrap 4 đã tích hợp flexbox vào grid view của mình, chứng tỏ sức mạnh của flexbox và không thể bàn cãi, đồng thời cho thấy cái tiện lợi khi dùng Bootstrap.</p></blockquote><h2 id="2017-CSS-Grid"><a href="#2017-CSS-Grid" class="headerlink" title="2017 - CSS Grid"></a>2017 - CSS Grid</h2><p>Grid và 1 thuộc tính CSS rất mới, ra đời 3-2017. Tuy nhiên nó đã và đang được giới công nghệ web đặc biệt quan tâm vì những tính năng ưu việt.<br>Nếu như Flexbox phân bố các phần tử theo 1 chiều duy nhất thì Grid cho phép bạn điểu khiển phần tử theo 2 chiều - ngang và dọc.<br>Vì đây là 1 công nghệ mới, nên các <a href="https://medium.com/tag/grid-layout" target="_blank" rel="noopener">tài liệu chất lượng</a> về nó hầu hết là bằng tiếng anh, sắp tới mình sẽ có bài viết về công nghệ này, mới các bạn theo dõi.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*phV0oLsKV_qVjFVv5lY1vw.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Gioi-thieu&quot;&gt;&lt;a href=&quot;#Gioi-thieu&quot; class=&quot;headerlink&quot; title=&quot;Giới thiệu&quot;&gt;&lt;/a&gt;Giới thiệu&lt;/h2&gt;&lt;p&gt;Bài viết bàn về công nghệ các lập trình viên web áp dụng để thiết kế bố cục trong trang web (website layout) - qua các thời kỳ: table, float, block-inline, flexbox, JS, Twitter Bootstrap và grid.&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://nthung2112.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>[Regex] Học rồi mà như chưa học</title>
    <link href="http://nthung2112.github.io/2018/04/Regex-Hoc-roi-ma-nhu-chua-hoc.html"/>
    <id>http://nthung2112.github.io/2018/04/Regex-Hoc-roi-ma-nhu-chua-hoc.html</id>
    <published>2018-04-25T10:23:00.000Z</published>
    <updated>2018-04-25T10:44:38.060Z</updated>
    
    <content type="html"><![CDATA[<p>Người dẫn lại bài này cũng được phen lao đao khi lục lọi lại mớ kiến thức cơ bản cũ. Đối với sự nghiệp của một coder thì phải được thực hiện liên tục, nếu không sẽ rất dễ quên và lóng ngóng dù chỉ là những kiến thức cơ bản nhất. Dẫu biết rằng <strong>search là sẽ thấy</strong> nhưng nhiều phen cũng không khỏi thẹn vì giải thích sai cho đàn em =)) Cũng may đọc lại được bài của cu em công ty, kiến thức lại nhanh chóng được khỏa lấp, vì kiến thức nội bộ nên xin được trích lại bài chia sẻ của em nó để đây cho đỡ quên.!</p><a id="more"></a><h3 id="1-Tua-de"><a href="#1-Tua-de" class="headerlink" title="1. Tựa đề"></a>1. Tựa đề</h3><p>Mình vẫn còn nhớ cái hôm đấy. Trong khi mãi ngắm nhìn những dòng code đến hoa mắt là lúc mặt trời đã lặn khuất sau những toà nhà đô thị từ lúc nào cũng không ai hay. Bên ngoài mưa gió bão bùng, lúc mà mình đang cố release cho cái dự án lụt không cần nước, cho nó có thể chạy được.</p><p><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/8bnypsnck8_image.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/8bnypsnck8_image.png" alt="alt text"></a></p><p>Nhưng hôm đấy cũng không nằm ngoài dự tính, nó vẫn bị fail như bao lần trước, lần này nguyên nhân là do validate dữ liệu bị sai. Lúc đấy phải cần fix luôn ngay nhưng thật không may là anh phụ trách làm phần đấy đã tốc biến về nhà lúc nào không rõ. Còn bản thân thì chả biết tí tẹo về regex cả. Mọi thứ dường như bế tắc!<br><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hfcqpp7kjz_image%20%281%29.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hfcqpp7kjz_image%20%281%29.png" alt="alt text"></a></p><p>Đã đến lúc mình phải đọc cái regex mà anh kia đã viết! Nhìn những dòng đấy chỉ có thể thốt lên “wth, mình đang đọc cái nồi gì thế này”. Thật không thể nếu bạn chả có kiến thức gì về nó cả. Thực ra mình và nhiều người hay mắc tật lúc cần làm gì là chỉ cần search từ khoá trên anh google rồi copy vào code của mình, tuy không hiểu rõ nhưng thấy nó chạy ổn thì ok. Đến lúc lỗi lên thì chả biết fix thế nào. Cũng vì nguyên nhân đấy mà mình mới biết là đang làm một cách sai lầm và mù quáng và bắt đầu học một cách đúng đắn hơn. Trước mắt là phải tìm hiểu về regex xem nó có gì mà nhìn vào đã thấy sợ rồi.<br><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/4syn5tlsc4_image%20%282%29.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/4syn5tlsc4_image%20%282%29.png" alt="alt text"></a></p><p>Bạn đã từng bao giờ rơi vào trường hợp như mình chưa, cần kiểm tra định dạng một chuỗi có hợp lệ, hoặc tìm kiếm một chuỗi nằm trong một chuỗi dài khác. Đa số các bạn cần dùng đến việc validate (xác minh) tính hợp lệ của dữ liệu đều đã từ gặp phải câu hỏi đấy.</p><blockquote><p>Nếu bạn gặp trường hợp lúc đấy giải pháp đầu tiên bạn nghĩ đến là gì nếu chưa biết gì về regex?</p></blockquote><p>Có thể nó sẽ trở thành một bài toán khá hóc búa nếu bạn chỉ xử lý thuần tuý bằng cách duyệt chuỗi mà không có công cụ và thư viện xử lý.</p><blockquote><p>Vậy regex là gì? Nó giải quyết bài toán không tưởng ở trên như thế nào? Nó cao siêu và ảo diệu ra sao?</p></blockquote><p>Chúng ta hãy cùng đi tìm hiểu nào!<br><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/86ziaz9buq_ByN7VztCMAEj-wr.png_large.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/86ziaz9buq_ByN7VztCMAEj-wr.png_large.png" alt="alt text"></a></p><h3 id="2-Gioi-thieu"><a href="#2-Gioi-thieu" class="headerlink" title="2. Giới thiệu"></a>2. Giới thiệu</h3><p>Theo anh <a href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener">wiki</a> <img src="https://assets-cdn.github.com/images/icons/emoji/trollface.png" alt=":trollface:" title=":trollface:"></p><blockquote><p>Biểu thức chính quy (regular expression, viết tắt là regexp, regex hay regxp) là một chuỗi miêu tả một bộ các chuỗi khác, theo những quy tắc cú pháp nhất định.</p></blockquote><p>Cùng điểm một chút về lịch sử nhỉ.</p><blockquote><p>Khái niệm regex được bắt đầu đưa ra từ những năm 1950 khi mà nhà toán học người Mỹ Stephen Cole Kleene chính thức mô tả một ngôn ngữ chính quy Khái niệm này được sử dụng phổ biến trong các tiện ích xử lý văn bản Unix. Sau đấy, từ những năm 1980, tồn tại các cú pháp khác nhau để tạo ra các biểu thức chính quy. Các chuẩn được đưa ra và sử dụng rộng rãi nhất là cú pháp Perl</p></blockquote><p>Mỗi lần mình tìm hiểu xong một thời gian không dùng đến, lúc quay lại đọc đều có cảm giác như mới :).</p><h3 id="3-Cong-dung"><a href="#3-Cong-dung" class="headerlink" title="3. Công dụng"></a>3. Công dụng</h3><p>Regex được sử dụng với rất nhiều mục đích khác nhau nhưng thường được dùng nhiều với mục đích đối sánh văn bản và kiểm tra cú pháp trong các trình biên tập văn bản và các tiện ích tìm kiếm và xử lý văn bản dựa trên các mẫu được quy định.</p><blockquote><p>Ví dụ: Nếu bạn muốn tạo bộ lọc và muốn loại bỏ dữ liệu là những trang web mà người khác tạo ra, bạn có thể sử dụng biểu thức chính quy để loại trừ bất kỳ dữ liệu nào từ toàn bộ dải địa chỉ IP người khác sử dụng. Giả sử các địa chỉ IP đó có dải từ 198.51.100.1 - 198.51.100.25. Thay vì nhập 25 địa chỉ IP khác nhau, bạn có thể tạo biểu thức chính quy như 198.51.100.\d* để đối sánh với toàn bộ dải địa chỉ.</p></blockquote><h3 id="4-Cach-dung"><a href="#4-Cach-dung" class="headerlink" title="4. Cách dùng"></a>4. Cách dùng</h3><h4 id="Cac-ki-tu-dac-biet"><a href="#Cac-ki-tu-dac-biet" class="headerlink" title="Các kí tự đặc biệt"></a>Các kí tự đặc biệt</h4><p>Bảng 4.1 Các kí tự đặc biệt trong biểu thức chính quy.</p><table><thead><tr><th>Kí tự (kí hiệu, cờ)</th><th>Ý nghĩa</th></tr></thead><tbody><tr><td>\</td><td>Tìm với luật dưới đây:  Một dấu gạch chéo ngược sẽ biến một kí tự thường liền kế phía sau thành một kí tự đặc biệt, tức là nó không được sử dụng để tìm kiếm thông thường nữa. Ví dụ,  trường hợp kí tự ‘b’ không có dấu gạch chéo ngược này sẽ được khớp với các kí tự ‘b’ in thường, nhưng khi nó có thêm dấu gạch chéo ngược, ‘\b’ thì nó sẽ không khớp với bất kì kí tự nào nữa, lúc này nó trở thành kí tự đặc biệt. Xem thêm phần word boundary character để biết thêm chi tiết.  Tuy nhiên nếu đứng trước một kí tự đặc biệt thì nó sẽ biến kí tự này thành một kí tự thường, tức là bạn có thể tìm kiếm kí tự đặc biệt này trong xâu chuỗi của bạn như các kí tự thường khác. Ví dụ, mẫu /a<em>/ có ‘’ là kí tự đặc biệt và mẫu này sẽ bị phụ thuộc vào kí tự này, nên được hiểu là sẽ tìm khớp  với 0 hoặc nhiều kí tự a. Nhưng, với mẫu /a</em>/ thì kí tự ‘’ lúc này được hiểu là kí tự thường nên mẫu này sẽ tìm kiếm xâu con là ‘a*’.  Đừng quên \ cũng là một kí tự đặc biệt, khi cần so khớp chính nó ta cũng phải đánh dấu nó là kí tự đặc biệt bằng cách đặt \ ở trước ().</td></tr><tr><td>^</td><td>Khớp các kí tự đứng đầu một chuỗi. Nếu có nhiều cờ này thì nó còn khớp được cả các kí tự đứng đầu của mỗi dòng (sau kí tự xuống dòng).  Ví dụ, /^A/ sẽ không khớp được với ‘A’ trong “an A” vì ‘A’ lúc này không đứng đầu chuỗi, nhưng nó sẽ khớp “An E” vì lúc này ‘A’ đã đứng đầu chuỗi. Ý nghĩa của ‘^’ sẽ thay đổi khi nó xuất hiện như một kí tự đầu tiên trong một lớp kí tự, xem phần complemented character sets để biết thêm chi tiết.</td></tr><tr><td>$</td><td>So khớp ở cuối chuỗi. Nếu gắn cờ multiline (đa dòng), nó sẽ khớp ngay trước kí tự xuống dòng.Ví dụ, /t$/ không khớp với ‘t’ trong chuỗi “eater” nhưng lại khớp trong chuỗi “eat”.</td></tr><tr><td>*</td><td>Cho phép kí tự trước nó lặp lại 0 lần hoặc nhiều lần. Tương đương với cách viết {0,}.Ví dụ, /bo*/ khớp với ‘boooo’ trong chuỗi “A ghost booooed” nhưng không khớp trong chuỗi “A birth warbled”.</td></tr><tr><td>+</td><td>Cho phép kí tự trước nó lặp lại 1 lần hoặc nhiều lần. Tương đương với cách viết {1,}.Ví dụ, /a+/ khớp với ‘a’ trong chuỗi “candy” và khớp với tất cả kí tự a liền nhau trong chuỗi “caaaaaaandy”.</td></tr><tr><td>?</td><td>Cho phép kí tự trước nó lặp lại 0 lần hoặc 1 lần duy nhất. Tương đương với cách viết {0,1}.Ví dụ, /e?le?/ khớp với ‘el’ trong chuỗi “angel” và ‘le’ trong chuỗi “angle” hay ‘l’ trong “oslo”.Nếu sử dụng kí tự này ngay sau bất kì kí tự định lượng nào trong số *,+,? hay {}, đều làm bộ định lượng “chán ăn” (dừng so khớp sau ngay khi tìm được kí tự phù hợp), trái ngược với đức tính “tham lam” vốn sẵn của chúng (khớp tất cả kí tự chúng tìm thấy). Ví dụ, áp dụng biểu mẫu /\d+/ cho “123abc” ta được “123”. Nhưng áp /\d+?/ cho chính chuỗi trên ta chỉ nhận được kết quả là “1”.Bạn có thể đọc thêm trong mục x(?=y) và x(?!y) của bảng này.</td></tr><tr><td>.</td><td>Dấu . khớp với bất kì kí tự đơn nào ngoại trừ kí tự xuống dòng.Ví dụ, /.n/ khớp với ‘an’ và ‘on’ trong chuỗi “no, an apple is on the tree”, nhưng không khớp với ‘no’.</td></tr><tr><td>(x)</td><td>Khớp ‘x’ và nhớ kết quả so khớp này, như ví dụ ở dưới. Các dấu ngoặc tròn được gọi là các dấu ngoặc có nhớ.Biểu mẫu /(foo) (bar) \1 \2/ khớp với ‘foo’ và ‘bar’ trong chuỗi “foo bar foo bar”. \1 và \2 trong mẫu khớp với 2 từ cuối.Chú ý rằng \1, \2, \n được sử dụng để so khớp các phần trong regex, nó đại diện cho nhóm so khớp đằng trước. Ví dụ: /(foo) (bar) \1 \2/ tương đương với biểu thức /(foo) (bar) foo bar/. Cú pháp $1, $2, $n còn được sử dụng trong việc thay thế các phần của một regex. Ví dụ: ‘bar foo’.replace(/(…) (…)/, ‘$2 $1’) sẽ đảo vị trí 2 từ ‘bar’ và ‘foo’ cho nhau.</td></tr><tr><td>(?:x)</td><td>Khớp ‘x’ nhưng không nhớ kết quả so khớp. Những dấu ngoặc tròn được gọi là những dấu ngoặc không nhớ, nó cho phép bạn định nghĩa những biểu thức con cho những toán tử so khớp. Xem xét biểu thức đơn giản /(?:foo){1,2}/. Nếu biểu thức này được viết là /foo{1,2}/, {1,2} sẽ chỉ áp dụng cho kí tự ‘o’ ở cuối chuỗi ‘foo’. Với những dấu ngoặc không nhớ, {1,2} sẽ áp dụng cho cả cụm ‘foo’.</td></tr><tr><td>x(?=y)</td><td>Chỉ khớp ‘x’ nếu ‘x’ theo sau bởi ‘y’.Ví dụ, /Jack(?=Sprat)/ chỉ khớp với ‘Jack’ nếu đằng sau nó là ‘Sprat’. /Jack(?=Sprat</td></tr><tr><td>x(?!y)</td><td>Chỉ khớp ‘x’ nếu ‘x’ không được theo sau bởi ‘y’.Ví dụ: /\d+(?!.)/ chỉ khớp với số không có dấu . đằng sau. Biểu thức /\d+(?!.)/.exec(“3.141”)​ cho kết quả là ‘141’ mà không phải ‘3.141’.</td></tr><tr><td>x</td><td>y</td></tr><tr><td>{n}</td><td>Kí tự đứng trước phải xuất hiện n lần. n phải là một số nguyên dương.Ví dụ, /a{2}/ không khớp với ‘a’ trong “candy”, nhưng nó khớp với tất cả kí tự ‘a’ trong “caandy”, và khớp với 2 kí tự ‘a’ đầu tiên trong “caaandy”.</td></tr><tr><td>{n,m}</td><td>Kí tự đứng trước phải xuất hiện từ n đến m lần. n và m là số nguyên dương và n &lt;= m. Nếu m bị bỏ qua, nó tương đương như ∞.Ví dụ, /a{1,3}/ không khớp bất kì kí tự nào trong “cndy”, kí tự ‘a’ trong “candy”, 2 kí tự ‘a’ đầu tiên trong “caandy”, và 3 kí tự ‘a’ đầu tiên trong “caaaaaaandy”. Lưu ý là “caaaaaaandy” chỉ khớp với 3 kí tự ‘a’ đầu tiên mặc dù chuỗi đó chứa 7 kí tự ‘a’.</td></tr><tr><td>[xyz]</td><td>Lớp kí tự. Loại mẫu này dùng để so khớp với một kí tự bất kì trong dấu ngoặc vuông, bao gồm cả escape sequences. Trong lớp kí tự, dấu chấm (.) và dấu hoa thị (*) không còn là kí tự đặc biệt nên ta không cần kí tự thoát đứng trước nó. Bạn có thể chỉ định một khoảng kí tự bằng cách sử dụng một kí tự gạch nối (-) như trong ví dụ dưới đây:Mẫu [a-d] so khớp tương tự như mẫu [abcd], khớp với ‘b’ trong “brisket” và ‘c’ trong “city”. Mẫu /[a-z.]+/ và /[\w.]+/ khớp với toàn chuỗi “test.i.ng”.</td></tr><tr><td>[^xyz]</td><td>Lớp kí tự phủ định. Khi kí tự ^ đứng đầu tiên trong dấu ngoặc vuông, nó phủ định mẫu này.Ví dụ, [^abc] tương tự như [^a-c], khớp với ‘r’ trong “brisket” và ‘h’ trong “chop” là kí tự đầu tiên không thuộc khoảng a đến c.</td></tr><tr><td>[\b]</td><td>Khớp với kí tự dịch lùi - backspace (U+0008). Bạn phải đặt trong dấu ngoặc vuông nếu muốn so khớp một kí tự dịch lùi. (Đừng nhầm lẫn với mẫu \b).</td></tr><tr><td>\b</td><td>Khớp với kí tự biên. Kí tự biên là một kí tự giả, nó khớp với vị trí mà một kí tự không được theo sau hoặc đứng trước bởi một kí tự khác. Tương đương với mẫu (^\w</td></tr><tr><td>\B</td><td>Khớp với kí tự không phải kí tự biên. Mẫu này khớp tại vị trí mà kí tự trước và kí tự sau nó cùng kiểu: hoặc cả hai là kí tự hoặc cả hai không phải là kí tự. Bắt đầu và kết thúc chuỗi không được xem là những kí tự.Ví dụ, /\B../ khớp với ‘oo’ trong “noonday”, và /y\B./ khớp với ‘ye’ trong “possibly yesterday.”</td></tr><tr><td>\cX</td><td>X là một kí tự trong khoảng A tới Z. Mẫu này khớp với một kí tự điều khiển trong một chuỗi.Ví dụ: /\cM/ khớp với control-M (U+000D) trong chuỗi.</td></tr><tr><td>\d</td><td>Khớp với một kí tự số. Tương đương với mẫu [0-9].Ví dụ: /\d/ hoặc /[0-9]/ khớp với ‘2’ trong chuỗi “B2 is the suite number.”</td></tr><tr><td>\D</td><td>Khớp với một kí tự không phải là kí tự số. Tương đương với mẫu [^0-9].Ví dụ; /\D/ hoặc /[^0-9]/ khớp với ‘B’ trong “B2 is the suite number.”</td></tr><tr><td>\f</td><td>Khớp với kí tự phân trang - form feed (U+000C).</td></tr><tr><td>\n</td><td>Khớp với kí tự xuống dòng - line feed (U+000A).</td></tr><tr><td>\r</td><td>Khớp với kí tự quay đầu dòng -  carriage return (U+000D).</td></tr><tr><td>\s</td><td>Khớp với một kí tự khoảng trắng, bao gồm trống - space, tab, phân trang - form feed, phân dòng - line feed. Tương đương với [ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​\u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​​\u202f\u205f​\u3000].Ví dụ: /\s\w*/ khớp với ‘ bar’ trong “foo bar.”</td></tr><tr><td>\S</td><td>Khớp với một kí tự không phải khoảng trắng. Tương đương với [^ \f\n\r\t\v​\u00a0\u1680​\u180e\u2000​\u2001\u2002​\u2003\u2004​\u2005\u2006​\u2007\u2008​\u2009\u200a​\u2028\u2029​\u202f\u205f​\u3000].Ví dụ: /\S\w*/ khớp với ‘foo’ trong chuỗi “foo bar.”</td></tr><tr><td>\t</td><td>Khớp với kí tự tab (U+0009).</td></tr><tr><td>\v</td><td>Khớp với kí tự vertical tab (U+000B).</td></tr><tr><td>\w</td><td>Khớp với tất cả kí tự là chữ, số và gạch dưới. Tương đương với mẫu [A-Za-z0-9_].Ví dụ, /\w/ khớp với ‘a’ trong “apple,” ‘5’ trong “$5.28,” và ‘3’ trong “3D.”</td></tr><tr><td>\W</td><td>Khớp với tất cả kí tự không phải là chữ. Tương đương với mẫu [^A-Za-z0-9_].Ví dụ, /\W/ hoặc /[^A-Za-z0-9_]/ khớp với ‘%’ trong “50%.”</td></tr><tr><td>\n</td><td>Trong đó, n là một số nguyên dương, một tham chiếu ngược tới chuỗi khớp thứ n trong biểu thức (đếm từ trái sang, bắt đầu bằng 1).Ví dụ, /apple(,)\sorange\1/ hay /apple(,)\sorange,/ khớp với ‘apple, orange,’ trong chuỗi “apple, orange, cherry, peach.”</td></tr><tr><td>\0</td><td>Khớp với kí tự NULL (U+0000). Lưu ý: không được thêm bất kì một kí tự số nào sau 0, vì \0 là một biểu diễn hệ bát phân escape sequence.</td></tr><tr><td>\xhh</td><td>Khớp với kí tự với mã code là hh (2 số trong hệ thập lục phân)</td></tr><tr><td>\uhhhh</td><td>Khớp với kí tự có mã hhhh (4 số trong hệ thập lục phân).</td></tr></tbody></table><h4 id="Lam-viec-voi-bieu-thuc-chinh-quy"><a href="#Lam-viec-voi-bieu-thuc-chinh-quy" class="headerlink" title="Làm việc với biểu thức chính quy"></a>Làm việc với biểu thức chính quy</h4><p>Bảng 4.2 Những phương thức được sử dụng trong biểu thức chính quy</p><table><thead><tr><th>Phương thức</th><th>Mô tả</th></tr></thead><tbody><tr><td>exec</td><td>Một phương thức của RegExp dùng để tìm kiếm chuỗi phù hợp với mẫu so khớp. Nó trả về một mảng chứa kết quả tìm kiếm.</td></tr><tr><td>test</td><td>Một phương thức của RegExp dùng để kiểm tra mẫu có khớp với chuỗi hay không. Nó trả về giá trị true hoặc false.</td></tr><tr><td>match</td><td>Một phương thức của chuỗi dùng để tìm kiếm chuỗi phù hợp với mẫu so khớp. Nó trả về một mảng chứa kết quả tìm kiếm hoặc null nếu không tìm thấy.</td></tr><tr><td>search</td><td>Một phương thức của chuỗi dùng để tìm kiếm chuỗi phù hợp với mẫu so khớp và trả về vị trí của chuỗi đó hoặc -1 nếu không tìm thấy.</td></tr><tr><td>replace</td><td>Một phương thức của chuỗi dùng để tìm kiếm một chuỗi theo mẫu so khớp và thay thế chuỗi con được khớp với một chuỗi thay thế.</td></tr><tr><td>split</td><td>Một phương thức của chuỗi dùng một biểu mẫu chính quy hoặc một chuỗi bất biến để ngắt chuỗi đó thành một mảng các chuỗi con.</td></tr></tbody></table><h4 id="Vi-du"><a href="#Vi-du" class="headerlink" title="Ví dụ"></a>Ví dụ</h4><p>Mã hóa escapse chuỗi người dùng nhập vào bằng một hàm thay thế đơn giản sử dụng biểu thức chính quy:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeRegExp</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.replace(<span class="regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="string">"\\$&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hh3gywbz2y_image%20%283%29.png" target="_blank" rel="noopener"><img src="https://s3-ap-southeast-1.amazonaws.com/kipalog.com/hh3gywbz2y_image%20%283%29.png" alt="alt text"></a></p><p>Bạn có thể sử dụng trang web <a href="https://regex101.com/" target="_blank" rel="noopener">Regex101.com</a> , dán một đoạn regex vào đấy, nó sẽ giải thích đoạn mã đấy làm gì.</p><h4 id="Luu-y"><a href="#Luu-y" class="headerlink" title="Lưu ý"></a>Lưu ý</h4><p>Giữ biểu thức chính quy của bạn đơn giản. Regex đơn giản giúp người dùng khác hiểu và sửa đổi dễ dàng hơn.</p><p>Biểu thức chính quy về bản chất đối sánh rất nhiều dữ liệu: nếu bạn không chỉ định cho regex biết không nên đối sánh dữ liệu nào, chúng sẽ đối sánh với những gì bạn chỉ định và bất kỳ ký tự liền kề nào. Ví dụ: site đối sánh với mysite, yoursite, theirsite, parasite–bất kỳ chuỗi có chứa “site”. Nếu bạn cần thực hiện đối sánh cụ thể, hãy thiết lập cấu trúc regex của bạn cho phù hợp. Ví dụ: nếu bạn chỉ cần đối sánh với chuỗi “site”, hãy thiết lập cấu trúc regex của bạn để “site” vừa là bắt đầu chuỗi vừa là kết thúc chuỗi: ^site$.</p><h3 id="5-Tham-khao"><a href="#5-Tham-khao" class="headerlink" title="5. Tham khảo"></a>5. Tham khảo</h3><p><a href="https://support.google.com/analytics/answer/1034324?hl=vi&amp;ref_topic=1034375%0Ahttps://developer.mozilla.org/vi/docs/Web/JavaScript/Guide/Regular_Expressions%0Ahttps://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener">Analytics Trợ giúp</a><br>Nguồn N.T.Giáp - Kaopiz</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Người dẫn lại bài này cũng được phen lao đao khi lục lọi lại mớ kiến thức cơ bản cũ. Đối với sự nghiệp của một coder thì phải được thực hiện liên tục, nếu không sẽ rất dễ quên và lóng ngóng dù chỉ là những kiến thức cơ bản nhất. Dẫu biết rằng &lt;strong&gt;search là sẽ thấy&lt;/strong&gt; nhưng nhiều phen cũng không khỏi thẹn vì giải thích sai cho đàn em =)) Cũng may đọc lại được bài của cu em công ty, kiến thức lại nhanh chóng được khỏa lấp, vì kiến thức nội bộ nên xin được trích lại bài chia sẻ của em nó để đây cho đỡ quên.!&lt;/p&gt;
    
    </summary>
    
    
      <category term="regex" scheme="http://nthung2112.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Học Regular Expression và cuộc đời bạn sẽ bớt khổ</title>
    <link href="http://nthung2112.github.io/2018/04/Hoc-Regular-Expression-va-cuoc-doi-ban-se-bot-kho.html"/>
    <id>http://nthung2112.github.io/2018/04/Hoc-Regular-Expression-va-cuoc-doi-ban-se-bot-kho.html</id>
    <published>2018-04-25T08:27:00.000Z</published>
    <updated>2018-04-30T08:06:42.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Regular-Expression-RegEx-a-Nghe-quen-quen"><a href="#Regular-Expression-RegEx-a-Nghe-quen-quen" class="headerlink" title="Regular Expression (RegEx) à? Nghe quen quen."></a>Regular Expression (RegEx) à? Nghe quen quen.</h2><a id="more"></a><blockquote><p><em><strong>Đã bao giờ bạn ở vào các tính huống sau đây?</strong></em></p></blockquote><h3 id="Ban-can-xu-ly-validate-kiem-tra-tinh-hop-le-cac-truong-du-lieu-nhap-vao-o-Text"><a href="#Ban-can-xu-ly-validate-kiem-tra-tinh-hop-le-cac-truong-du-lieu-nhap-vao-o-Text" class="headerlink" title="Bạn cần xử lý validate (kiểm tra tính hợp lệ) các trường dữ liệu nhập vào ô Text"></a>Bạn cần xử lý validate (kiểm tra tính hợp lệ) các trường dữ liệu nhập vào ô Text</h3><p><img src="https://images.viblo.asia/1e7a1bf4-eb56-428c-b731-eb53970ffba9.png" alt=""></p><h3 id="Ban-can-copy-va-paste-rat-nhieu-text-tu-cho-nay-sang-cho-kia"><a href="#Ban-can-copy-va-paste-rat-nhieu-text-tu-cho-nay-sang-cho-kia" class="headerlink" title="Bạn cần copy và paste rất nhiều text từ chỗ này sang chỗ kia"></a>Bạn cần copy và paste rất nhiều text từ chỗ này sang chỗ kia</h3><p>Ví dụ từ XML sang C#</p><p><img src="https://images.viblo.asia/4b3505d9-e466-427e-8ee4-e7327ec16d12.jpg" alt=""></p><p>hoặc CSV, Excel sang C#</p><p><img src="https://images.viblo.asia/2a11aac3-36a4-43d9-b3de-b75f36b41ab8.jpg" alt=""></p><h3 id="Tim-kiem-mot-chuoi-nam-o-nhieu-dong-trong-Visual-Studio-hoac-Notepad"><a href="#Tim-kiem-mot-chuoi-nam-o-nhieu-dong-trong-Visual-Studio-hoac-Notepad" class="headerlink" title="Tìm kiếm một chuỗi nằm ở nhiều dòng trong Visual Studio hoặc Notepad++"></a>Tìm kiếm một chuỗi nằm ở nhiều dòng trong Visual Studio hoặc Notepad++</h3><p>Ví dụ tôi cần tìm và xóa bỏ (replace all) các comment như thế này ở code cũ.</p><p><img src="https://images.viblo.asia/b77a555f-0486-4fef-bf15-637fa70473c9.jpg" alt=""></p><h3 id="Ban-can-boc-tach-du-lieu-cua-mot-trang-web"><a href="#Ban-can-boc-tach-du-lieu-cua-mot-trang-web" class="headerlink" title="Bạn cần bóc tách dữ liệu của một trang web."></a>Bạn cần bóc tách dữ liệu của một trang web.</h3><p>Ví dụ extract (crawling) tách lấy dữ liệu từ một trang web để lưu lại vào cơ sở dữ liệu của bạn</p><p><img src="https://images.viblo.asia/17aa1867-6f02-47b0-9884-6467e44a660d.jpg" alt=""></p><h3 id="Con-ac-mong-doc-mot-chuoi-string-tu-DB-va-co-gang-chuyen-doi-no-sang-DateTime"><a href="#Con-ac-mong-doc-mot-chuoi-string-tu-DB-va-co-gang-chuyen-doi-no-sang-DateTime" class="headerlink" title="Cơn ác mộng đọc một chuỗi string từ DB và cố gắng chuyển đổi nó sang DateTime"></a>Cơn ác mộng đọc một chuỗi string từ DB và cố gắng chuyển đổi nó sang DateTime</h3><p>Chuỗi ngày tháng lưu vào CSDL rất đa dạng. Rất khó để dùng hàm DateTime.TryParse() để tự động chuyển đổi một chuỗi thành Datetime ngon lành cành đào.</p><p><img src="https://images.viblo.asia/c40a1d3d-4f01-4f24-8749-119034a8f1ab.png" alt=""></p><h3 id="Tim-kiem-mot-chuoi-luu-chuoi-do-lai-va-lay-chuoi-da-luu-chen-vao-cho-nao-do"><a href="#Tim-kiem-mot-chuoi-luu-chuoi-do-lai-va-lay-chuoi-da-luu-chen-vao-cho-nao-do" class="headerlink" title="Tìm kiếm một chuỗi, lưu chuỗi đó lại và lấy chuỗi đã lưu chèn vào chỗ nào đó"></a>Tìm kiếm một chuỗi, lưu chuỗi đó lại và lấy chuỗi đã lưu chèn vào chỗ nào đó</h3><p>Hay nói cách khác, ta cần thay một chuỗi bằng một chuỗi khác, trong chuỗi mới đó lại có chứa cả chuỗi vừa bị thay thế. Như ví dụ dưới đây sẽ cho các bạn thấy. Ta cần tìm ra ClassName, nhưng không phải thay thế ClassName đó bằng Class khác mà ta sẽ nhét nó vào 2 vị trí thay vì chỉ có 1 vị trí như hiện tại.</p><p><img src="https://images.viblo.asia/7a2da882-3374-4327-ae69-57e43cadbc6a.jpg" alt=""></p><p><img src="https://images.viblo.asia/cc4d46c2-54d1-44a5-9dea-a2c6de67837e.gif" alt=""></p><h1 id="Vay-RegEx-co-the-giup-gi-cho-chung-ta-trong-cac-truong-hop-tren"><a href="#Vay-RegEx-co-the-giup-gi-cho-chung-ta-trong-cac-truong-hop-tren" class="headerlink" title="Vậy RegEx có thể giúp gì cho chúng ta trong các trường hợp trên?"></a>Vậy RegEx có thể giúp gì cho chúng ta trong các trường hợp trên?</h1><p>Regular Expression sinh ra là để giúp cho cuộc đời của bạn bớt khổ. Hãy tưởng tượng xem bạn phải nai lưng ra copy-paste bao nhiêu code. Bạn hoàn toàn có thể download các tool về để replace giúp bạn. Nhưng bạn cần bao nhiêu tool cho đủ đây.</p><p>Thay vào đó, bạn hãy thử học RegEx. Bộ cú pháp này sẽ giúp cho bạn thao tác với chuỗi như dao chém chuối. Như ta thấy các ví dụ bên trên, tất cả đều là XỬ LÝ CHUỖI ví dụ Cut Copy Paste hoặc Replace chuỗi. RegEx là ngôn ngữ giúp xử lý chuỗi rất mạnh.</p><p>RegEx không phải là một ngôn ngữ lập trình. Nó chỉ là một BỘ CÚ PHÁP dùng để bắt chuỗi. Nhưng nó cực kỳ phổ biến và bất kỳ ngôn ngữ lập trình nào cũng hỗ trợ. Nó có cả trăm ngàn ứng dụng và công cụ ăn theo.</p><p>Hãy lần lượt xem qua các ví dụ sau đây để học cách sử dụng Regular Expression nhé.</p><h1 id="Bat-dau-su-dung-Regular-Expression"><a href="#Bat-dau-su-dung-Regular-Expression" class="headerlink" title="Bắt đầu sử dụng Regular Expression"></a>Bắt đầu sử dụng Regular Expression</h1><p>Để bắt đầu sử dụng và học cách dùng RegEx, mình hay dùng trang web <a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a>. Giao diện như sau:</p><p><img src="https://images.viblo.asia/df2fd4af-d0f0-4e92-bd56-5570086484d3.gif" alt=""></p><h3 id="Truoc-het-cac-ban-hay-doc-qua-mot-luot-cac-quy-tac-bat-chuoi-matching-don-gian-nhat-cua-RegEx"><a href="#Truoc-het-cac-ban-hay-doc-qua-mot-luot-cac-quy-tac-bat-chuoi-matching-don-gian-nhat-cua-RegEx" class="headerlink" title="Trước hết các bạn hãy đọc qua một lượt các quy tắc bắt chuỗi (matching) đơn giản nhất của RegEx"></a>Trước hết các bạn hãy đọc qua một lượt các quy tắc bắt chuỗi (matching) đơn giản nhất của RegEx</h3><ul><li>[xyz] Tìm và so sánh tất cả ký tự nằm trong dấu ngoặc vuông và trùng khớp với 1 ký tự trong dấu ngoặc vuông. Ví dụ: [31] sẽ trùng khớp với <strong>3</strong> hoặc <strong>1</strong>, [0123456789] sẽ trùng khớp với bất kỳ một ký tự nào trong khoảng từ <strong>0</strong> đến <strong>9</strong>.</li><li>[a-z] So sánh và trùng khớp với một ký tự nằm trong khoảng chỉ định. Ví dụ: [a-z] sẽ trùng khớp với một ký tự trong khoảng từ a đến z nằm trong chuỗi cần test. [0-9] sẽ trùng khớp với bất kỳ một ký tự nào trong khoảng từ <strong>0</strong> đến <strong>9</strong>.</li><li>[^xyz] So sánh và không trùng khớp với những ký tự nằm trong khoảng chỉ định. Dấu ^ (dấu mũ) nằm trong dấu ngoặc vuông là một dấu phủ định. Ví dụ: [^a-z] sẽ không trùng khớp với tất cả các ký tự nằm trong khoảng từ <strong>a</strong> đến <strong>z</strong>.</li><li>^ Trùng khớp với phần đầu của chuỗi đích. Ví dụ: ^a sẽ trùng khớp với chữ <strong>a</strong> trong chuỗi <strong>abc</strong>, ^\w+ sẽ trùng khớp với chữ đầu tiên – chữ <strong>“the”</strong> của chuỗi <strong>“The quick brown fox jumps over the lazy dog”</strong>.</li><li>$ Trùng khớp với phần cuối của chuỗi đích. Ví dụ: c$ sẽ trùng khớp với chữ c trong chuỗi abc, \w+$ sẽ trùng khớp với chữ cuối – chữ <strong>“dog”</strong> của chuỗi <strong>“The quick brown fox jumps over the lazy dog”</strong>.</li><li><ul><li>Trùng khớp với 1 hoặc nhiều lần ký tự đứng trước nó. Ví dụ \d+ sẽ chỉ trùng với chuỗi có từ 1 con số trở lên.</li></ul></li><li><ul><li>Trùng khớp với 0 hoặc nhiều lần ký tự đứng trước nó. Ví dụ \d* sẽ trùng với chuỗi có chứa 1 chữ số hoặc k có chữ số nào cũng đc.</li></ul></li><li>? Trùng khớp với 0 hoặc 1 lần ký tự đứng trước nó. Tương tự như <em> nhưng nó lại chỉ nhân lên 1 lần. </em> thì nhân lên nhiều lần.</li><li>. Trùng khớp với 1 ký tự đơn bất kỳ ngoại trừ ký tự ngắt dòng (line-break) và cũng không lấy được ký tự có dấu (unicode). Ví dụ: . sẽ trùng khớp với ký tự <strong>a hoặc b hoặc c</strong> trong chuỗi <strong>abc</strong>. Nhưng . sẽ không bắt được các chữ ă hoặc ê.</li><li>x{n} Trùng khớp đúng với n lần ký tự đứng trước nó. n là một số không âm. Ví dụ \d{2} sẽ bắt đc các số có 2 chữ số đứng liền nhau.</li><li>x{n,} Trùng khớp với ít nhất n lần ký tự đứng trước nó. n là một số không âm.Ví dụ \d{2,} sẽ bắt đc các số có từ 2 chữ số trở lên đứng liền nhau.</li><li>x{n,m} Trùng khớp với ít nhất n lần và nhiều nhất là m lần ký tự đứng trước nó. n và m là một số không âm và n &lt;= m. Ví dụ: a{1,3} sẽ khớp với <strong>hah, haah, haaah</strong> nhưng không khớp với <strong>haaaah</strong>.</li><li>x|y Trùng khớp với x hoặc y. Ví dụ: slow|fast sẽ khớp với chữ <strong>slow</strong> hoặc <strong>fast</strong> trong chuỗi đích.</li><li>\b Trùng khớp với toàn bộ ký tự đứng trước nó. Ví dụ: hello\b sẽ trùng khớp với toàn bộ từ hello trong chuỗi <strong>hello world</strong> nhưng sẽ không khớp với chuỗi <strong>helloworld</strong>.</li><li>\B Ngược lại với \b, \B sẽ không khớp với toàn bộ mà chỉ 1 phần ký tự đứng trước nó. Ví dụ: hello\B sẽ trùng khớp với chữ hello trong chuỗi <strong>helloworld</strong> nhưng sẽ không khớp với chuỗi <strong>hello world</strong>.</li><li>\d Trùng khớp 1 ký tự số (digit).</li><li>\D Trùng khớp 1ký tự không phải số (non-digit).</li><li>\s Trùng khớp 1 ký tự khoảng trắng (whitespace) bao gồm khoảng trắng tạo ra bởi phím Tab.</li><li>\S Trùng khớp với 1 ký tự không phải là khoảng trắng (non-whitespace).</li><li>\w Trùng khớp với các ký tự là từ (word) bao gồm dấu _ (underscore) và chữ số.</li><li>\W Trùng khớp với các ký tự không phải là từ (non-word). Ví dụ: \W sẽ khớp với ký tự % trong chuỗi <strong>“100%”</strong>.</li><li>\uxxxx Trùng khớp với 1 ký tự unicode. Ví dụ: \u00FA sẽ khớp với ký tự <strong>“ú”</strong>, \u00F9 sẽ khớp với ký tự <strong>“ù”</strong>.</li><li>\pL Trùng khớp với một ký tự Unicode bất kỳ ngoại trừ dấu cách. Đây chính là cú pháp viết hoàn hảo hơn của dấu .,Ví dụ \pL+ sẽ lấy được chuỗi truyền, thuyết trong chuỗi <strong>“truyền thuyết”</strong>.</li></ul><p><img src="https://images.viblo.asia/bb00ea2c-cb41-4090-bce0-1b7ce1893791.gif" alt=""></p><p>Đừng lo, hãy xem qua các ví dụ từ từ rồi bạn sẽ hiểu</p><h2 id="Vi-du-don-gian"><a href="#Vi-du-don-gian" class="headerlink" title="Ví dụ đơn giản"></a>Ví dụ đơn giản</h2><h3 id="Tim-chuoi-so"><a href="#Tim-chuoi-so" class="headerlink" title="Tìm chuỗi số"></a>Tìm chuỗi số</h3><p><img src="https://images.viblo.asia/f2448336-4cd5-4ceb-a147-f617228b24ed.gif" alt=""></p><h3 id="Tim-ngay-thang"><a href="#Tim-ngay-thang" class="headerlink" title="Tìm ngày tháng"></a>Tìm ngày tháng</h3><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/Regex_CaptureDate.gif" alt=""></p><p>Link demo: <a href="https://regex101.com/r/3dNzjU/1" target="_blank" rel="noopener">https://regex101.com/r/3dNzjU/1</a></p><h3 id="Tim-ngay-thang-chinh-xac"><a href="#Tim-ngay-thang-chinh-xac" class="headerlink" title="Tìm ngày tháng chính xác"></a>Tìm ngày tháng chính xác</h3><p>Trong ví dụ trên thì ta thấy có chuỗi <strong>“60/60/2018”</strong> cũng được coi là ngày tháng, như thế là không chính xác. Ta hãy viết lại cho chuẩn.</p><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_CaptureDate_Advance.gif" alt=""></p><p>Link demo: <a href="https://regex101.com/r/3dNzjU/2" target="_blank" rel="noopener">https://regex101.com/r/3dNzjU/2</a></p><h2 id="Cach-“tom-lay”-string-can-tim-dua-vao-Group"><a href="#Cach-“tom-lay”-string-can-tim-dua-vao-Group" class="headerlink" title="Cách “tóm lấy” string cần tìm đưa vào Group"></a>Cách “tóm lấy” string cần tìm đưa vào Group</h2><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_MatchGroup.gif" alt=""></p><h2 id="Cach-tao-ra-code-de-dung-RegEx-trong-cac-ngon-ngu-lap-trinh"><a href="#Cach-tao-ra-code-de-dung-RegEx-trong-cac-ngon-ngu-lap-trinh" class="headerlink" title="Cách tạo ra code để dùng RegEx trong các ngôn ngữ lập trình"></a>Cách tạo ra code để dùng RegEx trong các ngôn ngữ lập trình</h2><p>RegEx là bộ cú pháp, tuy nhiên để áp dụng nó vào các ngôn ngữ lập trình lại phải tuân thủ theo các thư viện và quy tắc lập trình để lấy ra được các Group đã capture (thu) được. Hãy xem các tạo code ngay sau đây:</p><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_GenerateCode.gif" alt=""></p><h2 id="Cach-bat-lay-chuoi-bat-ky"><a href="#Cach-bat-lay-chuoi-bat-ky" class="headerlink" title="Cách bắt lấy chuỗi bất kỳ"></a>Cách bắt lấy chuỗi bất kỳ</h2><p><img src="https://raw.githubusercontent.com/chungminhtu/regex_practices/master/RegEx_CaptureString.gif" alt=""><br> Link demo: <a href="https://regex101.com/r/3dNzjU/3" target="_blank" rel="noopener">https://regex101.com/r/3dNzjU/3</a></p><h1 id="Su-dung-RegEx-trong-thuc-te"><a href="#Su-dung-RegEx-trong-thuc-te" class="headerlink" title="Sử dụng RegEx trong thực tế"></a>Sử dụng RegEx trong thực tế</h1><p>Trong thực tế RegEx có thể được gõ trực tiếp ở bất kỳ trình Editor nào. Ví dụ mình hay dùng Notepad++, hoặc Visual Studio</p><p><img src="https://github.com/chungminhtu/regex_practices/blob/master/Nodepad++KepChuoi.gif?raw=true" alt=""></p><h1 id="Tham-khao"><a href="#Tham-khao" class="headerlink" title="Tham khảo"></a>Tham khảo</h1><p>Tham khảo thêm toàn bộ cú pháp RegEx bằng tiếng Anh tại: <a href="https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/" target="_blank" rel="noopener">https://www.cheatography.com/davechild/cheat-sheets/regular-expressions/</a></p><blockquote><p>Một số công cụ test RegEx Online</p></blockquote><ul><li><a href="https://regex101.com/" target="_blank" rel="noopener">https://regex101.com/</a></li><li><a href="http://regexr.com/" target="_blank" rel="noopener">http://regexr.com/</a></li><li><a href="http://www.regexpal.com/" target="_blank" rel="noopener">http://www.regexpal.com/</a></li><li><a href="http://regexper.com/" target="_blank" rel="noopener">http://regexper.com/</a></li></ul><h1 id="Bai-tap-ve-nha"><a href="#Bai-tap-ve-nha" class="headerlink" title="Bài tập về nhà"></a>Bài tập về nhà</h1><p>Bạn ngứa tay muốn thử học RegEx ngay và luôn cho nóng. Vậy hãy thử thực hành bằng một số bài tập từ dễ đến khó sau đây nhé.</p><p><em><strong>Bài tập nhập môn:</strong></em></p><ol><li>Lấy ra các chữ có chữ test trong chuỗi sau: <strong>“that tested test is testing the tester’s tests”</strong></li><li>Lấy ra các số điện thoại trong chuỗi sau: <strong> “p:444-555-1234 f:246.555.8888 m:1235554567”</strong></li><li>Lấy ra các mã màu RGB trong chuỗi sau: <strong>“#FF006C ABC 99AAB7FF 0xF0F73611”</strong></li><li>Lấy ra các chữ có 4 ký tự trong chuỗi sau: <strong>“drink beer, it’s very nice!”</strong></li><li>Lấy ra tên file trong chuỗi URL sau: <strong>“<a href="http://rapidshare.com/asd/asd/File.avi.html%E2%80%9D" target="_blank" rel="noopener">rapidshare.com/asd/asd/File.avi.html”</a></strong></li></ol><blockquote><p>Đáp án ở phần comment nhé.</p></blockquote><p><em><strong>Bài tập dành cho học sinh giỏi (lớp học thêm)</strong></em></p><ol><li>Tìm cách lấy các URL trong chuỗi HTML sau:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Lorem gyum</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Betrag<span class="tag">&lt;/<span class="name">b</span>&gt;</span> von </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.vektor.de"</span>&gt;</span>Vektoren<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">(Länge eines Vektors)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"gcfa.com"</span>&gt;</span>GCFA<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//cdn.com/test.js"</span>&gt;</span>CDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">ist das Maß einer Menge sozu…</span><br></pre></td></tr></table></figure><ol><li>Tìm cách loại bỏ toàn bộ COMMENT trong đoạn code sau:</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sample = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">var</span> my_string = <span class="string">"Hello World!"</span>; </span><br><span class="line"><span class="comment">// This is a comment! </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_stuff</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="comment">// This is another comment! </span></span><br><span class="line">alert(‘somethings’);</span><br><span class="line"><span class="comment">/* this is a multiline</span></span><br><span class="line"><span class="comment">     comment */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Tìm cách lấy ra chuỗi tiếng Nhật trong chuỗi sau: “</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a demo story　前に来た時は北側からで、当時の光景はいまでも思い出せる。And it is true.</span><br></pre></td></tr></table></figure><ol><li>Lấy ra những file ảnh và độ phân giải của ảnh từ chuỗi sau:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.bash_profile</span><br><span class="line">workspace.doc</span><br><span class="line">img0912.jpg (1280x720)</span><br><span class="line">updated_img0912.png (1024x768)</span><br><span class="line">documentation.html</span><br><span class="line">favicon.gif </span><br><span class="line">img0912.jpg (1920x1600)</span><br><span class="line">access.htaccess</span><br></pre></td></tr></table></figure><ol><li>Đọc nội dung từ trang tin rss sau: <a href="http://rss.cnn.com/rss/edition.rss" target="_blank" rel="noopener">http://rss.cnn.com/rss/edition.rss</a> Lấy ra các Tiêu đề, ngày giờ đăng, nội dung tin vắn</li></ol><blockquote><p>Đáp án các bạn post vào phần comment và cùng trao đổi nhé.</p></blockquote><p>Nếu các bài tập trên đây vẫn chưa đủ, các bạn hãy làm thêm các bài tập tại trang <a href="https://regexone.com" target="_blank" rel="noopener">https://regexone.com</a> nhé, rất nhiều ví dụ hay.</p><h1 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận"></a>Kết luận</h1><p>Hi vọng bài viết nhỏ này đã giúp bạn học được cú pháp viết RegEx và áp dụng vào công việc thường ngày. Mình dùng Regex rất nhiều và nó là trợ thủ đắc lực trong quá trình code.</p><p>Các bạn thì sao? bạn đã dùng Regex vào những việc gì? Hãy kể tên bên dưới comment để mình cùng học hỏi với nhé.</p><p>Thanks các bạn đã đọc!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Regular-Expression-RegEx-a-Nghe-quen-quen&quot;&gt;&lt;a href=&quot;#Regular-Expression-RegEx-a-Nghe-quen-quen&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression (RegEx) à? Nghe quen quen.&quot;&gt;&lt;/a&gt;Regular Expression (RegEx) à? Nghe quen quen.&lt;/h2&gt;
    
    </summary>
    
    
      <category term="regex" scheme="http://nthung2112.github.io/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Tìm hiểu Higher-Order Function (HOF) và Currying qua một số ví dụ</title>
    <link href="http://nthung2112.github.io/2018/04/Tim-hieu-Higher-Order-Function-HOF-va-Currying-qua-mot-so-vi-du-3.html"/>
    <id>http://nthung2112.github.io/2018/04/Tim-hieu-Higher-Order-Function-HOF-va-Currying-qua-mot-so-vi-du-3.html</id>
    <published>2018-04-03T04:20:00.000Z</published>
    <updated>2018-05-18T01:02:21.693Z</updated>
    
    <content type="html"><![CDATA[<p>HOF và Currying là hai kỹ thuật không khó, thậm chí có thể bạn đang dùng nó hàng ngày mà không để ý. Cùng tìm hiểu chúng thông qua một số ví dụ.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>Tôi cho rằng một kỹ sư phần mềm pro không phải là người viết ra những dòng code đánh đố người đọc hay đồng nghiệp, mà là người viết những dòng code mà khi người khác đọc nó liền cảm thấy trong sáng, dễ hiểu, dễ bảo trì.</p><p>Cũng như sự tiến hóa của con người, khi mà “ăn no, ăn sạch rồi ăn ngon”, thì coding cũng có slogan tương tự: <a href="http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast" target="_blank" rel="noopener">“chạy được, chạy đúng, sau cùng là chạy nhanh”</a>.<br>Vậy, sau khi chạy được và chạy đúng rồi, chúng ta nên suy nghĩ xem ngoài việc có thể chạy nhanh hơn ko, thì đoạn code này đã sáng sủa chưa? Nếu bị/được sửa thì có dễ ko?</p><p>HOF và Currying là 2 trong số ti tỉ kỹ thuật nhằm giúp chúng ta, những lập trình viên huyền thoại, đạt được tiêu chí trên.<br><a id="more"></a><br>Trước khi đi vào khái niệm cụ thể, chúng ta cùng xem ví dụ dưới đây:</p><h3 id="Vi-du-1"><a href="#Vi-du-1" class="headerlink" title="Ví dụ 1"></a>Ví dụ 1</h3><p>Nhóc con nhà bạn nhờ bạn tìm những số tự nhiên khác 0 nhỏ hơn 20 và là số lẻ.<br>Là một ông bố mẫu mực với niềm kiêu hãnh nhiều năm kinh nghiệm fixed hàng trăm bug nhỏ và <del>tạo ra</del> hàng tá bug to, bạn muốn viết một chương trình hoành tráng để lấy le với con mình. Ok, you win!.<br>Dưới đây chắc hẳn là đoạn code đầu tiên xuất hiện trong đầu:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickOddNumbers</span>(<span class="params">maximum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">1</span>) result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pickOddNumbers(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>Nhưng đời không bao giờ là mơ, khi hôm sau nhóc con lại mếu máo: “Cô giáo cho thêm bài: Tìm những số tự nhiên khác 0 nhỏ hơn 20 mà nếu gấp 3 số đó rồi từ đi 2 thì thu được số chẵn.”.<br>Bố chiều cô luôn. Vậy là bạn lại cho ra phiên bản mới:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickSpecialNumbers</span>(<span class="params">maximum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (((i * <span class="number">3</span>) - <span class="number">2</span>) % <span class="number">2</span> === <span class="number">0</span>) result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pickSpecialNumbers(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>Đời vẫn ko như mơ khi cô giáo lại cho thêm bài tập: “Tìm những số tự nhiên khác 0 nhỏ hơn 20 mà nếu lấy phần dư số đó cho 9 rồi cộng thêm 2 thì thu số lẻ.”<br>Ơ cô giáo từ từ, để bố em sửa function bên trên đã :))))</p><p>Cứ như vậy, mỗi lần cô giáo cho thêm yêu cầu là bạn lại phải sửa phiên bản cũ hoặc cho ra một bản mới, tuy yêu cầu khác nhau nhưng xử lý cơ bản là giống nhau, chỉ khác ở đoạn xử lý điều kiện cho số được chọn.<br>Và bạn chợt nhớ tới HOF, một ứng cử viên sáng giá cho việc làm đoạn code trên sạch hơn, gọn hơn, dễ sửa hơn.</p><h3 id="Dinh-nghia-HOF"><a href="#Dinh-nghia-HOF" class="headerlink" title="Định nghĩa HOF"></a>Định nghĩa HOF</h3><p>Theo <a href="https://en.wikipedia.org/wiki/Higher-order_function" target="_blank" rel="noopener">wikipedia</a> thì:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A higher-order <span class="function"><span class="keyword">function</span> (<span class="params">also functional, functional form or functor</span>) <span class="title">is</span> <span class="title">a</span> <span class="title">function</span> <span class="title">that</span> <span class="title">does</span> <span class="title">at</span> <span class="title">least</span> <span class="title">one</span> <span class="title">of</span> <span class="title">the</span> <span class="title">following</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">・<span class="title">takes</span> <span class="title">one</span> <span class="title">or</span> <span class="title">more</span> <span class="title">functions</span> <span class="title">as</span> <span class="title">arguments</span>,</span></span><br><span class="line"><span class="function">・<span class="title">returns</span> <span class="title">a</span> <span class="title">function</span> <span class="title">as</span> <span class="title">its</span> <span class="title">result</span>.</span></span><br></pre></td></tr></table></figure><p>Vietsub:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HOF là một <span class="function"><span class="keyword">function</span> <span class="title">m</span>à <span class="title">cho</span> <span class="title">ph</span>é<span class="title">p</span> <span class="title">th</span>ự<span class="title">c</span> <span class="title">hi</span>ệ<span class="title">n</span> í<span class="title">t</span> <span class="title">nh</span>ấ<span class="title">t</span> 1 <span class="title">trong</span> 2 <span class="title">kh</span>ả <span class="title">n</span>ă<span class="title">ng</span> <span class="title">sau</span>:</span></span><br><span class="line"><span class="function">・<span class="title">Nh</span>ậ<span class="title">n</span> <span class="title">v</span>à<span class="title">o</span> <span class="title">m</span>ộ<span class="title">t</span> <span class="title">ho</span>ặ<span class="title">c</span> <span class="title">nhi</span>ề<span class="title">u</span> <span class="title">function</span> <span class="title">nh</span>ư <span class="title">l</span>à <span class="title">tham</span> <span class="title">s</span>ố, <span class="title">ho</span>ặ<span class="title">c</span>/<span class="title">v</span>à</span></span><br><span class="line"><span class="function">・<span class="title">Tr</span>ả <span class="title">v</span>ề <span class="title">k</span>ế<span class="title">t</span> <span class="title">qu</span>ả <span class="title">l</span>à <span class="title">m</span>ộ<span class="title">t</span> <span class="title">function</span>.</span></span><br></pre></td></tr></table></figure><p><em>// Bạn có thể thấy có rất nhiều ngôn ngữ hỗ trợ HOF ở link wiki trên. Đến Java còn hỗ trợ nữa là :v</em></p><p>Trăm nghe không bằng một thấy, trăm thấy không bằng một sờ, và chúng ta lại cùng sờ với ví dụ bên trên.<br>Lần này là bản nâng cấp có giá trị về mặt học thuật, vì được áp dụng HOF vào cơ mà :)))</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickNumbers</span>(<span class="params">maximum, pickingCondition</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pickingCondition(i)) result.push(i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số lẻ</span></span><br><span class="line">pickNumbers(<span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số mà gấp 3 số đó rồi trừ đi 2 thu số chẵn</span></span><br><span class="line">pickNumbers(<span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((number * <span class="number">3</span>) - <span class="number">2</span>) % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Với việc đưa HOF vào function bên trên, giờ thì cô giáo thích gì cũng chiều được nhé,<br>chỉ cần thay đổi function kiểm tra điều kiện vào thôi, ko cần phải copy thành function mới nữa.</p><h3 id="Dinh-nghia-Currying"><a href="#Dinh-nghia-Currying" class="headerlink" title="Định nghĩa Currying"></a>Định nghĩa Currying</h3><p>Lại theo <a href="https://en.wikipedia.org/wiki/Currying" target="_blank" rel="noopener">wikipedia</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Currying is the technique <span class="keyword">of</span> translating the evaluation <span class="keyword">of</span> a <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">that</span> <span class="title">takes</span> <span class="title">multiple</span> <span class="title">arguments</span> (<span class="params">or a tuple of arguments</span>)</span></span><br><span class="line"><span class="function"><span class="title">into</span> <span class="title">evaluating</span> <span class="title">a</span> <span class="title">sequence</span> <span class="title">of</span> <span class="title">functions</span>, <span class="title">each</span> <span class="title">with</span> <span class="title">a</span> <span class="title">single</span> <span class="title">argument</span>.</span></span><br></pre></td></tr></table></figure><p>Vietsub:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Currying là kỹ thuật mà cho phép chuyển đổi một <span class="function"><span class="keyword">function</span> <span class="title">v</span>ớ<span class="title">i</span> <span class="title">nhi</span>ề<span class="title">u</span> <span class="title">tham</span> <span class="title">s</span>ố</span></span><br><span class="line"><span class="function"><span class="title">th</span>à<span class="title">nh</span> <span class="title">nh</span>ữ<span class="title">ng</span> <span class="title">functions</span> <span class="title">li</span>ê<span class="title">n</span> <span class="title">ti</span>ế<span class="title">p</span> <span class="title">c</span>ó <span class="title">m</span>ộ<span class="title">t</span> <span class="title">tham</span> <span class="title">s</span>ố.</span></span><br><span class="line"><span class="function">// <span class="title">V</span>í <span class="title">d</span>ụ <span class="title">f</span>(<span class="params">a,b,c</span>) <span class="title">c</span>ó <span class="title">th</span>ể đượ<span class="title">c</span> <span class="title">convert</span> <span class="title">th</span>à<span class="title">nh</span> <span class="title">g</span>(<span class="params">a</span>)<span class="title">h</span>(<span class="params">b, c</span>) <span class="title">hay</span> <span class="title">g</span>(<span class="params">a</span>)<span class="title">h</span>(<span class="params">b</span>)<span class="title">k</span>(<span class="params">c</span>), <span class="title">th</span>ậ<span class="title">m</span> <span class="title">ch</span>í <span class="title">l</span>à đổ<span class="title">i</span> <span class="title">th</span>ứ <span class="title">t</span>ự <span class="title">c</span>ủ<span class="title">a</span> <span class="title">c</span>á<span class="title">c</span> <span class="title">function</span> <span class="title">t</span>ươ<span class="title">ng</span> ứ<span class="title">ng</span>...</span></span><br></pre></td></tr></table></figure><p>Vậy dễ dàng nhận thấy Currying là một trường hợp của HOF, vì nó thỏa mãn điều kiện trả về kết quả là một function.</p><p>Cụ thể áp dụng cho ví dụ trên, có thể viết thành dạng sau:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickNumbers</span>(<span class="params">maximum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">pickingCondition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= maximum; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pickingCondition(i)) result.push(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số lẻ</span></span><br><span class="line">pickNumbers(<span class="number">20</span>)(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chọn ra những số mà gấp 3 số đó rồi trừ đi 2 thu số chẵn</span></span><br><span class="line">pickNumbers(<span class="number">20</span>)(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (number * <span class="number">3</span> - <span class="number">2</span>) % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>So sánh ví dụ áp dụng Currying này với ví dụ sử dụng HOF ở trên, rõ ràng là ta chưa thấy sự ưu việt của Currying so với HOF, thậm chí còn thấy hơi rườm rà nữa.<br>Tuy nhiên, hãy cùng xem xét ví dụ dưới đây:</p><h3 id="Vi-du-2"><a href="#Vi-du-2" class="headerlink" title="Ví dụ 2"></a>Ví dụ 2</h3><p>Viết một function lấy ra giá trị của một key của object, được chọn ra từ một mảng các objects với điều kiện. Đơn giản vậy thôi, nên việc cài đặt cũng có vẻ là đơn giản.</p><p>Với HOF:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">objects, key, pickingCondition</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> object = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pickingCondition(objects[i])) &#123;</span><br><span class="line">      object = objects[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> object ? object[key] : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Mỗi khi gọi function với key khác nhau, hẳn là sẽ phải gọi kiểu như vầy:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> valueByKey1 = getValue(objects, <span class="string">'key1'</span>, pickingCondition);</span><br><span class="line"><span class="keyword">var</span> valueByKey2 = getValue(objects, <span class="string">'key2'</span>, pickingCondition);</span><br></pre></td></tr></table></figure><p>Nếu như coi key là <strong>biết trước</strong>, chỉ thay đổi objects và pickingCondition, thì việc áp dụng Currying là hợp lý:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">objects, pickingCondition</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> object = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; objects.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pickingCondition(objects[i])) &#123;</span><br><span class="line">        object = objects[i];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object ? object[key] : <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrap getValue thành những function ngắn hơn với tên sáng nghĩa:</span></span><br><span class="line"><span class="keyword">var</span> getValueByKey1 = getValue(<span class="string">'key1'</span>);</span><br><span class="line"><span class="keyword">var</span> getValueByKey2 = getValue(<span class="string">'key2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sử dụng:</span></span><br><span class="line"><span class="keyword">var</span> valueByKey1 = getValueByKey1(objects, pickingCondition);</span><br><span class="line"><span class="keyword">var</span> valueByKey2 = getValueByKey2(objects, pickingCondition);</span><br></pre></td></tr></table></figure><p>Khá là gọn gàng.</p><p><em>// Ngoài lề: Nếu bạn làm việc với ReactJs, hẳn bạn đã biết tới thuật ngữ Higher-Order Component, hay các selectors mà redux-form cung cấp, thì chúng đều áp dụng kỹ thuật Currying này, cũng như HOF.</em></p><p>Dưới đây là một vài ví dụ cho thấy tác dụng tốt của Currying:</p><h3 id="Vi-du-3"><a href="#Vi-du-3" class="headerlink" title="Ví dụ 3"></a>Ví dụ 3</h3><p>Viết function để kiểm tra độ dài của một xâu s có vượt quá n hay ko.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cách 1: Không dùng Currying</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLengthOver</span>(<span class="params">s, n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.length &gt; n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cách 2: Có Currying</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLengthOver</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.length &gt; n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Giả sử cả 2 cách viết trên được sử dụng cho việc validate của một field trên form, với n = 10 thì có sự khác biệt như sau:</p><p>Với cách 1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> validate=&#123;value =&gt; isLengthOver(value, <span class="number">10</span>)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>Với cách 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> validate=&#123;isLengthOver(<span class="number">10</span>)&#125; /&gt;</span><br></pre></td></tr></table></figure><p>Quá khác bọt!</p><h3 id="Vi-du-4"><a href="#Vi-du-4" class="headerlink" title="Ví dụ 4"></a>Ví dụ 4</h3><p>Viết function hiển thị tên group mà một nhân viên đang làm việc, với:</p><p>Input:</p><ul><li>employeeGroupId là id của group mà nhân viên đang làm việc,</li><li>Mảng chứa toàn bộ groups có trong công ty.</li></ul><p>Điều kiện rằng buộc:</p><ul><li>Một group luôn có id khác null,</li><li>Nếu groupB là group con của groupA, thì groupB sẽ có parentGroupId là id của groupA. Group không là con khi parentGroupId của nó là null,</li><li>Không có quan hệ vòng tròn. (Kiểu: groupA là con groupB, groupB là con groupC, groupC là con groupA)</li></ul><p>Output:</p><ul><li>Full path của group mà nhân viên đang làm việc, phân cách bởi dấu /. Ví dụ Group A / Group B / Group C</li></ul><p>Chắc hẳn bạn sẽ nghĩ tới cách dùng vòng lặp, kiểm tra chừng nào còn tìm thấy group có id bằng parentGroupId. Và tôi cũng nghĩ vậy :D</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getGroupFullPathName = <span class="function">(<span class="params">groups, employeeGroupId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> groupNames = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> group = groups.find(<span class="function"><span class="params">grp</span> =&gt;</span> grp.id === employeeGroupId);</span><br><span class="line">  <span class="keyword">while</span> (group) &#123;</span><br><span class="line">    groupNames.unshift(group.name);</span><br><span class="line">    group = groups.find(<span class="function"><span class="params">grp</span> =&gt;</span> grp.id === group.parentGroupId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> groupNames.join(<span class="string">'/'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Nhưng đoạn code trên vẫn chưa ngon, do vi phạm rule <a href="https://eslint.org/docs/rules/no-loop-func" target="_blank" rel="noopener">Don’t make functions within a loop</a> của ESLint.<br>Cụ thể: Mỗi khi vòng while được chạy thì groups.find(grp =&gt; grp.id === group.parentGroupId) lại sinh ra một anonymous function, chính là grp =&gt; grp.id === group.parentGroupId.</p><p>Cách khắc phục là ta viết một currying bên ngoài vòng while là được:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getGroupFullPathName = <span class="function">(<span class="params">groups, employeeGroupId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> groupNames = [];</span><br><span class="line">  <span class="keyword">const</span> condition = <span class="function"><span class="params">parentGroupId</span> =&gt;</span> group =&gt; group.id === parentGroupId;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> group = groups.find(<span class="function"><span class="params">grp</span> =&gt;</span> grp.id === employeeGroupId);</span><br><span class="line">  <span class="keyword">while</span> (group) &#123;</span><br><span class="line">    groupNames.unshift(group.name);</span><br><span class="line">    group = groups.find(condition(group.parentDepartmentId));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> groupNames.join(<span class="string">'/'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Ket-luan"><a href="#Ket-luan" class="headerlink" title="Kết luận:"></a>Kết luận:</h3><p>Bài quá dài.</p><p><em>// Nếu mấy ví dụ trên dùng cú pháp của es6 và dùng các api của Array thì sẽ ngắn hơn nhiều, nhưng lại khó nhìn rõ đâu là function được nhận vào/trả ra, nên các bạn chịu khó đọc với cú pháp cơ bản vậy :D</em></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HOF và Currying là hai kỹ thuật không khó, thậm chí có thể bạn đang dùng nó hàng ngày mà không để ý. Cùng tìm hiểu chúng thông qua một số ví dụ.&lt;/p&gt;
&lt;h3 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h3&gt;&lt;p&gt;Tôi cho rằng một kỹ sư phần mềm pro không phải là người viết ra những dòng code đánh đố người đọc hay đồng nghiệp, mà là người viết những dòng code mà khi người khác đọc nó liền cảm thấy trong sáng, dễ hiểu, dễ bảo trì.&lt;/p&gt;
&lt;p&gt;Cũng như sự tiến hóa của con người, khi mà “ăn no, ăn sạch rồi ăn ngon”, thì coding cũng có slogan tương tự: &lt;a href=&quot;http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“chạy được, chạy đúng, sau cùng là chạy nhanh”&lt;/a&gt;.&lt;br&gt;Vậy, sau khi chạy được và chạy đúng rồi, chúng ta nên suy nghĩ xem ngoài việc có thể chạy nhanh hơn ko, thì đoạn code này đã sáng sủa chưa? Nếu bị/được sửa thì có dễ ko?&lt;/p&gt;
&lt;p&gt;HOF và Currying là 2 trong số ti tỉ kỹ thuật nhằm giúp chúng ta, những lập trình viên huyền thoại, đạt được tiêu chí trên.&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://nthung2112.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://nthung2112.github.io/tags/javascript/"/>
    
      <category term="hof" scheme="http://nthung2112.github.io/tags/hof/"/>
    
  </entry>
  
  <entry>
    <title>CSS Grid vs Flexbox sử dụng như thế nào</title>
    <link href="http://nthung2112.github.io/2018/03/CSS-Grid-vs-Flexbox-su-dung-nhu-the-nao.html"/>
    <id>http://nthung2112.github.io/2018/03/CSS-Grid-vs-Flexbox-su-dung-nhu-the-nao.html</id>
    <published>2018-03-25T13:52:00.000Z</published>
    <updated>2018-03-25T07:39:52.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no"><a href="#Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no" class="headerlink" title="Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó."></a>Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó.</h2><p>CSS Flexbox đã trở nên cực kỳ quen thuộc với các lập trình viên front-end trong vài năm gần đây. Điều này không đáng ngạc nhiên, bởi vì nó giúp chúng ta tạo ra các bố cục động (dynamic layout) và sắp xếp nội dung trong các container dễ dàng hơn rất nhiều.</p><p>Tuy nhiên, có một mô-đun mới gọi là CSS Grid và nó có nhiều khả năng giống như Flexbox. Trong một vài trường hợp nó tốt hơn so với Flexbox, và một số trường hợp khác thì không.</p><p>Điều này có vẻ gây nhầm lẫn cho các lập trình viên. Vì vậy, bài viết này sẽ so sánh hai mô-đun, cả mức độ vi mô và vĩ mô.</p><a id="more"></a><h3 id="Mot-chieu-vs-hai-chieu"><a href="#Mot-chieu-vs-hai-chieu" class="headerlink" title="Một chiều vs hai chiều"></a>Một chiều vs hai chiều</h3><p>Nếu bạn rút ra một bài học từ bài viết này, thì đây là nó:</p><blockquote><p>Flexbox được tạo ra cho các bố cục một chiều và Grid được tạo ra cho các bố cục hai chiều.</p></blockquote><p>Điều này có nghĩa là nếu bạn đang đặt các item theo một hướng (ví dụ ba nút bên trong header), thì bạn nên sử dụng Flexbox:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*h6dcLWRp0lXeWklPAFK8cA.png" alt=""></p><p>Nó sẽ linh hoạt hơn CSS Grid. Và cũng dễ dàng hơn để bảo trì và yêu cầu mã ít hơn.</p><p>Tuy nhiên nếu bạn định tạo bố cục theo hai chiều - với cả các hàng và các cột - thì bạn nên sử dụng CSS Grid:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*AxItLokVtaF56WMo_ZF6Pw.png" alt=""></p><p>Trong trường hợp này, CSS Grid sẽ linh hoạt hơn, làm cho code của bạn đơn giản hơn và dễ bảo trì hơn.</p><p>Tất nhiên bạn có thể kết hợp cả hai. Trong ví dụ ở trên, giải pháp hoàn hảo là sử dụng Grid cho việc bố cục trang, và sau đó dùng Flexbox để sắp xếp nội dung bên trong header. Điều này sẽ cung cấp cho bạn những chức năng tốt nhất của cả hai mô-đun.</p><h3 id="Content-first-vs-layout-first"><a href="#Content-first-vs-layout-first" class="headerlink" title="Content-first vs layout-first"></a>Content-first vs layout-first</h3><p>Một khác biệt quan trọng nữa giữa 2 mô-đun là Flexbox tập trung vào <strong>nội dung</strong> trong khi Grid tập trung vào <strong>bố cục</strong>. Điều này có vẻ trừu tượng, vì vậy hãy xem một ví dụ cụ thể, nó sẽ dễ hiểu hơn.</p><p>Chúng ta sẽ sử dụng header. Đây là code HTML cho nó:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Trước khi chúng ta style nó với Flexbox, các div này sẽ được xếp chồng lên nhau như thế này:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*VRnOqt5g9NVKY-NUh0vh7Q.png" alt=""></p><h4 id="Flexbox-header"><a href="#Flexbox-header" class="headerlink" title="Flexbox header"></a>Flexbox header</h4><p>Tuy nhiên, khi chúng ta style nó với display: flex; các item sẽ được đặt trên một dòng.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn-images-1.medium.com/max/1600/1*XHmGGavmUsEi3-vd9v0vcg.png" alt=""></p><p>Để di chuyển nút <em>logout</em> sang phía bên phải, chúng ta chỉ cần chọn phần tử đó và style với margin:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kết quả sẽ như thế này:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*1inbBN_44U2HSwFL3Ech-w.png" alt=""></p><p>Cái tôi muốn bạn để ý ở đây là chúng ta để các item tự quyết định vị trí của mình. Chúng ta không phải xác định trước bất cứ điều gì khác ngoài <code>display: flex;</code>.</p><p>Đây là khác biệt chính giữa Flexbox và Grid, và nó sẽ trở nên rõ ràng hơn khi chúng ta tạo header này bằng cách sử dụng Grid.</p><blockquote><p>Mặc dù CSS Grid không được tạo ra cho header một chiều, nhưng vẫn là một ý hay khi làm điều này vì nó dạy cho chúng ta về sự khác biệt cốt lõi giữa Flexbox và Grid.</p></blockquote><h4 id="Grid-header"><a href="#Grid-header" class="headerlink" title="Grid header"></a>Grid header</h4><p>Chúng ta có thể tạo header theo nhiều cách khác nhau với CSS Grid. Tôi sẽ sử dụng một cách khá đơn giản, trong đó grid của chúng ta có mười cột.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(10, 1fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nó sẽ giống hệt với giải pháp Flexbox.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*VPeA-uXOph9dNuOEUAz_kQ.png" alt=""></p><p>Tuy nhiên, chúng ta có thể sử dụng Chrome inspector để kiểm tra các dòng cột:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*RK-Kw7WoW6hXnpIYIPZF3Q.png" alt=""></p><p>Sự khác biệt chính với cách tiếp cận này là chúng ta phải xác định các cột - bố cục - đầu tiên. Chúng ta bắt đầu với việc xác định chiều rộng của các cột, và <em>sau đó</em> chúng ta đặt nội dung vào các ô có sẵn trong grid.</p><blockquote><p>Cách tiếp cận này buộc chúng ta phải xác định số lượng cột mà chúng ta muốn chia trong header.</p></blockquote><p>Trừ khi thay đổi grid, còn không chúng ta luôn có 10 cột. Một hạn chế mà chúng ta sẽ không phải đối mặt trong Flexbox.</p><p>Để thay đổi <em>logout</em> sang phía bên tay phải, chúng ta sẽ đặt nó vào cột thứ mười, như sau:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dùng Chrome inspector chúng ta sẽ thấy:</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*u5z2zikNjwyL84dcUhRgJA.png" alt=""></p><p>Chúng ta không thể chỉ đơn giản style nó với <code>margin-left: auto;</code> vì nút <em>logout</em> đã được đặt trong một ô cụ thể trong bố cục, trong cột thứ ba. Để di chuyển nó, chúng ta phải tìm một ô khác cho nó.</p><h3 id="Ket-hop-ca-hai"><a href="#Ket-hop-ca-hai" class="headerlink" title="Kết hợp cả hai"></a>Kết hợp cả hai</h3><p>Bây giờ chúng ta hãy xem cách kết hợp cả hai, sát nhập header vào bố cục trang web. Chúng ta sẽ bắt đầu bằng cách xây dựng bố cục trang web.</p><p><img src="https://cdn-images-1.medium.com/max/1600/1*OcjCKOnh48lYnUuEJw_ZBA.png" alt=""></p><p>Đây là HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>MENU<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Đây là CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;    </span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(12, 1fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">350px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chúng ta sẽ đặt các item trên grid như sau:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: span <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tiếp theo, chúng ta sẽ chỉ cần thêm style cho header. Chúng ta sẽ biến header - một <em>item</em> trong CSS Grid - thành một Flexbox container.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chúng ta có thể thiết lập nút logout sang bên phải:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kết quả, chúng ta có một bố cục hoàn hảo sử dụng những tính năng tốt nhất từ cả Grid và Flexbox. Hai container sẽ trông như thế này:</p><p><img src="https://cdn-images-1.medium.com/max/2000/1*jPJsp3kukI6WNQBntfHsWg.png" alt=""></p><p>Bây giờ, bạn đã hiểu rõ sự khác biệt nói chung và cụ thể giữa Flexbox và Grid, và biết cách sử dụng chúng cùng với nhau.</p><h4 id="Trinh-duyet-ho-tro"><a href="#Trinh-duyet-ho-tro" class="headerlink" title="Trình duyệt hỗ trợ"></a>Trình duyệt hỗ trợ</h4><p>Trước khi kết thúc, tôi cũng cần đề cập đến các trình duyệt hỗ trợ CSS Grid. Vào thời điểm này (25/03/2018), <a href="https://caniuse.com/#feat=css-grid" target="_blank" rel="noopener">84.14% website toàn cầu hỗ trợ CSS Grid</a>, và nó đang tăng dần.</p><p>Tôi tin năm 2018 sẽ là năm của CSS Grid. Nó sẽ đột phá, và sẽ trở thành một kỹ năng phải có của các lập trình viên front-end. Giống như những gì đã xảy ra với CSS Flexbox trong vài năm gần đây.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no&quot;&gt;&lt;a href=&quot;#Tim-hieu-cach-chung-khac-nhau-va-khi-ban-nen-su-dung-no&quot; class=&quot;headerlink&quot; title=&quot;Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó.&quot;&gt;&lt;/a&gt;Tìm hiểu cách chúng khác nhau, và khi bạn nên sử dụng nó.&lt;/h2&gt;&lt;p&gt;CSS Flexbox đã trở nên cực kỳ quen thuộc với các lập trình viên front-end trong vài năm gần đây. Điều này không đáng ngạc nhiên, bởi vì nó giúp chúng ta tạo ra các bố cục động (dynamic layout) và sắp xếp nội dung trong các container dễ dàng hơn rất nhiều.&lt;/p&gt;
&lt;p&gt;Tuy nhiên, có một mô-đun mới gọi là CSS Grid và nó có nhiều khả năng giống như Flexbox. Trong một vài trường hợp nó tốt hơn so với Flexbox, và một số trường hợp khác thì không.&lt;/p&gt;
&lt;p&gt;Điều này có vẻ gây nhầm lẫn cho các lập trình viên. Vì vậy, bài viết này sẽ so sánh hai mô-đun, cả mức độ vi mô và vĩ mô.&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://nthung2112.github.io/tags/css/"/>
    
      <category term="flexbox" scheme="http://nthung2112.github.io/tags/flexbox/"/>
    
      <category term="grid" scheme="http://nthung2112.github.io/tags/grid/"/>
    
  </entry>
  
</feed>
